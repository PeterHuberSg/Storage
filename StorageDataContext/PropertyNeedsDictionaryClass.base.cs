//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into PropertyNeedsDictionaryClass.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageDataContext  {


    /// <summary>
    /// Some comment for PropertyNeedsDictionaryClass
    /// </summary>
  public partial class PropertyNeedsDictionaryClass: IStorageItemGeneric<PropertyNeedsDictionaryClass> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for PropertyNeedsDictionaryClass. Gets set once PropertyNeedsDictionaryClass gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem propertyNeedsDictionaryClass, int key) {
      ((PropertyNeedsDictionaryClass)propertyNeedsDictionaryClass).Key = key;
    }


    /// <summary>
    /// Used as key into dictionary PropertyNeedsDictionaryClassesByIdInt
    /// </summary>
    public int IdInt { get; private set; }


    /// <summary>
    /// Used as key into dictionary PropertyNeedsDictionaryClassesByIdString
    /// </summary>
    public string? IdString { get; private set; }


    /// <summary>
    /// Some Text comment
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Lower case version of Text
    /// </summary>
    public string TextLower { get; private set; }


    /// <summary>
    /// Some Text comment which can be null
    /// </summary>
    public string? TextNullable { get; private set; }


    /// <summary>
    /// Lower case version of TextNullable
    /// </summary>
    public string? TextNullableLower { get; private set; }


    /// <summary>
    /// Some Text comment
    /// </summary>
    public string TextReadonly { get; }


    /// <summary>
    /// Lower case version of TextReadonly
    /// </summary>
    public string TextReadonlyLower { get; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {
      "Key", 
      "IdInt", 
      "IdString", 
      "Text", 
      "TextLower", 
      "TextNullable", 
      "TextNullableLower", 
      "TextReadonly", 
      "TextReadonlyLower"
    };


    /// <summary>
    /// None existing PropertyNeedsDictionaryClass
    /// </summary>
    internal static PropertyNeedsDictionaryClass NoPropertyNeedsDictionaryClass = new PropertyNeedsDictionaryClass(int.MinValue, null, "NoText", null, "NoTextReadonly", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of PropertyNeedsDictionaryClass has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/PropertyNeedsDictionaryClass, /*new*/PropertyNeedsDictionaryClass>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// PropertyNeedsDictionaryClass Constructor. If isStoring is true, adds PropertyNeedsDictionaryClass to DC.Data.PropertyNeedsDictionaryClasses.
    /// </summary>
    public PropertyNeedsDictionaryClass(
      int idInt, 
      string? idString, 
      string text, 
      string? textNullable, 
      string textReadonly, 
      bool isStoring = true)
    {
      Key = StorageExtensions.NoKey;
      IdInt = idInt;
      IdString = idString;
      Text = text;
      TextLower = Text.ToLowerInvariant();
      TextNullable = textNullable;
      TextNullableLower = TextNullable?.ToLowerInvariant();
      TextReadonly = textReadonly;
      TextReadonlyLower = TextReadonly.ToLowerInvariant();
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public PropertyNeedsDictionaryClass(PropertyNeedsDictionaryClass original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      IdInt = original.IdInt;
      IdString = original.IdString;
      Text = original.Text;
      TextLower = original.TextLower;
      TextNullable = original.TextNullable;
      TextNullableLower = original.TextNullableLower;
      TextReadonly = original.TextReadonly;
      TextReadonlyLower = original.TextReadonlyLower;
      onCloned(this);
    }
    partial void onCloned(PropertyNeedsDictionaryClass clone);


    /// <summary>
    /// Constructor for PropertyNeedsDictionaryClass read from CSV file
    /// </summary>
    private PropertyNeedsDictionaryClass(int key, CsvReader csvReader){
      Key = key;
      IdInt = csvReader.ReadInt();
      DC.Data._PropertyNeedsDictionaryClassesByIdInt.Add(IdInt, this);
      IdString = csvReader.ReadStringNull();
      if (IdString!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByIdString.Add(IdString, this);
      }
      Text = csvReader.ReadString();
      TextLower = Text.ToLowerInvariant();
      TextNullable = csvReader.ReadStringNull();
      TextNullableLower = TextNullable?.ToLowerInvariant();
      TextReadonly = csvReader.ReadString();
      TextReadonlyLower = TextReadonly.ToLowerInvariant();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New PropertyNeedsDictionaryClass read from CSV file
    /// </summary>
    internal static PropertyNeedsDictionaryClass Create(int key, CsvReader csvReader) {
      return new PropertyNeedsDictionaryClass(key, csvReader);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds PropertyNeedsDictionaryClass to DC.Data.PropertyNeedsDictionaryClasses. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"PropertyNeedsDictionaryClass cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data.PropertyNeedsDictionaryClasses.Add(this);
      DC.Data._PropertyNeedsDictionaryClassesByIdInt.Add(IdInt, this);
      if (IdString!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByIdString.Add(IdString, this);
      }
      DC.Data._PropertyNeedsDictionaryClassesByTextLower.Add(TextLower, this);
      if (TextNullableLower!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByTextNullableLower.Add(TextNullableLower, this);
      }
      DC.Data._PropertyNeedsDictionaryClassesByTextReadonlyLower.Add(TextReadonlyLower, this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write PropertyNeedsDictionaryClass to CSV file
    /// </summary>
    public const int EstimatedLineLength = 1061;


    /// <summary>
    /// Write PropertyNeedsDictionaryClass to CSV file
    /// </summary>
    internal static void Write(PropertyNeedsDictionaryClass propertyNeedsDictionaryClass, CsvWriter csvWriter) {
      propertyNeedsDictionaryClass.onCsvWrite();
      csvWriter.Write(propertyNeedsDictionaryClass.IdInt);
      csvWriter.Write(propertyNeedsDictionaryClass.IdString);
      csvWriter.Write(propertyNeedsDictionaryClass.Text);
      csvWriter.Write(propertyNeedsDictionaryClass.TextNullable);
      csvWriter.Write(propertyNeedsDictionaryClass.TextReadonly);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates PropertyNeedsDictionaryClass with the provided values
    /// </summary>
    public void Update(int idInt, string? idString, string text, string? textNullable) {
      var clone = new PropertyNeedsDictionaryClass(this);
      var isCancelled = false;
      onUpdating(idInt, idString, text, textNullable, ref isCancelled);
      if (isCancelled) return;

      var isChangeDetected = false;
      if (IdInt!=idInt) {
      DC.Data._PropertyNeedsDictionaryClassesByIdInt.Remove(propertyNeedsDictionaryClass.IdInt);
        IdInt = idInt;
      DC.Data._PropertyNeedsDictionaryClassesByIdInt.Add(IdInt, this);
        isChangeDetected = true;
      }
      if (IdString!=idString) {
      if (propertyNeedsDictionaryClass.IdString!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByIdString.Remove(propertyNeedsDictionaryClass.IdString);
      }
        IdString = idString;
      if (IdString!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByIdString.Add(IdString, this);
      }
        isChangeDetected = true;
      }
      if (Text!=text) {
      DC.Data._PropertyNeedsDictionaryClassesByTextLower.Remove(propertyNeedsDictionaryClass.TextLower);
        Text = text;
        TextLower = Text.ToLowerInvariant();
      DC.Data._PropertyNeedsDictionaryClassesByTextLower.Add(TextLower, this);
        isChangeDetected = true;
      }
      if (TextNullable!=textNullable) {
      if (propertyNeedsDictionaryClass.TextNullableLower!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByTextNullableLower.Remove(propertyNeedsDictionaryClass.TextNullableLower);
      }
        TextNullable = textNullable;
        TextNullableLower = TextNullable?.ToLowerInvariant();
      if (TextNullableLower!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByTextNullableLower.Add(TextNullableLower, this);
      }
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data.PropertyNeedsDictionaryClasses.ItemHasChanged(clone, this);
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(
      int idInt, 
      string? idString, 
      string text, 
      string? textNullable, 
      ref bool isCancelled);
    partial void onUpdated(PropertyNeedsDictionaryClass old);


    /// <summary>
    /// Updates this PropertyNeedsDictionaryClass with values from CSV file
    /// </summary>
    internal static void Update(PropertyNeedsDictionaryClass propertyNeedsDictionaryClass, CsvReader csvReader){
      DC.Data._PropertyNeedsDictionaryClassesByIdInt.Remove(propertyNeedsDictionaryClass.IdInt);
      propertyNeedsDictionaryClass.IdInt = csvReader.ReadInt();
      DC.Data._PropertyNeedsDictionaryClassesByIdInt.Add(IdInt, this);
      if (propertyNeedsDictionaryClass.IdString!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByIdString.Remove(propertyNeedsDictionaryClass.IdString);
      }
      propertyNeedsDictionaryClass.IdString = csvReader.ReadStringNull();
      if (IdString!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByIdString.Add(IdString, this);
      }
      propertyNeedsDictionaryClass.Text = csvReader.ReadString();
      propertyNeedsDictionaryClass.TextNullable = csvReader.ReadStringNull();
      var textReadonly = csvReader.ReadString();
      if (propertyNeedsDictionaryClass.TextReadonly!=textReadonly) {
        throw new Exception($"PropertyNeedsDictionaryClass.Update(): Property TextReadonly '{propertyNeedsDictionaryClass.TextReadonly}' is " +
          $"readonly, textReadonly '{textReadonly}' read from the CSV file should be the same." + Environment.NewLine + 
          propertyNeedsDictionaryClass.ToString());
      }
      propertyNeedsDictionaryClass.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes PropertyNeedsDictionaryClass from DC.Data.PropertyNeedsDictionaryClasses, 
    /// removes PropertyNeedsDictionaryClass from DC.Data.PropertyNeedsDictionaryClassesByIdInt, 
    /// removes PropertyNeedsDictionaryClass from DC.Data.PropertyNeedsDictionaryClassesByIdString, 
    /// removes PropertyNeedsDictionaryClass from DC.Data.PropertyNeedsDictionaryClassesByTextLower, 
    /// removes PropertyNeedsDictionaryClass from DC.Data.PropertyNeedsDictionaryClassesByTextNullableLower and 
    /// removes PropertyNeedsDictionaryClass from DC.Data.PropertyNeedsDictionaryClassesByTextReadonlyLower.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"PropertyNeedsDictionaryClass.Remove(): PropertyNeedsDictionaryClass 'Class PropertyNeedsDictionaryClass' is not stored in DC.Data, key is {Key}.");
      }
      onRemove();
      DC.Data.PropertyNeedsDictionaryClasses.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Removes PropertyNeedsDictionaryClass from DC.Data.PropertyNeedsDictionaryClassesByIdInt, 
    /// removes PropertyNeedsDictionaryClass from DC.Data.PropertyNeedsDictionaryClassesByIdString, 
    /// removes PropertyNeedsDictionaryClass from DC.Data.PropertyNeedsDictionaryClassesByTextLower, 
    /// removes PropertyNeedsDictionaryClass from DC.Data.PropertyNeedsDictionaryClassesByTextNullableLower and 
    /// removes PropertyNeedsDictionaryClass from DC.Data.PropertyNeedsDictionaryClassesByTextReadonlyLower.
    /// </summary>
    internal static void Disconnect(PropertyNeedsDictionaryClass propertyNeedsDictionaryClass) {
      DC.Data._PropertyNeedsDictionaryClassesByIdInt.Remove(propertyNeedsDictionaryClass.IdInt);
      if (propertyNeedsDictionaryClass.IdString!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByIdString.Remove(propertyNeedsDictionaryClass.IdString);
      }
      DC.Data._PropertyNeedsDictionaryClassesByTextLower.Remove(propertyNeedsDictionaryClass.TextLower);
      if (propertyNeedsDictionaryClass.TextNullableLower!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByTextNullableLower.Remove(propertyNeedsDictionaryClass.TextNullableLower);
      }
      DC.Data._PropertyNeedsDictionaryClassesByTextReadonlyLower.Remove(propertyNeedsDictionaryClass.TextReadonlyLower);
    }


    /// <summary>
    /// Removes PropertyNeedsDictionaryClass from possible parents as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var propertyNeedsDictionaryClass = (PropertyNeedsDictionaryClass) item;
      DC.Data._PropertyNeedsDictionaryClassesByIdInt.Remove(propertyNeedsDictionaryClass.IdInt);
      if (propertyNeedsDictionaryClass.IdString!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByIdString.Remove(propertyNeedsDictionaryClass.IdString);
      }
      DC.Data._PropertyNeedsDictionaryClassesByTextLower.Remove(propertyNeedsDictionaryClass.TextLower);
      if (propertyNeedsDictionaryClass.TextNullableLower!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByTextNullableLower.Remove(propertyNeedsDictionaryClass.TextNullableLower);
      }
      DC.Data._PropertyNeedsDictionaryClassesByTextReadonlyLower.Remove(propertyNeedsDictionaryClass.TextReadonlyLower);
      propertyNeedsDictionaryClass.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the PropertyNeedsDictionaryClass item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldItem, IStorageItem newItem) {
      var propertyNeedsDictionaryClassOld = (PropertyNeedsDictionaryClass) oldItem;
      var propertyNeedsDictionaryClassNew = (PropertyNeedsDictionaryClass) newItem;
      DC.Data._PropertyNeedsDictionaryClassesByIdInt.Remove(propertyNeedsDictionaryClass.IdInt);
      propertyNeedsDictionaryClassNew.IdInt = propertyNeedsDictionaryClassOld.IdInt;
      DC.Data._PropertyNeedsDictionaryClassesByIdInt.Add(IdInt, this);
      if (propertyNeedsDictionaryClass.IdString!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByIdString.Remove(propertyNeedsDictionaryClass.IdString);
      }
      propertyNeedsDictionaryClassNew.IdString = propertyNeedsDictionaryClassOld.IdString;
      if (IdString!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByIdString.Add(IdString, this);
      }
      propertyNeedsDictionaryClassNew.Text = propertyNeedsDictionaryClassOld.Text;
      DC.Data._PropertyNeedsDictionaryClassesByTextLower.Remove(propertyNeedsDictionaryClass.TextLower);
      propertyNeedsDictionaryClassNew.TextLower = propertyNeedsDictionaryClassOld.TextLower;
      DC.Data._PropertyNeedsDictionaryClassesByTextLower.Add(TextLower, this);
      propertyNeedsDictionaryClassNew.TextNullable = propertyNeedsDictionaryClassOld.TextNullable;
      if (propertyNeedsDictionaryClass.TextNullableLower!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByTextNullableLower.Remove(propertyNeedsDictionaryClass.TextNullableLower);
      }
      propertyNeedsDictionaryClassNew.TextNullableLower = propertyNeedsDictionaryClassOld.TextNullableLower;
      if (TextNullableLower!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByTextNullableLower.Add(TextNullableLower, this);
      }
      if (propertyNeedsDictionaryClassNew.TextReadonly!=propertyNeedsDictionaryClassOld.TextReadonly) {
        throw new Exception($"PropertyNeedsDictionaryClass.Update(): Property TextReadonly '{propertyNeedsDictionaryClassNew.TextReadonly}' is " +
          $"readonly, TextReadonly '{propertyNeedsDictionaryClassOld.TextReadonly}' read from the CSV file should be the same." + Environment.NewLine + 
          propertyNeedsDictionaryClassNew.ToString());
      }
      if (propertyNeedsDictionaryClassNew.TextReadonlyLower!=propertyNeedsDictionaryClassOld.TextReadonlyLower) {
        throw new Exception($"PropertyNeedsDictionaryClass.Update(): Property TextReadonlyLower '{propertyNeedsDictionaryClassNew.TextReadonlyLower}' is " +
          $"readonly, TextReadonlyLower '{propertyNeedsDictionaryClassOld.TextReadonlyLower}' read from the CSV file should be the same." + Environment.NewLine + 
          propertyNeedsDictionaryClassNew.ToString());
      }
      propertyNeedsDictionaryClassNew.onRollbackItemUpdated(propertyNeedsDictionaryClassOld);
    }
    partial void onRollbackItemUpdated(PropertyNeedsDictionaryClass oldPropertyNeedsDictionaryClass);


    /// <summary>
    /// Adds PropertyNeedsDictionaryClass item to possible parents again as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemRemove(IStorageItem item) {
      var propertyNeedsDictionaryClass = (PropertyNeedsDictionaryClass) item;
      DC.Data._PropertyNeedsDictionaryClassesByIdInt.Add(IdInt, this);
      if (IdString!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByIdString.Add(IdString, this);
      }
      DC.Data._PropertyNeedsDictionaryClassesByTextLower.Add(TextLower, this);
      if (TextNullableLower!=null) {
        DC.Data._PropertyNeedsDictionaryClassesByTextNullableLower.Add(TextNullableLower, this);
      }
      DC.Data._PropertyNeedsDictionaryClassesByTextReadonlyLower.Add(TextReadonlyLower, this);
      propertyNeedsDictionaryClass.onRollbackItemRemoved();
    }
    partial void onRollbackItemRemoved();


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {IdInt}," +
        $" {IdString}," +
        $" {Text}," +
        $" {TextLower}," +
        $" {TextNullable}," +
        $" {TextNullableLower}," +
        $" {TextReadonly}," +
        $" {TextReadonlyLower}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" IdInt: {IdInt}," +
        $" IdString: {IdString}," +
        $" Text: {Text}," +
        $" TextLower: {TextLower}," +
        $" TextNullable: {TextNullable}," +
        $" TextNullableLower: {TextNullableLower}," +
        $" TextReadonly: {TextReadonly}," +
        $" TextReadonlyLower: {TextReadonlyLower};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
