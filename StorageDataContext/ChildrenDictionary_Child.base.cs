//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ChildrenDictionary_Child.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// DictionaryChild has a member providing the key value needed to add DictionaryChild to  
    /// ParentWithDictionary and ParentWithDictionaryNullable
    /// </summary>
  public partial class ChildrenDictionary_Child: IStorage<ChildrenDictionary_Child> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ChildrenDictionary_Child. Gets set once ChildrenDictionary_Child gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(ChildrenDictionary_Child childrenDictionary_Child, int key) { childrenDictionary_Child.Key = key; }


    /// <summary>
    /// Key field used in ParentWithDictionary.DictionaryChildren and 
    /// ParentWithDictionaryNullable.DictionaryChildrenDictionary
    /// Stores only dates but no times.
    /// </summary>
    public DateTime DateKey { get; private set; }


    /// <summary>
    /// Some info
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Parent
    /// </summary>
    public ChildrenDictionary_Parent ParentWithDictionary { get; private set; }


    /// <summary>
    /// Nullable parent
    /// </summary>
    public ChildrenDictionary_ParentNullable? ParentWithDictionaryNullable { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "DateKey", "Text", "ParentWithDictionary", "ParentWithDictionaryNullable"};


    /// <summary>
    /// None existing ChildrenDictionary_Child
    /// </summary>
    internal static ChildrenDictionary_Child NoChildrenDictionary_Child = new ChildrenDictionary_Child(DateTime.MinValue.Date, "NoText", ChildrenDictionary_Parent.NoChildrenDictionary_Parent, null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of ChildrenDictionary_Child has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action<ChildrenDictionary_Child>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ChildrenDictionary_Child Constructor. If isStoring is true, adds ChildrenDictionary_Child to DC.Data.ChildrenDictionary_Children, 
    /// adds ChildrenDictionary_Child to childrenDictionary_Parent.ChildrenDictionary_Children
    /// and if there is a ParentWithDictionaryNullable adds ChildrenDictionary_Child to childrenDictionary_ParentNullable.ChildrenDictionary_Children.
    /// </summary>
    public ChildrenDictionary_Child(
      DateTime dateKey, 
      string text, 
      ChildrenDictionary_Parent parentWithDictionary, 
      ChildrenDictionary_ParentNullable? parentWithDictionaryNullable, 
      bool isStoring = true)
    {
      Key = StorageExtensions.NoKey;
      DateKey = dateKey.Floor(Rounding.Days);
      Text = text;
      ParentWithDictionary = parentWithDictionary;
      ParentWithDictionaryNullable = parentWithDictionaryNullable;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for ChildrenDictionary_Child read from CSV file
    /// </summary>
    private ChildrenDictionary_Child(int key, CsvReader csvReader, DC context) {
      Key = key;
      DateKey = csvReader.ReadDate();
      Text = csvReader.ReadString();
      var childrenDictionary_ParentKey = csvReader.ReadInt();
      if (context.ChildrenDictionary_Parents.TryGetValue(childrenDictionary_ParentKey, out var parentWithDictionary)) {
          ParentWithDictionary = parentWithDictionary;
      } else {
        throw new Exception($"Read ChildrenDictionary_Child from CSV file: Cannot find ParentWithDictionary with key {childrenDictionary_ParentKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      }
      var parentWithDictionaryNullableKey = csvReader.ReadIntNull();
      if (parentWithDictionaryNullableKey.HasValue) {
        if (context.ChildrenDictionary_ParentNullables.TryGetValue(parentWithDictionaryNullableKey.Value, out var parentWithDictionaryNullable)) {
          ParentWithDictionaryNullable = parentWithDictionaryNullable;
        } else {
          ParentWithDictionaryNullable = ChildrenDictionary_ParentNullable.NoChildrenDictionary_ParentNullable;
        }
      }
      if (ParentWithDictionary!=ChildrenDictionary_Parent.NoChildrenDictionary_Parent) {
        ParentWithDictionary.AddToChildrenDictionary_Children(this);
      }
      if (parentWithDictionaryNullableKey.HasValue && ParentWithDictionaryNullable!=ChildrenDictionary_ParentNullable.NoChildrenDictionary_ParentNullable) {
        ParentWithDictionaryNullable!.AddToChildrenDictionary_Children(this);
      }
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DC context);


    /// <summary>
    /// New ChildrenDictionary_Child read from CSV file
    /// </summary>
    internal static ChildrenDictionary_Child Create(int key, CsvReader csvReader, DC context) {
      return new ChildrenDictionary_Child(key, csvReader, context);
    }


    /// <summary>
    /// Verify that childrenDictionary_Child.ParentWithDictionary exists.
    /// Verify that childrenDictionary_Child.ParentWithDictionaryNullable exists.
    /// </summary>
    internal static bool Verify(ChildrenDictionary_Child childrenDictionary_Child) {
      if (childrenDictionary_Child.ParentWithDictionary==ChildrenDictionary_Parent.NoChildrenDictionary_Parent) return false;
      if (childrenDictionary_Child.ParentWithDictionaryNullable==ChildrenDictionary_ParentNullable.NoChildrenDictionary_ParentNullable) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ChildrenDictionary_Child to DC.Data.ChildrenDictionary_Children, ChildrenDictionary_Parent and ChildrenDictionary_ParentNullable. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ChildrenDictionary_Child cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      if (ParentWithDictionary.Key<0) {
        throw new Exception($"ChildrenDictionary_Child cannot be stored in DC.Data, ParentWithDictionary is missing or not stored yet." + Environment.NewLine + ToString());
      }
      if (ParentWithDictionaryNullable!=null && ParentWithDictionaryNullable.Key<0) {
        throw new Exception($"ChildrenDictionary_Child cannot be stored in DC.Data, ParentWithDictionaryNullable is not stored yet." + Environment.NewLine + ToString());
      }
      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data.ChildrenDictionary_Children.Add(this);
      ParentWithDictionary.AddToChildrenDictionary_Children(this);
      ParentWithDictionaryNullable?.AddToChildrenDictionary_Children(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write ChildrenDictionary_Child to CSV file
    /// </summary>
    public const int MaxLineLength = 161;


    /// <summary>
    /// Write ChildrenDictionary_Child to CSV file
    /// </summary>
    internal static void Write(ChildrenDictionary_Child childrenDictionary_Child, CsvWriter csvWriter) {
      childrenDictionary_Child.onCsvWrite();
      csvWriter.WriteDate(childrenDictionary_Child.DateKey);
      csvWriter.Write(childrenDictionary_Child.Text);
      if (childrenDictionary_Child.ParentWithDictionary.Key<0) throw new Exception($"Cannot write childrenDictionary_Child '{childrenDictionary_Child}' to CSV File, because ParentWithDictionary is not stored in DC.Data.ChildrenDictionary_Parents.");

      csvWriter.Write(childrenDictionary_Child.ParentWithDictionary.Key.ToString());
      if (childrenDictionary_Child.ParentWithDictionaryNullable is null) {
        csvWriter.WriteNull();
      } else {
        if (childrenDictionary_Child.ParentWithDictionaryNullable.Key<0) throw new Exception($"Cannot write childrenDictionary_Child '{childrenDictionary_Child}' to CSV File, because ParentWithDictionaryNullable is not stored in DC.Data.ChildrenDictionary_ParentNullables.");

        csvWriter.Write(childrenDictionary_Child.ParentWithDictionaryNullable.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates ChildrenDictionary_Child with the provided values
    /// </summary>
    public void Update(DateTime dateKey, string text, ChildrenDictionary_Parent parentWithDictionary, ChildrenDictionary_ParentNullable? parentWithDictionaryNullable) {
      var isCancelled = false;
      onUpdating(dateKey, text, parentWithDictionary, parentWithDictionaryNullable, ref isCancelled);
      if (isCancelled) return;

      var isChangeDetected = false;
      var dateKeyRounded = dateKey.Floor(Rounding.Days);
      if (DateKey!=dateKeyRounded) {
        DateKey = dateKeyRounded;
        isChangeDetected = true;
      }
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (ParentWithDictionary!=parentWithDictionary) {
        if (Key>=0) {
          ParentWithDictionary.RemoveFromChildrenDictionary_Children(this);
        }
        ParentWithDictionary = parentWithDictionary;
        if (Key>=0) {
          ParentWithDictionary.AddToChildrenDictionary_Children(this);
        }
        isChangeDetected = true;
      }
      if (ParentWithDictionaryNullable is null) {
        if (parentWithDictionaryNullable is null) {
          //nothing to do
        } else {
          ParentWithDictionaryNullable = parentWithDictionaryNullable;
          if (Key>=0) {
            ParentWithDictionaryNullable.AddToChildrenDictionary_Children(this);
          }
          isChangeDetected = true;
        }
      } else {
        if (parentWithDictionaryNullable is null) {
          if (Key>=0) {
            ParentWithDictionaryNullable.RemoveFromChildrenDictionary_Children(this);
          }
          ParentWithDictionaryNullable = null;
          isChangeDetected = true;
        } else {
          if (ParentWithDictionaryNullable!=parentWithDictionaryNullable) {
            if (Key>=0) {
              ParentWithDictionaryNullable.RemoveFromChildrenDictionary_Children(this);
            }
            ParentWithDictionaryNullable = parentWithDictionaryNullable;
            if (Key>=0) {
              ParentWithDictionaryNullable.AddToChildrenDictionary_Children(this);
            }
            isChangeDetected = true;
          }
        }
      }
      if (isChangeDetected) {
        onUpdated();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdating(
      DateTime dateKey, 
      string text, 
      ChildrenDictionary_Parent parentWithDictionary, 
      ChildrenDictionary_ParentNullable? parentWithDictionaryNullable, 
      ref bool isCancelled);
    partial void onUpdated();


    /// <summary>
    /// Updates this ChildrenDictionary_Child with values from CSV file
    /// </summary>
    internal static void Update(ChildrenDictionary_Child childrenDictionary_Child, CsvReader csvReader, DC context) {
      childrenDictionary_Child.DateKey = csvReader.ReadDate();
      childrenDictionary_Child.Text = csvReader.ReadString();
      if (!context.ChildrenDictionary_Parents.TryGetValue(csvReader.ReadInt(), out var parentWithDictionary)) {
        parentWithDictionary = ChildrenDictionary_Parent.NoChildrenDictionary_Parent;
      }
      if (childrenDictionary_Child.ParentWithDictionary!=parentWithDictionary) {
        if (childrenDictionary_Child.ParentWithDictionary!=ChildrenDictionary_Parent.NoChildrenDictionary_Parent) {
          childrenDictionary_Child.ParentWithDictionary.RemoveFromChildrenDictionary_Children(childrenDictionary_Child);
        }
        childrenDictionary_Child.ParentWithDictionary = parentWithDictionary;
        childrenDictionary_Child.ParentWithDictionary.AddToChildrenDictionary_Children(childrenDictionary_Child);
      }
      var parentWithDictionaryNullableKey = csvReader.ReadIntNull();
      ChildrenDictionary_ParentNullable? parentWithDictionaryNullable;
      if (parentWithDictionaryNullableKey is null) {
        parentWithDictionaryNullable = null;
      } else {
        if (!context.ChildrenDictionary_ParentNullables.TryGetValue(parentWithDictionaryNullableKey.Value, out parentWithDictionaryNullable)) {
          parentWithDictionaryNullable = ChildrenDictionary_ParentNullable.NoChildrenDictionary_ParentNullable;
        }
      }
      if (childrenDictionary_Child.ParentWithDictionaryNullable is null) {
        if (parentWithDictionaryNullable is null) {
          //nothing to do
        } else {
          childrenDictionary_Child.ParentWithDictionaryNullable = parentWithDictionaryNullable;
          childrenDictionary_Child.ParentWithDictionaryNullable.AddToChildrenDictionary_Children(childrenDictionary_Child);
        }
      } else {
        if (parentWithDictionaryNullable is null) {
          if (childrenDictionary_Child.ParentWithDictionaryNullable!=ChildrenDictionary_ParentNullable.NoChildrenDictionary_ParentNullable) {
            childrenDictionary_Child.ParentWithDictionaryNullable.RemoveFromChildrenDictionary_Children(childrenDictionary_Child);
          }
          childrenDictionary_Child.ParentWithDictionaryNullable = null;
        } else {
          if (childrenDictionary_Child.ParentWithDictionaryNullable!=ChildrenDictionary_ParentNullable.NoChildrenDictionary_ParentNullable) {
            childrenDictionary_Child.ParentWithDictionaryNullable.RemoveFromChildrenDictionary_Children(childrenDictionary_Child);
          }
          childrenDictionary_Child.ParentWithDictionaryNullable = parentWithDictionaryNullable;
          childrenDictionary_Child.ParentWithDictionaryNullable.AddToChildrenDictionary_Children(childrenDictionary_Child);
        }
      }
      childrenDictionary_Child.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes ChildrenDictionary_Child from DC.Data.ChildrenDictionary_Children, 
    /// disconnects ChildrenDictionary_Child from ChildrenDictionary_Parent because of ParentWithDictionary and 
    /// disconnects ChildrenDictionary_Child from ChildrenDictionary_ParentNullable because of ParentWithDictionaryNullable.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"ChildrenDictionary_Child.Remove(): ChildrenDictionary_Child 'Class ChildrenDictionary_Child' is not stored in DC.Data, key is {Key}.");
      }
      onRemove();
      DC.Data.ChildrenDictionary_Children.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Disconnects ChildrenDictionary_Child from ChildrenDictionary_Parent because of ParentWithDictionary and 
    /// disconnects ChildrenDictionary_Child from ChildrenDictionary_ParentNullable because of ParentWithDictionaryNullable.
    /// </summary>
    internal static void Disconnect(ChildrenDictionary_Child childrenDictionary_Child) {
      if (childrenDictionary_Child.ParentWithDictionary!=ChildrenDictionary_Parent.NoChildrenDictionary_Parent) {
        childrenDictionary_Child.ParentWithDictionary.RemoveFromChildrenDictionary_Children(childrenDictionary_Child);
      }
      if (childrenDictionary_Child.ParentWithDictionaryNullable!=null && childrenDictionary_Child.ParentWithDictionaryNullable!=ChildrenDictionary_ParentNullable.NoChildrenDictionary_ParentNullable) {
        childrenDictionary_Child.ParentWithDictionaryNullable.RemoveFromChildrenDictionary_Children(childrenDictionary_Child);
      }
    }


    /// <summary>
    /// Removes childrenDictionary_ParentNullable from ParentWithDictionaryNullable
    /// </summary>
    internal void RemoveParentWithDictionaryNullable(ChildrenDictionary_ParentNullable childrenDictionary_ParentNullable) {
      if (childrenDictionary_ParentNullable!=ParentWithDictionaryNullable) throw new Exception();
      ParentWithDictionaryNullable = null;
      HasChanged?.Invoke(this);
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {DateKey.ToShortDateString()}," +
        $" {Text}," +
        $" {ParentWithDictionary.ToShortString()}," +
        $" {ParentWithDictionaryNullable?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" DateKey: {DateKey.ToShortDateString()}," +
        $" Text: {Text}," +
        $" ParentWithDictionary: {ParentWithDictionary.ToShortString()}," +
        $" ParentWithDictionaryNullable: {ParentWithDictionaryNullable?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
