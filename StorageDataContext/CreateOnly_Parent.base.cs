//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into CreateOnly_Parent.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageDataContext  {


    /// <summary>
    /// Example of a "CreateOnly" Parent, i.e. the parent's properties will not change and the parent will never get
    /// deleted, but it is still possible to add children, but not to remove them.
    /// </summary>
  public partial class CreateOnly_Parent: IStorageItemGeneric<CreateOnly_Parent> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for CreateOnly_Parent. Gets set once CreateOnly_Parent gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem createOnly_Parent, int key, bool isRollback) {
#if DEBUG
      if (isRollback) {
        if (key==StorageExtensions.NoKey) {
          DC.Trace?.Invoke($"Release CreateOnly_Parent key @{createOnly_Parent.Key} #{createOnly_Parent.GetHashCode()}");
        } else {
          DC.Trace?.Invoke($"Store CreateOnly_Parent key @{key} #{createOnly_Parent.GetHashCode()}");
        }
      }
#endif
      ((CreateOnly_Parent)createOnly_Parent).Key = key;
    }


    /// <summary>
    /// Text will be readonly even it is not marked as such, because class is not updatable
    /// </summary>
    public string Text { get; }


    /// <summary>
    /// List of children
    /// </summary>
    public IReadOnlyList<CreateOnly_Child> CreateOnly_Children => createOnly_Children;
    readonly List<CreateOnly_Child> createOnly_Children;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Text"};


    /// <summary>
    /// None existing CreateOnly_Parent
    /// </summary>
    internal static CreateOnly_Parent NoCreateOnly_Parent = new CreateOnly_Parent("NoText", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// This event will never be raised, but is needed to comply with IStorage.
    /// </summary>
#pragma warning disable 67
    public event Action</*old*/CreateOnly_Parent, /*new*/CreateOnly_Parent>? HasChanged;
#pragma warning restore 67
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// CreateOnly_Parent Constructor. If isStoring is true, adds CreateOnly_Parent to DC.Data.CreateOnly_Parents.
    /// </summary>
    public CreateOnly_Parent(string text, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      createOnly_Children = new List<CreateOnly_Child>();
#if DEBUG
      DC.Trace?.Invoke($"new CreateOnly_Parent: {ToTraceString()}");
#endif
      onConstruct();
      if (DC.Data?.IsTransaction??false) {
        DC.Data.AddTransaction(new TransactionItem(28,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public CreateOnly_Parent(CreateOnly_Parent original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Text = original.Text;
      onCloned(this);
    }
    partial void onCloned(CreateOnly_Parent clone);


    /// <summary>
    /// Constructor for CreateOnly_Parent read from CSV file
    /// </summary>
    private CreateOnly_Parent(int key, CsvReader csvReader){
      Key = key;
      Text = csvReader.ReadString();
      createOnly_Children = new List<CreateOnly_Child>();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New CreateOnly_Parent read from CSV file
    /// </summary>
    internal static CreateOnly_Parent Create(int key, CsvReader csvReader) {
      return new CreateOnly_Parent(key, csvReader);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds CreateOnly_Parent to DC.Data.CreateOnly_Parents.<br/>
    /// Throws an Exception when CreateOnly_Parent is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"CreateOnly_Parent cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data.CreateOnly_Parents.Add(this);
      onStored();
#if DEBUG
      DC.Trace?.Invoke($"Stored CreateOnly_Parent #{GetHashCode()} @{Key}");
#endif
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write CreateOnly_Parent to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write CreateOnly_Parent to CSV file
    /// </summary>
    internal static void Write(CreateOnly_Parent createOnly_Parent, CsvWriter csvWriter) {
      createOnly_Parent.onCsvWrite();
      csvWriter.Write(createOnly_Parent.Text);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Add createOnly_Child to CreateOnly_Children.
    /// </summary>
    internal void AddToCreateOnly_Children(CreateOnly_Child createOnly_Child) {
#if DEBUG
      if (createOnly_Child==CreateOnly_Child.NoCreateOnly_Child) throw new Exception();
      if ((createOnly_Child.Key>=0)&&(Key<0)) throw new Exception();
      if (createOnly_Children.Contains(createOnly_Child)) throw new Exception();
#endif
      createOnly_Children.Add(createOnly_Child);
      onAddedToCreateOnly_Children(createOnly_Child);
#if DEBUG
      DC.Trace?.Invoke($"Add CreateOnly_Child {createOnly_Child.GetKeyOrHash()} to " +
        $"{this.GetKeyOrHash()} CreateOnly_Parent.CreateOnly_Children");
#endif
    }
    partial void onAddedToCreateOnly_Children(CreateOnly_Child createOnly_Child);


    /// <summary>
    /// Removes createOnly_Child from CreateOnly_Parent.
    /// </summary>
    internal void RemoveFromCreateOnly_Children(CreateOnly_Child createOnly_Child) {
#if DEBUG
      if (!createOnly_Children.Remove(createOnly_Child)) throw new Exception();
#else
        createOnly_Children.Remove(createOnly_Child);
#endif
      onRemovedFromCreateOnly_Children(createOnly_Child);
#if DEBUG
      DC.Trace?.Invoke($"Remove CreateOnly_Child {createOnly_Child.GetKeyOrHash()} from " +
        $"{this.GetKeyOrHash()} CreateOnly_Parent.CreateOnly_Children");
#endif
    }
    partial void onRemovedFromCreateOnly_Children(CreateOnly_Child createOnly_Child);


    /// <summary>
    /// Releasing CreateOnly_Parent from DC.Data.CreateOnly_Parents is not supported.
    /// </summary>
    public void Release() {
      throw new NotSupportedException("StorageClass attribute AreInstancesDeletable is false.");
    }


    /// <summary>
    /// Undoes the new() statement as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var createOnly_Parent = (CreateOnly_Parent) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback new CreateOnly_Parent(): {createOnly_Parent.ToTraceString()}");
#endif
      createOnly_Parent.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases CreateOnly_Parent from DC.Data.CreateOnly_Parents as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var createOnly_Parent = (CreateOnly_Parent) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback CreateOnly_Parent.Store(): {createOnly_Parent.ToTraceString()}");
#endif
      createOnly_Parent.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the CreateOnly_Parent item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (CreateOnly_Parent) oldStorageItem;
      var newItem = (CreateOnly_Parent) newStorageItem;
#if DEBUG
      DC.Trace?.Invoke($"Rolling back CreateOnly_Parent.Update(): {newItem.ToTraceString()}");
#endif
      if (newItem.Text!=oldItem.Text) {
        throw new Exception($"CreateOnly_Parent.Update(): Property Text '{newItem.Text}' is " +
          $"readonly, Text '{oldItem.Text}' read from the CSV file should be the same." + Environment.NewLine + 
          newItem.ToString());
      }
      newItem.onRollbackItemUpdated(oldItem);
#if DEBUG
      DC.Trace?.Invoke($"Rolled back CreateOnly_Parent.Update(): {newItem.ToTraceString()}");
#endif
    }
    partial void onRollbackItemUpdated(CreateOnly_Parent oldCreateOnly_Parent);


    /// <summary>
    /// Adds CreateOnly_Parent to DC.Data.CreateOnly_Parents as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var createOnly_Parent = (CreateOnly_Parent) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback CreateOnly_Parent.Release(): {createOnly_Parent.ToTraceString()}");
#endif
      createOnly_Parent.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Text}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Text: {Text}," +
        $" CreateOnly_Children: {CreateOnly_Children.Count};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
