//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into MultipleChildrenSortedList_Parent.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// Example of a parent child relationship using a SortedList.
    /// </summary>
  public partial class MultipleChildrenSortedList_Parent: IStorage<MultipleChildrenSortedList_Parent> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for MultipleChildrenSortedList_Parent. Gets set once MultipleChildrenSortedList_Parent gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(MultipleChildrenSortedList_Parent multipleChildrenSortedList_Parent, int key) { multipleChildrenSortedList_Parent.Key = key; }


    /// <summary>
    /// This text is readonly. Readonly only matters when [StorageClass(areInstancesUpdatable: true)]
    /// </summary>
    public string TextReadOnly { get; }


    /// <summary>
    /// This text can be updated
    /// </summary>
    public string TextUpdateable { get; private set; }


    /// <summary>
    /// SortedList used instead of List. Comment is required and indicates which property of the SortedListChild to 
    /// use as key
    /// </summary>
    public IReadOnlyDictionary<DateTime, MultipleChildrenSortedList_Child> MultipleChildrenSortedList_Children => multipleChildrenSortedList_Children;
    readonly SortedList<DateTime, MultipleChildrenSortedList_Child> multipleChildrenSortedList_Children;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "TextReadOnly", "TextUpdateable"};


    /// <summary>
    /// None existing MultipleChildrenSortedList_Parent
    /// </summary>
    internal static MultipleChildrenSortedList_Parent NoMultipleChildrenSortedList_Parent = new MultipleChildrenSortedList_Parent("NoTextReadOnly", "NoTextUpdateable", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of MultipleChildrenSortedList_Parent has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action<MultipleChildrenSortedList_Parent>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// MultipleChildrenSortedList_Parent Constructor. If isStoring is true, adds MultipleChildrenSortedList_Parent to DC.Data.MultipleChildrenSortedList_Parents.
    /// </summary>
    public MultipleChildrenSortedList_Parent(string textReadOnly, string textUpdateable, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      TextReadOnly = textReadOnly;
      TextUpdateable = textUpdateable;
      multipleChildrenSortedList_Children = new SortedList<DateTime, MultipleChildrenSortedList_Child>();
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for MultipleChildrenSortedList_Parent read from CSV file
    /// </summary>
    private MultipleChildrenSortedList_Parent(int key, CsvReader csvReader, DC context) {
      Key = key;
      TextReadOnly = csvReader.ReadString();
      TextUpdateable = csvReader.ReadString();
      multipleChildrenSortedList_Children = new SortedList<DateTime, MultipleChildrenSortedList_Child>();
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DC context);


    /// <summary>
    /// New MultipleChildrenSortedList_Parent read from CSV file
    /// </summary>
    internal static MultipleChildrenSortedList_Parent Create(int key, CsvReader csvReader, DC context) {
      return new MultipleChildrenSortedList_Parent(key, csvReader, context);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds MultipleChildrenSortedList_Parent to DC.Data.MultipleChildrenSortedList_Parents. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"MultipleChildrenSortedList_Parent cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      onStore();
      DC.Data.MultipleChildrenSortedList_Parents.Add(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write MultipleChildrenSortedList_Parent to CSV file
    /// </summary>
    public const int MaxLineLength = 300;


    /// <summary>
    /// Write MultipleChildrenSortedList_Parent to CSV file
    /// </summary>
    internal static void Write(MultipleChildrenSortedList_Parent multipleChildrenSortedList_Parent, CsvWriter csvWriter) {
      multipleChildrenSortedList_Parent.onCsvWrite();
      csvWriter.Write(multipleChildrenSortedList_Parent.TextReadOnly);
      csvWriter.Write(multipleChildrenSortedList_Parent.TextUpdateable);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates MultipleChildrenSortedList_Parent with the provided values
    /// </summary>
    public void Update(string textUpdateable) {
      var isCancelled = false;
      onUpdating(textUpdateable, ref isCancelled);
      if (isCancelled) return;

      var isChangeDetected = false;
      if (TextUpdateable!=textUpdateable) {
        TextUpdateable = textUpdateable;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdating(string textUpdateable, ref bool isCancelled);
    partial void onUpdated();


    /// <summary>
    /// Updates this MultipleChildrenSortedList_Parent with values from CSV file
    /// </summary>
    internal static void Update(MultipleChildrenSortedList_Parent multipleChildrenSortedList_Parent, CsvReader csvReader, DC _) {
      var value = csvReader.ReadString();
      if (multipleChildrenSortedList_Parent.TextReadOnly!=value) {
        throw new Exception($"MultipleChildrenSortedList_Parent.Update(): Property TextReadOnly '{multipleChildrenSortedList_Parent.TextReadOnly}' is " +
          $"readonly, the value '{value}' read from the CSV file should be the same." + Environment.NewLine + 
          multipleChildrenSortedList_Parent.ToString());
      }
      multipleChildrenSortedList_Parent.TextUpdateable = csvReader.ReadString();
      multipleChildrenSortedList_Parent.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Add multipleChildrenSortedList_Child to MultipleChildrenSortedList_Children.
    /// </summary>
    internal void AddToMultipleChildrenSortedList_Children(MultipleChildrenSortedList_Child multipleChildrenSortedList_Child) {
      multipleChildrenSortedList_Children.Add(multipleChildrenSortedList_Child.DateKey, multipleChildrenSortedList_Child);
      onAddedToMultipleChildrenSortedList_Children(multipleChildrenSortedList_Child);
    }
    partial void onAddedToMultipleChildrenSortedList_Children(MultipleChildrenSortedList_Child multipleChildrenSortedList_Child);


    /// <summary>
    /// Removes multipleChildrenSortedList_Child from MultipleChildrenSortedList_Parent.
    /// </summary>
    internal void RemoveFromMultipleChildrenSortedList_Children(MultipleChildrenSortedList_Child multipleChildrenSortedList_Child) {
#if DEBUG
      if (!multipleChildrenSortedList_Children.Remove(multipleChildrenSortedList_Child.DateKey)) throw new Exception();
#else
        multipleChildrenSortedList_Children.Remove(multipleChildrenSortedList_Child.DateKey);
#endif
      onRemovedFromMultipleChildrenSortedList_Children(multipleChildrenSortedList_Child);
    }
    partial void onRemovedFromMultipleChildrenSortedList_Children(MultipleChildrenSortedList_Child multipleChildrenSortedList_Child);


    /// <summary>
    /// Removes MultipleChildrenSortedList_Parent from DC.Data.MultipleChildrenSortedList_Parents and 
    /// deletes any MultipleChildrenSortedList_Child where MultipleChildrenSortedList_Child.ParentWithSortedList links to this MultipleChildrenSortedList_Parent.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"MultipleChildrenSortedList_Parent.Remove(): MultipleChildrenSortedList_Parent 'Class MultipleChildrenSortedList_Parent' is not stored in DC.Data, key is {Key}.");
      }
      onRemove();
      DC.Data.MultipleChildrenSortedList_Parents.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Deletes any MultipleChildrenSortedList_Child where MultipleChildrenSortedList_Child.ParentWithSortedList links to this MultipleChildrenSortedList_Parent.
    /// </summary>
    internal static void Disconnect(MultipleChildrenSortedList_Parent multipleChildrenSortedList_Parent) {
      var multipleChildrenSortedList_Children = new MultipleChildrenSortedList_Child[multipleChildrenSortedList_Parent.MultipleChildrenSortedList_Children.Count];
      multipleChildrenSortedList_Parent.multipleChildrenSortedList_Children.Values.CopyTo(multipleChildrenSortedList_Children, 0);
      foreach (var multipleChildrenSortedList_Child in multipleChildrenSortedList_Children) {
         if (multipleChildrenSortedList_Child.Key>=0) {
           multipleChildrenSortedList_Child.Remove();
         }
      }
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {TextReadOnly}," +
        $" {TextUpdateable}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" TextReadOnly: {TextReadOnly}," +
        $" TextUpdateable: {TextUpdateable}," +
        $" MultipleChildrenSortedList_Children: {MultipleChildrenSortedList_Children.Count};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
