//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ChildrenList_CreateOnlyParent.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Threading;
using Storage;


namespace StorageDataContext  {


    /// <summary>
    /// Example of none deletable parent using a List for its children. It can have deletable and none
    /// deletable children. The child must have a parent (the Parent property is not nullable).
    /// </summary>
  public partial class ChildrenList_CreateOnlyParent: IStorageItemGeneric<ChildrenList_CreateOnlyParent> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ChildrenList_CreateOnlyParent. Gets set once ChildrenList_CreateOnlyParent gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem childrenList_CreateOnlyParent, int key, bool isRollback) {
#if DEBUG
      if (isRollback) {
        if (key==StorageExtensions.NoKey) {
          DC.Trace?.Invoke($"Release ChildrenList_CreateOnlyParent key @{childrenList_CreateOnlyParent.Key} #{childrenList_CreateOnlyParent.GetHashCode()}");
        } else {
          DC.Trace?.Invoke($"Store ChildrenList_CreateOnlyParent key @{key} #{childrenList_CreateOnlyParent.GetHashCode()}");
        }
      }
#endif
      ((ChildrenList_CreateOnlyParent)childrenList_CreateOnlyParent).Key = key;
    }


    /// <summary>
    /// Some Text
    /// </summary>
    public string Text { get; }


    /// <summary>
    /// These deletable children must have a parent
    /// </summary>
    public IReadOnlyList<ChildrenList_Child> ChildrenList_Children => childrenList_Children;
    readonly List<ChildrenList_Child> childrenList_Children;


    /// <summary>
    /// These none deletable children must have a none deletable parent
    /// </summary>
    public IReadOnlyList<ChildrenList_CreateOnlyChild> ChildrenList_CreateOnlyChildren => childrenList_CreateOnlyChildren;
    readonly List<ChildrenList_CreateOnlyChild> childrenList_CreateOnlyChildren;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Text"};


    /// <summary>
    /// None existing ChildrenList_CreateOnlyParent
    /// </summary>
    internal static ChildrenList_CreateOnlyParent NoChildrenList_CreateOnlyParent = new ChildrenList_CreateOnlyParent("NoText", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// This event will never be raised, but is needed to comply with IStorage.
    /// </summary>
#pragma warning disable 67
    public event Action</*old*/ChildrenList_CreateOnlyParent, /*new*/ChildrenList_CreateOnlyParent>? HasChanged;
#pragma warning restore 67
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ChildrenList_CreateOnlyParent Constructor. If isStoring is true, adds ChildrenList_CreateOnlyParent to DC.Data.ChildrenList_CreateOnlyParents.
    /// </summary>
    public ChildrenList_CreateOnlyParent(string text, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      childrenList_Children = new List<ChildrenList_Child>();
      childrenList_CreateOnlyChildren = new List<ChildrenList_CreateOnlyChild>();
#if DEBUG
      DC.Trace?.Invoke($"new ChildrenList_CreateOnlyParent: {ToTraceString()}");
#endif
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(13,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public ChildrenList_CreateOnlyParent(ChildrenList_CreateOnlyParent original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Text = original.Text;
      onCloned(this);
    }
    partial void onCloned(ChildrenList_CreateOnlyParent clone);


    /// <summary>
    /// Constructor for ChildrenList_CreateOnlyParent read from CSV file
    /// </summary>
    private ChildrenList_CreateOnlyParent(int key, CsvReader csvReader){
      Key = key;
      Text = csvReader.ReadString();
      childrenList_Children = new List<ChildrenList_Child>();
      childrenList_CreateOnlyChildren = new List<ChildrenList_CreateOnlyChild>();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New ChildrenList_CreateOnlyParent read from CSV file
    /// </summary>
    internal static ChildrenList_CreateOnlyParent Create(int key, CsvReader csvReader) {
      return new ChildrenList_CreateOnlyParent(key, csvReader);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ChildrenList_CreateOnlyParent to DC.Data.ChildrenList_CreateOnlyParents.<br/>
    /// Throws an Exception when ChildrenList_CreateOnlyParent is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ChildrenList_CreateOnlyParent cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data.ChildrenList_CreateOnlyParents.Add(this);
      onStored();
#if DEBUG
      DC.Trace?.Invoke($"Stored ChildrenList_CreateOnlyParent #{GetHashCode()} @{Key}");
#endif
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write ChildrenList_CreateOnlyParent to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write ChildrenList_CreateOnlyParent to CSV file
    /// </summary>
    internal static void Write(ChildrenList_CreateOnlyParent childrenList_CreateOnlyParent, CsvWriter csvWriter) {
      childrenList_CreateOnlyParent.onCsvWrite();
      csvWriter.Write(childrenList_CreateOnlyParent.Text);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Add childrenList_Child to ChildrenList_Children.
    /// </summary>
    internal void AddToChildrenList_Children(ChildrenList_Child childrenList_Child) {
#if DEBUG
      if (childrenList_Child==ChildrenList_Child.NoChildrenList_Child) throw new Exception();
      if ((childrenList_Child.Key>=0)&&(Key<0)) throw new Exception();
      if (childrenList_Children.Contains(childrenList_Child)) throw new Exception();
#endif
      childrenList_Children.Add(childrenList_Child);
      onAddedToChildrenList_Children(childrenList_Child);
#if DEBUG
      DC.Trace?.Invoke($"Add ChildrenList_Child {childrenList_Child.GetKeyOrHash()} to " +
        $"{this.GetKeyOrHash()} ChildrenList_CreateOnlyParent.ChildrenList_Children");
#endif
    }
    partial void onAddedToChildrenList_Children(ChildrenList_Child childrenList_Child);


    /// <summary>
    /// Removes childrenList_Child from ChildrenList_CreateOnlyParent.
    /// </summary>
    internal void RemoveFromChildrenList_Children(ChildrenList_Child childrenList_Child) {
#if DEBUG
      if (!childrenList_Children.Remove(childrenList_Child)) throw new Exception();
#else
        childrenList_Children.Remove(childrenList_Child);
#endif
      onRemovedFromChildrenList_Children(childrenList_Child);
#if DEBUG
      DC.Trace?.Invoke($"Remove ChildrenList_Child {childrenList_Child.GetKeyOrHash()} from " +
        $"{this.GetKeyOrHash()} ChildrenList_CreateOnlyParent.ChildrenList_Children");
#endif
    }
    partial void onRemovedFromChildrenList_Children(ChildrenList_Child childrenList_Child);


    /// <summary>
    /// Add childrenList_CreateOnlyChild to ChildrenList_CreateOnlyChildren.
    /// </summary>
    internal void AddToChildrenList_CreateOnlyChildren(ChildrenList_CreateOnlyChild childrenList_CreateOnlyChild) {
#if DEBUG
      if (childrenList_CreateOnlyChild==ChildrenList_CreateOnlyChild.NoChildrenList_CreateOnlyChild) throw new Exception();
      if ((childrenList_CreateOnlyChild.Key>=0)&&(Key<0)) throw new Exception();
      if (childrenList_CreateOnlyChildren.Contains(childrenList_CreateOnlyChild)) throw new Exception();
#endif
      childrenList_CreateOnlyChildren.Add(childrenList_CreateOnlyChild);
      onAddedToChildrenList_CreateOnlyChildren(childrenList_CreateOnlyChild);
#if DEBUG
      DC.Trace?.Invoke($"Add ChildrenList_CreateOnlyChild {childrenList_CreateOnlyChild.GetKeyOrHash()} to " +
        $"{this.GetKeyOrHash()} ChildrenList_CreateOnlyParent.ChildrenList_CreateOnlyChildren");
#endif
    }
    partial void onAddedToChildrenList_CreateOnlyChildren(ChildrenList_CreateOnlyChild childrenList_CreateOnlyChild);


    /// <summary>
    /// Removes childrenList_CreateOnlyChild from ChildrenList_CreateOnlyParent.
    /// </summary>
    internal void RemoveFromChildrenList_CreateOnlyChildren(ChildrenList_CreateOnlyChild childrenList_CreateOnlyChild) {
#if DEBUG
      if (!childrenList_CreateOnlyChildren.Remove(childrenList_CreateOnlyChild)) throw new Exception();
#else
        childrenList_CreateOnlyChildren.Remove(childrenList_CreateOnlyChild);
#endif
      onRemovedFromChildrenList_CreateOnlyChildren(childrenList_CreateOnlyChild);
#if DEBUG
      DC.Trace?.Invoke($"Remove ChildrenList_CreateOnlyChild {childrenList_CreateOnlyChild.GetKeyOrHash()} from " +
        $"{this.GetKeyOrHash()} ChildrenList_CreateOnlyParent.ChildrenList_CreateOnlyChildren");
#endif
    }
    partial void onRemovedFromChildrenList_CreateOnlyChildren(ChildrenList_CreateOnlyChild childrenList_CreateOnlyChild);


    /// <summary>
    /// Releasing ChildrenList_CreateOnlyParent from DC.Data.ChildrenList_CreateOnlyParents is not supported.
    /// </summary>
    public void Release() {
      throw new NotSupportedException("StorageClass attribute AreInstancesDeletable is false.");
    }


    /// <summary>
    /// Undoes the new() statement as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var childrenList_CreateOnlyParent = (ChildrenList_CreateOnlyParent) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback new ChildrenList_CreateOnlyParent(): {childrenList_CreateOnlyParent.ToTraceString()}");
#endif
      childrenList_CreateOnlyParent.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases ChildrenList_CreateOnlyParent from DC.Data.ChildrenList_CreateOnlyParents as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var childrenList_CreateOnlyParent = (ChildrenList_CreateOnlyParent) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback ChildrenList_CreateOnlyParent.Store(): {childrenList_CreateOnlyParent.ToTraceString()}");
#endif
      childrenList_CreateOnlyParent.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the ChildrenList_CreateOnlyParent item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (ChildrenList_CreateOnlyParent) oldStorageItem;
      var newItem = (ChildrenList_CreateOnlyParent) newStorageItem;
#if DEBUG
      DC.Trace?.Invoke($"Rolling back ChildrenList_CreateOnlyParent.Update(): {newItem.ToTraceString()}");
#endif
      if (newItem.Text!=oldItem.Text) {
        throw new Exception($"ChildrenList_CreateOnlyParent.Update(): Property Text '{newItem.Text}' is " +
          $"readonly, Text '{oldItem.Text}' read from the CSV file should be the same." + Environment.NewLine + 
          newItem.ToString());
      }
      newItem.onRollbackItemUpdated(oldItem);
#if DEBUG
      DC.Trace?.Invoke($"Rolled back ChildrenList_CreateOnlyParent.Update(): {newItem.ToTraceString()}");
#endif
    }
    partial void onRollbackItemUpdated(ChildrenList_CreateOnlyParent oldChildrenList_CreateOnlyParent);


    /// <summary>
    /// Adds ChildrenList_CreateOnlyParent to DC.Data.ChildrenList_CreateOnlyParents as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var childrenList_CreateOnlyParent = (ChildrenList_CreateOnlyParent) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback ChildrenList_CreateOnlyParent.Release(): {childrenList_CreateOnlyParent.ToTraceString()}");
#endif
      childrenList_CreateOnlyParent.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Text}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Text: {Text}," +
        $" ChildrenList_Children: {ChildrenList_Children.Count}," +
        $" ChildrenList_CreateOnlyChildren: {ChildrenList_CreateOnlyChildren.Count};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }


  #region ChildrenList_CreateOnlyParentRaw
  //      --------------------------------

  /// <summary>
  /// ChildrenList_CreateOnlyParentRaw is used instead ChildrenList_CreateOnlyParent and DC.Data to read an instance from a CSV file with 
  /// ChildrenList_CreateOnlyParentReader or write with ChildrenList_CreateOnlyParentWriter.
  /// </summary>
  public class ChildrenList_CreateOnlyParentRaw {

    /// <summary>
    /// Unique identifier for ChildrenList_CreateOnlyParentRaw.
    /// </summary>
    public int Key { get; set; }


    /// <summary>
    /// Some Text
    /// </summary>
    public string Text { get; set; } ="";


    /// <summary>
    /// Default Constructor.
    /// </summary>
    public ChildrenList_CreateOnlyParentRaw() {
    }


    /// <summary>
    /// Constructor, will replace links to parents with the parents' key.
    /// </summary>
    public ChildrenList_CreateOnlyParentRaw(ChildrenList_CreateOnlyParent childrenList_CreateOnlyParent) {
      Key = childrenList_CreateOnlyParent.Key;
      Text = childrenList_CreateOnlyParent.Text;
    }


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text};";
      return returnString;
    }
  }
  #endregion


  #region ChildrenList_CreateOnlyParentReader
  //      -----------------------------------

  /// <summary>
  /// Reads from a CSV file containing ChildrenList_CreateOnlyParent instances. Note that the keys of linked objects will be returned 
  /// and not the linked objects themselves, since the data context will not be involved.
  /// </summary>
  public class ChildrenList_CreateOnlyParentReader: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvReader csvReader;
    int nextKey = 0;


    /// <summary>
    /// Constructor, will read and verify the ChildrenList_CreateOnlyParent header line. You need to dispose ChildrenList_CreateOnlyParentReader once
    /// you are done, except when you have read the whole file, then ChildrenList_CreateOnlyParentReader.ReadLine() disposes automatically.
    /// </summary>
    public ChildrenList_CreateOnlyParentReader(string fileNamePath, CsvConfig csvConfig) {
      this.csvConfig = csvConfig;
      csvReader = new CsvReader(fileNamePath, csvConfig, ChildrenList_CreateOnlyParent.EstimatedLineLength);
      var csvHeaderString = Csv.ToCsvHeaderString(ChildrenList_CreateOnlyParent.Headers, csvConfig.Delimiter);
      var headerLine = csvReader.ReadLine();
      if (csvHeaderString!=headerLine) throw new Exception($"Error reading file {csvReader.FileName}{Environment.NewLine}'" +
        headerLine + "' should be '" + csvHeaderString + "'.");
    }


    /// <summary>
    /// Reads the details of one ChildrenList_CreateOnlyParent from the CSV file. Returns false when all lines are
    /// read and disposes the reader.
    /// </summary>
    public bool ReadLine([NotNullWhen(true)] out ChildrenList_CreateOnlyParentRaw? childrenList_CreateOnlyParentRaw){
      if (csvReader.IsEndOfFileReached()) {
        csvReader.Dispose();
        childrenList_CreateOnlyParentRaw = null;
        return false;
      }
      childrenList_CreateOnlyParentRaw = new ChildrenList_CreateOnlyParentRaw();
      childrenList_CreateOnlyParentRaw.Key = nextKey++;
      childrenList_CreateOnlyParentRaw.Text = csvReader.ReadString();
      csvReader.ReadEndOfLine();
      return true;
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of ChildrenList_CreateOnlyParentReader exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is ChildrenList_CreateOnlyParentReader already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvReader.Dispose();
    }
    #endregion
  }
  #endregion


  #region ChildrenList_CreateOnlyParentWriter
  //      -----------------------------------

  /// <summary>
  /// Writes a CSV file containing records which can be read back as ChildrenList_CreateOnlyParent. Note that the keys of linked objects
  /// need to be provided in Write(), since the data context will not be involved.
  /// </summary>
  public class ChildrenList_CreateOnlyParentWriter: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvWriter csvWriter;
    int nextKey = 0;


    /// <summary>
    /// Constructor, will write the ChildrenList_CreateOnlyParent header line into the CSV file. Dispose ChildrenList_CreateOnlyParentWriter once done.
    /// </summary>
    public ChildrenList_CreateOnlyParentWriter(string fileNamePath, CsvConfig csvConfig){
      this.csvConfig = csvConfig;
      csvWriter = new CsvWriter(fileNamePath, csvConfig, ChildrenList_CreateOnlyParent.EstimatedLineLength, null, 0);
      var csvHeaderString = Csv.ToCsvHeaderString(ChildrenList_CreateOnlyParent.Headers, csvConfig.Delimiter);
      csvWriter.WriteLine(csvHeaderString);
    }


    /// <summary>
    /// Writes the details of one ChildrenList_CreateOnlyParentRaw to the CSV file
    /// </summary>
    public void Write(ChildrenList_CreateOnlyParentRaw childrenList_CreateOnlyParentRaw){
      if (childrenList_CreateOnlyParentRaw.Key!=nextKey) {
        throw new Exception($"ChildrenList_CreateOnlyParentRaw's key {childrenList_CreateOnlyParentRaw.Key} should be {nextKey}.");
      }
      nextKey++;
      csvWriter.StartNewLine();
      csvWriter.Write(childrenList_CreateOnlyParentRaw.Text);
      csvWriter.WriteEndOfLine();
    }


    /// <summary>
    /// Writes the details of one ChildrenList_CreateOnlyParent to the CSV file
    /// </summary>
    public void Write(int key, string text) {
      if (key!=nextKey) {
        throw new Exception($"ChildrenList_CreateOnlyParent's key {key} should be {nextKey}.");
      }
      nextKey++;
      csvWriter.StartNewLine();
      csvWriter.Write(text);
      csvWriter.WriteEndOfLine();
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of ChildrenList_CreateOnlyParentWriter exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is ChildrenList_CreateOnlyParentWriter already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvWriter.Dispose();
    }
    #endregion
  }
  #endregion
}
