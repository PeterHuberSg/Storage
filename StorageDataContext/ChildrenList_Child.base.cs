//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ChildrenList_Child.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Threading;
using Storage;


namespace StorageDataContext  {


    /// <summary>
    /// This deletable child has links to 4 different types of parents
    /// </summary>
  public partial class ChildrenList_Child: IStorageItemGeneric<ChildrenList_Child> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ChildrenList_Child. Gets set once ChildrenList_Child gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem childrenList_Child, int key, bool isRollback) {
#if DEBUG
      if (isRollback) {
        if (key==StorageExtensions.NoKey) {
          DC.Trace?.Invoke($"Release ChildrenList_Child key @{childrenList_Child.Key} #{childrenList_Child.GetHashCode()}");
        } else {
          DC.Trace?.Invoke($"Store ChildrenList_Child key @{key} #{childrenList_Child.GetHashCode()}");
        }
      }
#endif
      ((ChildrenList_Child)childrenList_Child).Key = key;
    }


    /// <summary>
    /// Some info
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Deletable parent for deletable children which must have a parent
    /// </summary>
    public ChildrenList_Parent Parent { get; private set; }


    /// <summary>
    /// Deletable parent for deletable children which might or might not have a parent
    /// </summary>
    public ChildrenList_ParentNullable? ParentNullable { get; private set; }


    /// <summary>
    /// None deletable parent for deletable children which must have a parent
    /// </summary>
    public ChildrenList_CreateOnlyParent CreateOnlyParent { get; private set; }


    /// <summary>
    /// None deletable parent for deletable children which might or might not have a parent
    /// </summary>
    public ChildrenList_CreateOnlyParentNullable? CreateOnlyParentNullable { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {
      "Key", 
      "Text", 
      "Parent", 
      "ParentNullable", 
      "CreateOnlyParent", 
      "CreateOnlyParentNullable"
    };


    /// <summary>
    /// None existing ChildrenList_Child
    /// </summary>
    internal static ChildrenList_Child NoChildrenList_Child = new ChildrenList_Child("NoText", ChildrenList_Parent.NoChildrenList_Parent, null, ChildrenList_CreateOnlyParent.NoChildrenList_CreateOnlyParent, null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of ChildrenList_Child has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/ChildrenList_Child, /*new*/ChildrenList_Child>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ChildrenList_Child Constructor. If isStoring is true, adds ChildrenList_Child to DC.Data.ChildrenList_Children.
    /// </summary>
    public ChildrenList_Child(
      string text, 
      ChildrenList_Parent parent, 
      ChildrenList_ParentNullable? parentNullable, 
      ChildrenList_CreateOnlyParent createOnlyParent, 
      ChildrenList_CreateOnlyParentNullable? createOnlyParentNullable, 
      bool isStoring = true)
    {
      Key = StorageExtensions.NoKey;
      Text = text;
      Parent = parent;
      ParentNullable = parentNullable;
      CreateOnlyParent = createOnlyParent;
      CreateOnlyParentNullable = createOnlyParentNullable;
#if DEBUG
      DC.Trace?.Invoke($"new ChildrenList_Child: {ToTraceString()}");
#endif
      Parent.AddToChildrenList_Children(this);
      if (ParentNullable!=null) {
        ParentNullable.AddToChildrenList_Children(this);
      }
      CreateOnlyParent.AddToChildrenList_Children(this);
      if (CreateOnlyParentNullable!=null) {
        CreateOnlyParentNullable.AddToChildrenList_Children(this);
      }
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(15,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public ChildrenList_Child(ChildrenList_Child original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Text = original.Text;
      Parent = original.Parent;
      ParentNullable = original.ParentNullable;
      CreateOnlyParent = original.CreateOnlyParent;
      CreateOnlyParentNullable = original.CreateOnlyParentNullable;
      onCloned(this);
    }
    partial void onCloned(ChildrenList_Child clone);


    /// <summary>
    /// Constructor for ChildrenList_Child read from CSV file
    /// </summary>
    private ChildrenList_Child(int key, CsvReader csvReader){
      Key = key;
      Text = csvReader.ReadString();
      var childrenList_ParentKey = csvReader.ReadInt();
      if (DC.Data.ChildrenList_Parents.TryGetValue(childrenList_ParentKey, out var parent)) {
          Parent = parent;
      } else {
        throw new Exception($"Read ChildrenList_Child from CSV file: Cannot find Parent with key {childrenList_ParentKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      }
      var parentNullableKey = csvReader.ReadIntNull();
      if (parentNullableKey.HasValue) {
        if (DC.Data.ChildrenList_ParentNullables.TryGetValue(parentNullableKey.Value, out var parentNullable)) {
          ParentNullable = parentNullable;
        } else {
          ParentNullable = ChildrenList_ParentNullable.NoChildrenList_ParentNullable;
        }
      }
      var childrenList_CreateOnlyParentKey = csvReader.ReadInt();
      if (DC.Data.ChildrenList_CreateOnlyParents.TryGetValue(childrenList_CreateOnlyParentKey, out var createOnlyParent)) {
          CreateOnlyParent = createOnlyParent;
      } else {
        throw new Exception($"Read ChildrenList_Child from CSV file: Cannot find CreateOnlyParent with key {childrenList_CreateOnlyParentKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      }
      var createOnlyParentNullableKey = csvReader.ReadIntNull();
      if (createOnlyParentNullableKey.HasValue) {
        if (DC.Data.ChildrenList_CreateOnlyParentNullables.TryGetValue(createOnlyParentNullableKey.Value, out var createOnlyParentNullable)) {
          CreateOnlyParentNullable = createOnlyParentNullable;
        } else {
          CreateOnlyParentNullable = ChildrenList_CreateOnlyParentNullable.NoChildrenList_CreateOnlyParentNullable;
        }
      }
      if (Parent!=ChildrenList_Parent.NoChildrenList_Parent) {
        Parent.AddToChildrenList_Children(this);
      }
      if (parentNullableKey.HasValue && ParentNullable!=ChildrenList_ParentNullable.NoChildrenList_ParentNullable) {
        ParentNullable!.AddToChildrenList_Children(this);
      }
      if (CreateOnlyParent!=ChildrenList_CreateOnlyParent.NoChildrenList_CreateOnlyParent) {
        CreateOnlyParent.AddToChildrenList_Children(this);
      }
      if (createOnlyParentNullableKey.HasValue && CreateOnlyParentNullable!=ChildrenList_CreateOnlyParentNullable.NoChildrenList_CreateOnlyParentNullable) {
        CreateOnlyParentNullable!.AddToChildrenList_Children(this);
      }
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New ChildrenList_Child read from CSV file
    /// </summary>
    internal static ChildrenList_Child Create(int key, CsvReader csvReader) {
      return new ChildrenList_Child(key, csvReader);
    }


    /// <summary>
    /// Verify that childrenList_Child.Parent exists.
    /// Verify that childrenList_Child.ParentNullable exists.
    /// Verify that childrenList_Child.CreateOnlyParent exists.
    /// Verify that childrenList_Child.CreateOnlyParentNullable exists.
    /// </summary>
    internal static bool Verify(ChildrenList_Child childrenList_Child) {
      if (childrenList_Child.Parent==ChildrenList_Parent.NoChildrenList_Parent) return false;
      if (childrenList_Child.ParentNullable==ChildrenList_ParentNullable.NoChildrenList_ParentNullable) return false;
      if (childrenList_Child.CreateOnlyParent==ChildrenList_CreateOnlyParent.NoChildrenList_CreateOnlyParent) return false;
      if (childrenList_Child.CreateOnlyParentNullable==ChildrenList_CreateOnlyParentNullable.NoChildrenList_CreateOnlyParentNullable) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ChildrenList_Child to DC.Data.ChildrenList_Children.<br/>
    /// Throws an Exception when ChildrenList_Child is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ChildrenList_Child cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      if (Parent.Key<0) {
        throw new Exception($"Cannot store child ChildrenList_Child '{this}'.Parent to ChildrenList_Parent '{Parent}' because parent is not stored yet.");
      }
      if (ParentNullable?.Key<0) {
        throw new Exception($"Cannot store child ChildrenList_Child '{this}'.ParentNullable to ChildrenList_ParentNullable '{ParentNullable}' because parent is not stored yet.");
      }
      if (CreateOnlyParent.Key<0) {
        throw new Exception($"Cannot store child ChildrenList_Child '{this}'.CreateOnlyParent to ChildrenList_CreateOnlyParent '{CreateOnlyParent}' because parent is not stored yet.");
      }
      if (CreateOnlyParentNullable?.Key<0) {
        throw new Exception($"Cannot store child ChildrenList_Child '{this}'.CreateOnlyParentNullable to ChildrenList_CreateOnlyParentNullable '{CreateOnlyParentNullable}' because parent is not stored yet.");
      }
      DC.Data.ChildrenList_Children.Add(this);
      onStored();
#if DEBUG
      DC.Trace?.Invoke($"Stored ChildrenList_Child #{GetHashCode()} @{Key}");
#endif
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write ChildrenList_Child to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write ChildrenList_Child to CSV file
    /// </summary>
    internal static void Write(ChildrenList_Child childrenList_Child, CsvWriter csvWriter) {
      childrenList_Child.onCsvWrite();
      csvWriter.Write(childrenList_Child.Text);
      if (childrenList_Child.Parent.Key<0) throw new Exception($"Cannot write childrenList_Child '{childrenList_Child}' to CSV File, because Parent is not stored in DC.Data.ChildrenList_Parents.");

      csvWriter.Write(childrenList_Child.Parent.Key.ToString());
      if (childrenList_Child.ParentNullable is null) {
        csvWriter.WriteNull();
      } else {
        if (childrenList_Child.ParentNullable.Key<0) throw new Exception($"Cannot write childrenList_Child '{childrenList_Child}' to CSV File, because ParentNullable is not stored in DC.Data.ChildrenList_ParentNullables.");

        csvWriter.Write(childrenList_Child.ParentNullable.Key.ToString());
      }
      if (childrenList_Child.CreateOnlyParent.Key<0) throw new Exception($"Cannot write childrenList_Child '{childrenList_Child}' to CSV File, because CreateOnlyParent is not stored in DC.Data.ChildrenList_CreateOnlyParents.");

      csvWriter.Write(childrenList_Child.CreateOnlyParent.Key.ToString());
      if (childrenList_Child.CreateOnlyParentNullable is null) {
        csvWriter.WriteNull();
      } else {
        if (childrenList_Child.CreateOnlyParentNullable.Key<0) throw new Exception($"Cannot write childrenList_Child '{childrenList_Child}' to CSV File, because CreateOnlyParentNullable is not stored in DC.Data.ChildrenList_CreateOnlyParentNullables.");

        csvWriter.Write(childrenList_Child.CreateOnlyParentNullable.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates ChildrenList_Child with the provided values
    /// </summary>
    public void Update(
      string text, 
      ChildrenList_Parent parent, 
      ChildrenList_ParentNullable? parentNullable, 
      ChildrenList_CreateOnlyParent createOnlyParent, 
      ChildrenList_CreateOnlyParentNullable? createOnlyParentNullable)
    {
      if (Key>=0){
        if (parent.Key<0) {
          throw new Exception($"ChildrenList_Child.Update(): It is illegal to add stored ChildrenList_Child '{this}'" + Environment.NewLine + 
            $"to Parent '{parent}', which is not stored.");
        }
        if (parentNullable?.Key<0) {
          throw new Exception($"ChildrenList_Child.Update(): It is illegal to add stored ChildrenList_Child '{this}'" + Environment.NewLine + 
            $"to ParentNullable '{parentNullable}', which is not stored.");
        }
        if (createOnlyParent.Key<0) {
          throw new Exception($"ChildrenList_Child.Update(): It is illegal to add stored ChildrenList_Child '{this}'" + Environment.NewLine + 
            $"to CreateOnlyParent '{createOnlyParent}', which is not stored.");
        }
        if (createOnlyParentNullable?.Key<0) {
          throw new Exception($"ChildrenList_Child.Update(): It is illegal to add stored ChildrenList_Child '{this}'" + Environment.NewLine + 
            $"to CreateOnlyParentNullable '{createOnlyParentNullable}', which is not stored.");
        }
      }
      var clone = new ChildrenList_Child(this);
      var isCancelled = false;
      onUpdating(text, parent, parentNullable, createOnlyParent, createOnlyParentNullable, ref isCancelled);
      if (isCancelled) return;

#if DEBUG
      DC.Trace?.Invoke($"Updating ChildrenList_Child: {ToTraceString()}");
#endif
      var isChangeDetected = false;
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (Parent!=parent) {
        Parent.RemoveFromChildrenList_Children(this);
        Parent = parent;
        Parent.AddToChildrenList_Children(this);
        isChangeDetected = true;
      }
      if (ParentNullable is null) {
        if (parentNullable is null) {
          //nothing to do
        } else {
          ParentNullable = parentNullable;
          ParentNullable.AddToChildrenList_Children(this);
          isChangeDetected = true;
        }
      } else {
        if (parentNullable is null) {
          ParentNullable.RemoveFromChildrenList_Children(this);
          ParentNullable = null;
          isChangeDetected = true;
        } else {
          if (ParentNullable!=parentNullable) {
            ParentNullable.RemoveFromChildrenList_Children(this);
            ParentNullable = parentNullable;
            ParentNullable.AddToChildrenList_Children(this);
            isChangeDetected = true;
          }
        }
      }
      if (CreateOnlyParent!=createOnlyParent) {
        CreateOnlyParent.RemoveFromChildrenList_Children(this);
        CreateOnlyParent = createOnlyParent;
        CreateOnlyParent.AddToChildrenList_Children(this);
        isChangeDetected = true;
      }
      if (CreateOnlyParentNullable is null) {
        if (createOnlyParentNullable is null) {
          //nothing to do
        } else {
          CreateOnlyParentNullable = createOnlyParentNullable;
          CreateOnlyParentNullable.AddToChildrenList_Children(this);
          isChangeDetected = true;
        }
      } else {
        if (createOnlyParentNullable is null) {
          CreateOnlyParentNullable.RemoveFromChildrenList_Children(this);
          CreateOnlyParentNullable = null;
          isChangeDetected = true;
        } else {
          if (CreateOnlyParentNullable!=createOnlyParentNullable) {
            CreateOnlyParentNullable.RemoveFromChildrenList_Children(this);
            CreateOnlyParentNullable = createOnlyParentNullable;
            CreateOnlyParentNullable.AddToChildrenList_Children(this);
            isChangeDetected = true;
          }
        }
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data.ChildrenList_Children.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(15, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
#if DEBUG
      DC.Trace?.Invoke($"Updated ChildrenList_Child: {ToTraceString()}");
#endif
    }
    partial void onUpdating(
      string text, 
      ChildrenList_Parent parent, 
      ChildrenList_ParentNullable? parentNullable, 
      ChildrenList_CreateOnlyParent createOnlyParent, 
      ChildrenList_CreateOnlyParentNullable? createOnlyParentNullable, 
      ref bool isCancelled);
    partial void onUpdated(ChildrenList_Child old);


    /// <summary>
    /// Updates this ChildrenList_Child with values from CSV file
    /// </summary>
    internal static void Update(ChildrenList_Child childrenList_Child, CsvReader csvReader){
      childrenList_Child.Text = csvReader.ReadString();
      if (!DC.Data.ChildrenList_Parents.TryGetValue(csvReader.ReadInt(), out var parent)) {
        parent = ChildrenList_Parent.NoChildrenList_Parent;
      }
      if (childrenList_Child.Parent!=parent) {
        if (childrenList_Child.Parent!=ChildrenList_Parent.NoChildrenList_Parent) {
          childrenList_Child.Parent.RemoveFromChildrenList_Children(childrenList_Child);
        }
        childrenList_Child.Parent = parent;
        childrenList_Child.Parent.AddToChildrenList_Children(childrenList_Child);
      }
      var parentNullableKey = csvReader.ReadIntNull();
      ChildrenList_ParentNullable? parentNullable;
      if (parentNullableKey is null) {
        parentNullable = null;
      } else {
        if (!DC.Data.ChildrenList_ParentNullables.TryGetValue(parentNullableKey.Value, out parentNullable)) {
          parentNullable = ChildrenList_ParentNullable.NoChildrenList_ParentNullable;
        }
      }
      if (childrenList_Child.ParentNullable is null) {
        if (parentNullable is null) {
          //nothing to do
        } else {
          childrenList_Child.ParentNullable = parentNullable;
          childrenList_Child.ParentNullable.AddToChildrenList_Children(childrenList_Child);
        }
      } else {
        if (parentNullable is null) {
          if (childrenList_Child.ParentNullable!=ChildrenList_ParentNullable.NoChildrenList_ParentNullable) {
            childrenList_Child.ParentNullable.RemoveFromChildrenList_Children(childrenList_Child);
          }
          childrenList_Child.ParentNullable = null;
        } else {
          if (childrenList_Child.ParentNullable!=ChildrenList_ParentNullable.NoChildrenList_ParentNullable) {
            childrenList_Child.ParentNullable.RemoveFromChildrenList_Children(childrenList_Child);
          }
          childrenList_Child.ParentNullable = parentNullable;
          childrenList_Child.ParentNullable.AddToChildrenList_Children(childrenList_Child);
        }
      }
      if (!DC.Data.ChildrenList_CreateOnlyParents.TryGetValue(csvReader.ReadInt(), out var createOnlyParent)) {
        createOnlyParent = ChildrenList_CreateOnlyParent.NoChildrenList_CreateOnlyParent;
      }
      if (childrenList_Child.CreateOnlyParent!=createOnlyParent) {
        if (childrenList_Child.CreateOnlyParent!=ChildrenList_CreateOnlyParent.NoChildrenList_CreateOnlyParent) {
          childrenList_Child.CreateOnlyParent.RemoveFromChildrenList_Children(childrenList_Child);
        }
        childrenList_Child.CreateOnlyParent = createOnlyParent;
        childrenList_Child.CreateOnlyParent.AddToChildrenList_Children(childrenList_Child);
      }
      var createOnlyParentNullableKey = csvReader.ReadIntNull();
      ChildrenList_CreateOnlyParentNullable? createOnlyParentNullable;
      if (createOnlyParentNullableKey is null) {
        createOnlyParentNullable = null;
      } else {
        if (!DC.Data.ChildrenList_CreateOnlyParentNullables.TryGetValue(createOnlyParentNullableKey.Value, out createOnlyParentNullable)) {
          createOnlyParentNullable = ChildrenList_CreateOnlyParentNullable.NoChildrenList_CreateOnlyParentNullable;
        }
      }
      if (childrenList_Child.CreateOnlyParentNullable is null) {
        if (createOnlyParentNullable is null) {
          //nothing to do
        } else {
          childrenList_Child.CreateOnlyParentNullable = createOnlyParentNullable;
          childrenList_Child.CreateOnlyParentNullable.AddToChildrenList_Children(childrenList_Child);
        }
      } else {
        if (createOnlyParentNullable is null) {
          if (childrenList_Child.CreateOnlyParentNullable!=ChildrenList_CreateOnlyParentNullable.NoChildrenList_CreateOnlyParentNullable) {
            childrenList_Child.CreateOnlyParentNullable.RemoveFromChildrenList_Children(childrenList_Child);
          }
          childrenList_Child.CreateOnlyParentNullable = null;
        } else {
          if (childrenList_Child.CreateOnlyParentNullable!=ChildrenList_CreateOnlyParentNullable.NoChildrenList_CreateOnlyParentNullable) {
            childrenList_Child.CreateOnlyParentNullable.RemoveFromChildrenList_Children(childrenList_Child);
          }
          childrenList_Child.CreateOnlyParentNullable = createOnlyParentNullable;
          childrenList_Child.CreateOnlyParentNullable.AddToChildrenList_Children(childrenList_Child);
        }
      }
      childrenList_Child.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes ChildrenList_Child from DC.Data.ChildrenList_Children.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"ChildrenList_Child.Release(): ChildrenList_Child '{this}' is not stored in DC.Data, key is {Key}.");
      }
      onReleased();
      DC.Data.ChildrenList_Children.Remove(Key);
#if DEBUG
      DC.Trace?.Invoke($"Released ChildrenList_Child @{Key} #{GetHashCode()}");
#endif
    }
    partial void onReleased();


    /// <summary>
    /// Removes ChildrenList_Child from parents as part of a transaction rollback of the new() statement.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var childrenList_Child = (ChildrenList_Child) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback new ChildrenList_Child(): {childrenList_Child.ToTraceString()}");
#endif
      if (childrenList_Child.Parent!=ChildrenList_Parent.NoChildrenList_Parent) {
        childrenList_Child.Parent.RemoveFromChildrenList_Children(childrenList_Child);
      }
      if (childrenList_Child.ParentNullable!=null && childrenList_Child.ParentNullable!=ChildrenList_ParentNullable.NoChildrenList_ParentNullable) {
        childrenList_Child.ParentNullable.RemoveFromChildrenList_Children(childrenList_Child);
      }
      if (childrenList_Child.CreateOnlyParent!=ChildrenList_CreateOnlyParent.NoChildrenList_CreateOnlyParent) {
        childrenList_Child.CreateOnlyParent.RemoveFromChildrenList_Children(childrenList_Child);
      }
      if (childrenList_Child.CreateOnlyParentNullable!=null && childrenList_Child.CreateOnlyParentNullable!=ChildrenList_CreateOnlyParentNullable.NoChildrenList_CreateOnlyParentNullable) {
        childrenList_Child.CreateOnlyParentNullable.RemoveFromChildrenList_Children(childrenList_Child);
      }
      childrenList_Child.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases ChildrenList_Child from DC.Data.ChildrenList_Children as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var childrenList_Child = (ChildrenList_Child) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback ChildrenList_Child.Store(): {childrenList_Child.ToTraceString()}");
#endif
      childrenList_Child.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the ChildrenList_Child item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (ChildrenList_Child) oldStorageItem;
      var newItem = (ChildrenList_Child) newStorageItem;
#if DEBUG
      DC.Trace?.Invoke($"Rolling back ChildrenList_Child.Update(): {newItem.ToTraceString()}");
#endif
      newItem.Text = oldItem.Text;
      if (newItem.Parent!=oldItem.Parent) {
        if (newItem.Parent!=ChildrenList_Parent.NoChildrenList_Parent) {
            newItem.Parent.RemoveFromChildrenList_Children(newItem);
        }
        newItem.Parent = oldItem.Parent;
        newItem.Parent.AddToChildrenList_Children(newItem);
      }
      if (newItem.ParentNullable is null) {
        if (oldItem.ParentNullable is null) {
          //nothing to do
        } else {
          newItem.ParentNullable = oldItem.ParentNullable;
          newItem.ParentNullable.AddToChildrenList_Children(newItem);
        }
      } else {
        if (oldItem.ParentNullable is null) {
          if (newItem.ParentNullable!=ChildrenList_ParentNullable.NoChildrenList_ParentNullable) {
            newItem.ParentNullable.RemoveFromChildrenList_Children(newItem);
          }
          newItem.ParentNullable = null;
        } else {
          if (oldItem.ParentNullable!=newItem.ParentNullable) {
          if (newItem.ParentNullable!=ChildrenList_ParentNullable.NoChildrenList_ParentNullable) {
            newItem.ParentNullable.RemoveFromChildrenList_Children(newItem);
          }
          newItem.ParentNullable = oldItem.ParentNullable;
          newItem.ParentNullable.AddToChildrenList_Children(newItem);
          }
        }
      }
      if (newItem.CreateOnlyParent!=oldItem.CreateOnlyParent) {
        if (newItem.CreateOnlyParent!=ChildrenList_CreateOnlyParent.NoChildrenList_CreateOnlyParent) {
            newItem.CreateOnlyParent.RemoveFromChildrenList_Children(newItem);
        }
        newItem.CreateOnlyParent = oldItem.CreateOnlyParent;
        newItem.CreateOnlyParent.AddToChildrenList_Children(newItem);
      }
      if (newItem.CreateOnlyParentNullable is null) {
        if (oldItem.CreateOnlyParentNullable is null) {
          //nothing to do
        } else {
          newItem.CreateOnlyParentNullable = oldItem.CreateOnlyParentNullable;
          newItem.CreateOnlyParentNullable.AddToChildrenList_Children(newItem);
        }
      } else {
        if (oldItem.CreateOnlyParentNullable is null) {
          if (newItem.CreateOnlyParentNullable!=ChildrenList_CreateOnlyParentNullable.NoChildrenList_CreateOnlyParentNullable) {
            newItem.CreateOnlyParentNullable.RemoveFromChildrenList_Children(newItem);
          }
          newItem.CreateOnlyParentNullable = null;
        } else {
          if (oldItem.CreateOnlyParentNullable!=newItem.CreateOnlyParentNullable) {
          if (newItem.CreateOnlyParentNullable!=ChildrenList_CreateOnlyParentNullable.NoChildrenList_CreateOnlyParentNullable) {
            newItem.CreateOnlyParentNullable.RemoveFromChildrenList_Children(newItem);
          }
          newItem.CreateOnlyParentNullable = oldItem.CreateOnlyParentNullable;
          newItem.CreateOnlyParentNullable.AddToChildrenList_Children(newItem);
          }
        }
      }
      newItem.onRollbackItemUpdated(oldItem);
#if DEBUG
      DC.Trace?.Invoke($"Rolled back ChildrenList_Child.Update(): {newItem.ToTraceString()}");
#endif
    }
    partial void onRollbackItemUpdated(ChildrenList_Child oldChildrenList_Child);


    /// <summary>
    /// Adds ChildrenList_Child to DC.Data.ChildrenList_Children as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var childrenList_Child = (ChildrenList_Child) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback ChildrenList_Child.Release(): {childrenList_Child.ToTraceString()}");
#endif
      childrenList_Child.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Text}|" +
        $" Parent {Parent.GetKeyOrHash()}|" +
        $" ParentNullable {ParentNullable?.GetKeyOrHash()}|" +
        $" CreateOnlyParent {CreateOnlyParent.GetKeyOrHash()}|" +
        $" CreateOnlyParentNullable {CreateOnlyParentNullable?.GetKeyOrHash()}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}," +
        $" {Parent.ToShortString()}," +
        $" {ParentNullable?.ToShortString()}," +
        $" {CreateOnlyParent.ToShortString()}," +
        $" {CreateOnlyParentNullable?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Text: {Text}," +
        $" Parent: {Parent.ToShortString()}," +
        $" ParentNullable: {ParentNullable?.ToShortString()}," +
        $" CreateOnlyParent: {CreateOnlyParent.ToShortString()}," +
        $" CreateOnlyParentNullable: {CreateOnlyParentNullable?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }


  #region ChildrenList_ChildRaw
  //      ---------------------

  /// <summary>
  /// ChildrenList_ChildRaw is used instead ChildrenList_Child and DC.Data to read an instance from a CSV file with 
  /// ChildrenList_ChildReader or write with ChildrenList_ChildWriter.
  /// </summary>
  public class ChildrenList_ChildRaw {

    /// <summary>
    /// Unique identifier for ChildrenList_ChildRaw.
    /// </summary>
    public int Key { get; set; }


    /// <summary>
    /// Some info
    /// </summary>
    public string Text { get; set; } ="";


    /// <summary>
    /// Deletable parent for deletable children which must have a parent
    /// </summary>
    public int ParentKey { get; set; }


    /// <summary>
    /// Deletable parent for deletable children which might or might not have a parent
    /// </summary>
    public int? ParentNullableKey { get; set; }


    /// <summary>
    /// None deletable parent for deletable children which must have a parent
    /// </summary>
    public int CreateOnlyParentKey { get; set; }


    /// <summary>
    /// None deletable parent for deletable children which might or might not have a parent
    /// </summary>
    public int? CreateOnlyParentNullableKey { get; set; }


    /// <summary>
    /// How was ChildrenList_ChildRaw marked in CSV file (read, update, delete) ? If not read from CSV file, RawState is new.
    /// </summary>
    public RawStateEnum RawState { get; set; }


    /// <summary>
    /// Default Constructor.
    /// </summary>
    public ChildrenList_ChildRaw() {
    }


    /// <summary>
    /// Constructor, will replace links to parents with the parents' key.
    /// </summary>
    public ChildrenList_ChildRaw(ChildrenList_Child childrenList_Child) {
      Key = childrenList_Child.Key;
      Text = childrenList_Child.Text;
      ParentKey = childrenList_Child.Parent.Key;
      ParentNullableKey = childrenList_Child.ParentNullable?.Key;
      CreateOnlyParentKey = childrenList_Child.CreateOnlyParent.Key;
      CreateOnlyParentNullableKey = childrenList_Child.CreateOnlyParentNullable?.Key;
    }


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" ParentKey: {ParentKey}," +
        $" ParentNullableKey: {ParentNullableKey}," +
        $" CreateOnlyParentKey: {CreateOnlyParentKey}," +
        $" CreateOnlyParentNullableKey: {CreateOnlyParentNullableKey};";
      return returnString;
    }
  }
  #endregion


  #region ChildrenList_ChildReader
  //      ------------------------

  /// <summary>
  /// Reads from a CSV file containing ChildrenList_Child instances. Note that the keys of linked objects will be returned 
  /// and not the linked objects themselves, since the data context will not be involved.
  /// </summary>
  public class ChildrenList_ChildReader: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvReader csvReader;


    /// <summary>
    /// Constructor, will read and verify the ChildrenList_Child header line. You need to dispose ChildrenList_ChildReader once
    /// you are done, except when you have read the whole file, then ChildrenList_ChildReader.ReadLine() disposes automatically.
    /// </summary>
    public ChildrenList_ChildReader(string fileNamePath, CsvConfig csvConfig) {
      this.csvConfig = csvConfig;
      csvReader = new CsvReader(fileNamePath, csvConfig, ChildrenList_Child.EstimatedLineLength);
      var csvHeaderString = Csv.ToCsvHeaderString(ChildrenList_Child.Headers, csvConfig.Delimiter);
      var headerLine = csvReader.ReadLine();
      if (csvHeaderString!=headerLine) throw new Exception($"Error reading file {csvReader.FileName}{Environment.NewLine}'" +
        headerLine + "' should be '" + csvHeaderString + "'.");
    }


    /// <summary>
    /// Reads the details of one ChildrenList_Child from the CSV file. Returns false when all lines are
    /// read and disposes the reader.
    /// </summary>
    public bool ReadLine([NotNullWhen(true)] out ChildrenList_ChildRaw? childrenList_ChildRaw){
      if (csvReader.IsEndOfFileReached()) {
        csvReader.Dispose();
        childrenList_ChildRaw = null;
        return false;
      }
      childrenList_ChildRaw = new ChildrenList_ChildRaw();
      var firstLineChar = csvReader.ReadFirstLineChar();
      if (firstLineChar==csvConfig.LineCharAdd) {
        childrenList_ChildRaw.RawState = RawStateEnum.Read;
      } else if (firstLineChar==csvConfig.LineCharUpdate) {
        childrenList_ChildRaw.RawState = RawStateEnum.Updated;
      } else if (firstLineChar==csvConfig.LineCharDelete) {
        childrenList_ChildRaw.RawState = RawStateEnum.Deleted;
      } else {
        throw new NotSupportedException($"Illegal first line character '{firstLineChar}' found in '{csvReader.GetPresentContent()}'.");
      }
      childrenList_ChildRaw.Key = csvReader.ReadInt();
      childrenList_ChildRaw.Text = csvReader.ReadString();
      childrenList_ChildRaw.ParentKey = csvReader.ReadInt();
      childrenList_ChildRaw.ParentNullableKey = csvReader.ReadIntNull();
      childrenList_ChildRaw.CreateOnlyParentKey = csvReader.ReadInt();
      childrenList_ChildRaw.CreateOnlyParentNullableKey = csvReader.ReadIntNull();
      csvReader.ReadEndOfLine();
      return true;
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of ChildrenList_ChildReader exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is ChildrenList_ChildReader already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvReader.Dispose();
    }
    #endregion
  }
  #endregion


  #region ChildrenList_ChildWriter
  //      ------------------------

  /// <summary>
  /// Writes a CSV file containing records which can be read back as ChildrenList_Child. Note that the keys of linked objects
  /// need to be provided in Write(), since the data context will not be involved.
  /// </summary>
  public class ChildrenList_ChildWriter: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvWriter csvWriter;
    int lastKey = int.MinValue;


    /// <summary>
    /// Constructor, will write the ChildrenList_Child header line into the CSV file. Dispose ChildrenList_ChildWriter once done.
    /// </summary>
    public ChildrenList_ChildWriter(string fileNamePath, CsvConfig csvConfig){
      this.csvConfig = csvConfig;
      csvWriter = new CsvWriter(fileNamePath, csvConfig, ChildrenList_Child.EstimatedLineLength, null, 0);
      var csvHeaderString = Csv.ToCsvHeaderString(ChildrenList_Child.Headers, csvConfig.Delimiter);
      csvWriter.WriteLine(csvHeaderString);
    }


    /// <summary>
    /// Writes the details of one ChildrenList_ChildRaw to the CSV file
    /// </summary>
    public void Write(ChildrenList_ChildRaw childrenList_ChildRaw){
      if (childrenList_ChildRaw.Key<0) {
        throw new Exception($"ChildrenList_ChildRaw's key {childrenList_ChildRaw.Key} needs to be greater equal 0.");
      }
      if (childrenList_ChildRaw.Key<=lastKey) {
        throw new Exception($"ChildrenList_ChildRaw's key {childrenList_ChildRaw.Key} must be greater than the last written ChildrenList_Child's key {lastKey}.");
      }
      lastKey = childrenList_ChildRaw.Key;
      csvWriter.WriteFirstLineChar(csvConfig.LineCharAdd);
      csvWriter.Write(childrenList_ChildRaw.Key);
      csvWriter.Write(childrenList_ChildRaw.Text);
      if (childrenList_ChildRaw.ParentKey<0) throw new Exception($"Cannot write childrenList_Child to CSV File, because Parent is not stored in DC.Data.ChildrenList_Parents.");

      csvWriter.Write(childrenList_ChildRaw.ParentKey.ToString());
      if (childrenList_ChildRaw.ParentNullableKey is null) {
        csvWriter.WriteNull();
      } else {
        if (childrenList_ChildRaw.ParentNullableKey<0) throw new Exception($"Cannot write childrenList_Child to CSV File, because ParentNullable is not stored in DC.Data.ChildrenList_ParentNullables.");

        csvWriter.Write(childrenList_ChildRaw.ParentNullableKey.ToString());
      }
      if (childrenList_ChildRaw.CreateOnlyParentKey<0) throw new Exception($"Cannot write childrenList_Child to CSV File, because CreateOnlyParent is not stored in DC.Data.ChildrenList_CreateOnlyParents.");

      csvWriter.Write(childrenList_ChildRaw.CreateOnlyParentKey.ToString());
      if (childrenList_ChildRaw.CreateOnlyParentNullableKey is null) {
        csvWriter.WriteNull();
      } else {
        if (childrenList_ChildRaw.CreateOnlyParentNullableKey<0) throw new Exception($"Cannot write childrenList_Child to CSV File, because CreateOnlyParentNullable is not stored in DC.Data.ChildrenList_CreateOnlyParentNullables.");

        csvWriter.Write(childrenList_ChildRaw.CreateOnlyParentNullableKey.ToString());
      }
      csvWriter.WriteEndOfLine();
    }


    /// <summary>
    /// Writes the details of one ChildrenList_Child to the CSV file
    /// </summary>
    public void Write(
      int key, 
      string text, 
      int parentKey, 
      int? parentNullableKey, 
      int createOnlyParentKey, 
      int? createOnlyParentNullableKey)
    {
      if (key<0) {
        throw new Exception($"ChildrenList_Child's key {key} needs to be greater equal 0.");
      }
      if (key<=lastKey) {
        throw new Exception($"ChildrenList_Child's key {key} must be greater than the last written ChildrenList_Child's key {lastKey}.");
      }
      lastKey = key;
      csvWriter.WriteFirstLineChar(csvConfig.LineCharAdd);
      csvWriter.Write(key);
      csvWriter.Write(text);
      if (parentKey<0) throw new Exception($"Cannot write childrenList_Child to CSV File, because Parent is not stored in DC.Data.ChildrenList_Parents.");

      csvWriter.Write(parentKey.ToString());
      if (parentNullableKey is null) {
        csvWriter.WriteNull();
      } else {
        if (parentNullableKey<0) throw new Exception($"Cannot write childrenList_Child to CSV File, because ParentNullable is not stored in DC.Data.ChildrenList_ParentNullables.");

        csvWriter.Write(parentNullableKey.ToString());
      }
      if (createOnlyParentKey<0) throw new Exception($"Cannot write childrenList_Child to CSV File, because CreateOnlyParent is not stored in DC.Data.ChildrenList_CreateOnlyParents.");

      csvWriter.Write(createOnlyParentKey.ToString());
      if (createOnlyParentNullableKey is null) {
        csvWriter.WriteNull();
      } else {
        if (createOnlyParentNullableKey<0) throw new Exception($"Cannot write childrenList_Child to CSV File, because CreateOnlyParentNullable is not stored in DC.Data.ChildrenList_CreateOnlyParentNullables.");

        csvWriter.Write(createOnlyParentNullableKey.ToString());
      }
      csvWriter.WriteEndOfLine();
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of ChildrenList_ChildWriter exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is ChildrenList_ChildWriter already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvWriter.Dispose();
    }
    #endregion
  }
  #endregion
}
