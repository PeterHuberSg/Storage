//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into MultipleChildrenDictionary_ParentNullable.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// Example of a parent child relationship using a Dictionary where the child's parent property is nullable.
    /// </summary>
  public partial class MultipleChildrenDictionary_ParentNullable: IStorage<MultipleChildrenDictionary_ParentNullable> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for MultipleChildrenDictionary_ParentNullable. Gets set once MultipleChildrenDictionary_ParentNullable gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(MultipleChildrenDictionary_ParentNullable multipleChildrenDictionary_ParentNullable, int key) { multipleChildrenDictionary_ParentNullable.Key = key; }


    /// <summary>
    /// Some Text
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Dictionary used instead of List. Comment is required and indicates which property of the DictionaryChild to 
    /// use as key
    /// </summary>
    public IReadOnlyDictionary<DateTime, MultipleChildrenDictionary_Child> MultipleChildrenDictionary_Children => multipleChildrenDictionary_Children;
    readonly Dictionary<DateTime, MultipleChildrenDictionary_Child> multipleChildrenDictionary_Children;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Text"};


    /// <summary>
    /// None existing MultipleChildrenDictionary_ParentNullable
    /// </summary>
    internal static MultipleChildrenDictionary_ParentNullable NoMultipleChildrenDictionary_ParentNullable = new MultipleChildrenDictionary_ParentNullable("NoText", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of MultipleChildrenDictionary_ParentNullable has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action<MultipleChildrenDictionary_ParentNullable>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// MultipleChildrenDictionary_ParentNullable Constructor. If isStoring is true, adds MultipleChildrenDictionary_ParentNullable to DC.Data.MultipleChildrenDictionary_ParentNullables.
    /// </summary>
    public MultipleChildrenDictionary_ParentNullable(string text, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      multipleChildrenDictionary_Children = new Dictionary<DateTime, MultipleChildrenDictionary_Child>();
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for MultipleChildrenDictionary_ParentNullable read from CSV file
    /// </summary>
    private MultipleChildrenDictionary_ParentNullable(int key, CsvReader csvReader, DC context) {
      Key = key;
      Text = csvReader.ReadString();
      multipleChildrenDictionary_Children = new Dictionary<DateTime, MultipleChildrenDictionary_Child>();
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DC context);


    /// <summary>
    /// New MultipleChildrenDictionary_ParentNullable read from CSV file
    /// </summary>
    internal static MultipleChildrenDictionary_ParentNullable Create(int key, CsvReader csvReader, DC context) {
      return new MultipleChildrenDictionary_ParentNullable(key, csvReader, context);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds MultipleChildrenDictionary_ParentNullable to DC.Data.MultipleChildrenDictionary_ParentNullables. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"MultipleChildrenDictionary_ParentNullable cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      onStore();
      DC.Data.MultipleChildrenDictionary_ParentNullables.Add(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write MultipleChildrenDictionary_ParentNullable to CSV file
    /// </summary>
    public const int MaxLineLength = 150;


    /// <summary>
    /// Write MultipleChildrenDictionary_ParentNullable to CSV file
    /// </summary>
    internal static void Write(MultipleChildrenDictionary_ParentNullable multipleChildrenDictionary_ParentNullable, CsvWriter csvWriter) {
      multipleChildrenDictionary_ParentNullable.onCsvWrite();
      csvWriter.Write(multipleChildrenDictionary_ParentNullable.Text);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates MultipleChildrenDictionary_ParentNullable with the provided values
    /// </summary>
    public void Update(string text) {
      var isCancelled = false;
      onUpdating(text, ref isCancelled);
      if (isCancelled) return;

      var isChangeDetected = false;
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdating(string text, ref bool isCancelled);
    partial void onUpdated();


    /// <summary>
    /// Updates this MultipleChildrenDictionary_ParentNullable with values from CSV file
    /// </summary>
    internal static void Update(MultipleChildrenDictionary_ParentNullable multipleChildrenDictionary_ParentNullable, CsvReader csvReader, DC _) {
      multipleChildrenDictionary_ParentNullable.Text = csvReader.ReadString();
      multipleChildrenDictionary_ParentNullable.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Add multipleChildrenDictionary_Child to MultipleChildrenDictionary_Children.
    /// </summary>
    internal void AddToMultipleChildrenDictionary_Children(MultipleChildrenDictionary_Child multipleChildrenDictionary_Child) {
      multipleChildrenDictionary_Children.Add(multipleChildrenDictionary_Child.DateKey, multipleChildrenDictionary_Child);
      onAddedToMultipleChildrenDictionary_Children(multipleChildrenDictionary_Child);
    }
    partial void onAddedToMultipleChildrenDictionary_Children(MultipleChildrenDictionary_Child multipleChildrenDictionary_Child);


    /// <summary>
    /// Removes multipleChildrenDictionary_Child from MultipleChildrenDictionary_ParentNullable.
    /// </summary>
    internal void RemoveFromMultipleChildrenDictionary_Children(MultipleChildrenDictionary_Child multipleChildrenDictionary_Child) {
#if DEBUG
      if (!multipleChildrenDictionary_Children.Remove(multipleChildrenDictionary_Child.DateKey)) throw new Exception();
#else
        multipleChildrenDictionary_Children.Remove(multipleChildrenDictionary_Child.DateKey);
#endif
      onRemovedFromMultipleChildrenDictionary_Children(multipleChildrenDictionary_Child);
    }
    partial void onRemovedFromMultipleChildrenDictionary_Children(MultipleChildrenDictionary_Child multipleChildrenDictionary_Child);


    /// <summary>
    /// Removes MultipleChildrenDictionary_ParentNullable from DC.Data.MultipleChildrenDictionary_ParentNullables and 
    /// disconnects MultipleChildrenDictionary_Child.ParentWithDictionaryNullable from MultipleChildrenDictionary_Children.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"MultipleChildrenDictionary_ParentNullable.Remove(): MultipleChildrenDictionary_ParentNullable 'Class MultipleChildrenDictionary_ParentNullable' is not stored in DC.Data, key is {Key}.");
      }
      onRemove();
      DC.Data.MultipleChildrenDictionary_ParentNullables.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Disconnects MultipleChildrenDictionary_Child.ParentWithDictionaryNullable from MultipleChildrenDictionary_Children.
    /// </summary>
    internal static void Disconnect(MultipleChildrenDictionary_ParentNullable multipleChildrenDictionary_ParentNullable) {
      foreach (var multipleChildrenDictionary_Child in multipleChildrenDictionary_ParentNullable.MultipleChildrenDictionary_Children.Values) {
        multipleChildrenDictionary_Child.RemoveParentWithDictionaryNullable(multipleChildrenDictionary_ParentNullable);
      }
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" MultipleChildrenDictionary_Children: {MultipleChildrenDictionary_Children.Count};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }


  #region MultipleChildrenDictionary_ParentNullableWriter
  //      -----------------------------------------------

  /// <summary>
  /// Writes a CSV file containing records which can be read back as MultipleChildrenDictionary_ParentNullable. Note that the keys of linked objects
  /// need to be provided in Write(), since the data context will not be involved.
  /// </summary>
  public class MultipleChildrenDictionary_ParentNullableWriter: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvWriter csvWriter;
    int lastKey = int.MinValue;


    /// <summary>
    /// Constructor, will write the MultipleChildrenDictionary_ParentNullable header line into the CSV file. Dispose MultipleChildrenDictionary_ParentNullableWriter once done.
    /// </summary>
    public MultipleChildrenDictionary_ParentNullableWriter(string? fileNamePath, CsvConfig csvConfig, int maxLineCharLenght) {
      this.csvConfig = csvConfig;
      csvWriter = new CsvWriter(fileNamePath, csvConfig, maxLineCharLenght, null, 0);
      var csvHeaderString = Csv.ToCsvHeaderString(MultipleChildrenDictionary_ParentNullable.Headers, csvConfig.Delimiter);
      csvWriter.WriteLine(csvHeaderString);
    }


    /// <summary>
    /// Writes the details of one MultipleChildrenDictionary_ParentNullable to the CSV file
    /// </summary>
    public void Write(int key, string text) {
      if (key<0) {
        throw new Exception($"MultipleChildrenDictionary_ParentNullable's key {key} needs to be greater equal 0.");
      }
      if (key<=lastKey) {
        throw new Exception($"MultipleChildrenDictionary_ParentNullable's key {key} must be greater than the last written MultipleChildrenDictionary_ParentNullable's key {lastKey}.");
      }
      lastKey = key;
      csvWriter.WriteFirstLineChar(csvConfig.LineCharAdd);
      csvWriter.Write(key);
      csvWriter.Write(text);
      csvWriter.WriteEndOfLine();
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of MultipleChildrenDictionary_ParentNullableWriter exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is MultipleChildrenDictionary_ParentNullableWriter already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvWriter.Dispose();
    }
    #endregion
  }
  #endregion
}
