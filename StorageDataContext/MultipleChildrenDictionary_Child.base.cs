//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into MultipleChildrenDictionary_Child.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// DictionaryChild has a member providing the key value needed to add DictionaryChild to  
    /// ParentWithDictionary and ParentWithDictionaryNullable
    /// </summary>
  public partial class MultipleChildrenDictionary_Child: IStorage<MultipleChildrenDictionary_Child> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for MultipleChildrenDictionary_Child. Gets set once MultipleChildrenDictionary_Child gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(MultipleChildrenDictionary_Child multipleChildrenDictionary_Child, int key) { multipleChildrenDictionary_Child.Key = key; }


    /// <summary>
    /// Key field used in ParentWithDictionary.DictionaryChildren and 
    /// ParentWithDictionaryNullable.DictionaryChildrenDictionary
    /// Stores only dates but no times.
    /// </summary>
    public DateTime DateKey { get; private set; }


    /// <summary>
    /// Some info
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Parent
    /// </summary>
    public MultipleChildrenDictionary_Parent ParentWithDictionary { get; private set; }


    /// <summary>
    /// Nullable parent
    /// </summary>
    public MultipleChildrenDictionary_ParentNullable? ParentWithDictionaryNullable { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "DateKey", "Text", "ParentWithDictionary", "ParentWithDictionaryNullable"};


    /// <summary>
    /// None existing MultipleChildrenDictionary_Child
    /// </summary>
    internal static MultipleChildrenDictionary_Child NoMultipleChildrenDictionary_Child = new MultipleChildrenDictionary_Child(DateTime.MinValue.Date, "NoText", MultipleChildrenDictionary_Parent.NoMultipleChildrenDictionary_Parent, null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of MultipleChildrenDictionary_Child has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action<MultipleChildrenDictionary_Child>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// MultipleChildrenDictionary_Child Constructor. If isStoring is true, adds MultipleChildrenDictionary_Child to DC.Data.MultipleChildrenDictionary_Children, 
    /// adds MultipleChildrenDictionary_Child to multipleChildrenDictionary_Parent.MultipleChildrenDictionary_Children
    /// and if there is a ParentWithDictionaryNullable adds MultipleChildrenDictionary_Child to multipleChildrenDictionary_ParentNullable.MultipleChildrenDictionary_Children.
    /// </summary>
    public MultipleChildrenDictionary_Child(
      DateTime dateKey, 
      string text, 
      MultipleChildrenDictionary_Parent parentWithDictionary, 
      MultipleChildrenDictionary_ParentNullable? parentWithDictionaryNullable, 
      bool isStoring = true)
    {
      Key = StorageExtensions.NoKey;
      DateKey = dateKey.Floor(Rounding.Days);
      Text = text;
      ParentWithDictionary = parentWithDictionary;
      ParentWithDictionaryNullable = parentWithDictionaryNullable;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for MultipleChildrenDictionary_Child read from CSV file
    /// </summary>
    private MultipleChildrenDictionary_Child(int key, CsvReader csvReader, DC context) {
      Key = key;
      DateKey = csvReader.ReadDate();
      Text = csvReader.ReadString();
      var multipleChildrenDictionary_ParentKey = csvReader.ReadInt();
      if (context.MultipleChildrenDictionary_Parents.TryGetValue(multipleChildrenDictionary_ParentKey, out var parentWithDictionary)) {
          ParentWithDictionary = parentWithDictionary;
      } else {
        throw new Exception($"Read MultipleChildrenDictionary_Child from CSV file: Cannot find ParentWithDictionary with key {multipleChildrenDictionary_ParentKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      }
      var parentWithDictionaryNullableKey = csvReader.ReadIntNull();
      if (parentWithDictionaryNullableKey.HasValue) {
        if (context.MultipleChildrenDictionary_ParentNullables.TryGetValue(parentWithDictionaryNullableKey.Value, out var parentWithDictionaryNullable)) {
          ParentWithDictionaryNullable = parentWithDictionaryNullable;
        } else {
          ParentWithDictionaryNullable = MultipleChildrenDictionary_ParentNullable.NoMultipleChildrenDictionary_ParentNullable;
        }
      }
      if (ParentWithDictionary!=MultipleChildrenDictionary_Parent.NoMultipleChildrenDictionary_Parent) {
        ParentWithDictionary.AddToMultipleChildrenDictionary_Children(this);
      }
      if (parentWithDictionaryNullableKey.HasValue && ParentWithDictionaryNullable!=MultipleChildrenDictionary_ParentNullable.NoMultipleChildrenDictionary_ParentNullable) {
        ParentWithDictionaryNullable!.AddToMultipleChildrenDictionary_Children(this);
      }
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DC context);


    /// <summary>
    /// New MultipleChildrenDictionary_Child read from CSV file
    /// </summary>
    internal static MultipleChildrenDictionary_Child Create(int key, CsvReader csvReader, DC context) {
      return new MultipleChildrenDictionary_Child(key, csvReader, context);
    }


    /// <summary>
    /// Verify that multipleChildrenDictionary_Child.ParentWithDictionary exists.
    /// Verify that multipleChildrenDictionary_Child.ParentWithDictionaryNullable exists.
    /// </summary>
    internal static bool Verify(MultipleChildrenDictionary_Child multipleChildrenDictionary_Child) {
      if (multipleChildrenDictionary_Child.ParentWithDictionary==MultipleChildrenDictionary_Parent.NoMultipleChildrenDictionary_Parent) return false;
      if (multipleChildrenDictionary_Child.ParentWithDictionaryNullable==MultipleChildrenDictionary_ParentNullable.NoMultipleChildrenDictionary_ParentNullable) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds MultipleChildrenDictionary_Child to DC.Data.MultipleChildrenDictionary_Children, MultipleChildrenDictionary_Parent and MultipleChildrenDictionary_ParentNullable. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"MultipleChildrenDictionary_Child cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      if (ParentWithDictionary.Key<0) {
        throw new Exception($"MultipleChildrenDictionary_Child cannot be stored in DC.Data, ParentWithDictionary is missing or not stored yet." + Environment.NewLine + ToString());
      }
      if (ParentWithDictionaryNullable!=null && ParentWithDictionaryNullable.Key<0) {
        throw new Exception($"MultipleChildrenDictionary_Child cannot be stored in DC.Data, ParentWithDictionaryNullable is not stored yet." + Environment.NewLine + ToString());
      }
      onStore();
      DC.Data.MultipleChildrenDictionary_Children.Add(this);
      ParentWithDictionary.AddToMultipleChildrenDictionary_Children(this);
      ParentWithDictionaryNullable?.AddToMultipleChildrenDictionary_Children(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write MultipleChildrenDictionary_Child to CSV file
    /// </summary>
    public const int MaxLineLength = 161;


    /// <summary>
    /// Write MultipleChildrenDictionary_Child to CSV file
    /// </summary>
    internal static void Write(MultipleChildrenDictionary_Child multipleChildrenDictionary_Child, CsvWriter csvWriter) {
      multipleChildrenDictionary_Child.onCsvWrite();
      csvWriter.WriteDate(multipleChildrenDictionary_Child.DateKey);
      csvWriter.Write(multipleChildrenDictionary_Child.Text);
      if (multipleChildrenDictionary_Child.ParentWithDictionary.Key<0) throw new Exception($"Cannot write multipleChildrenDictionary_Child '{multipleChildrenDictionary_Child}' to CSV File, because ParentWithDictionary is not stored in DC.Data.MultipleChildrenDictionary_Parents.");

      csvWriter.Write(multipleChildrenDictionary_Child.ParentWithDictionary.Key.ToString());
      if (multipleChildrenDictionary_Child.ParentWithDictionaryNullable is null) {
        csvWriter.WriteNull();
      } else {
        if (multipleChildrenDictionary_Child.ParentWithDictionaryNullable.Key<0) throw new Exception($"Cannot write multipleChildrenDictionary_Child '{multipleChildrenDictionary_Child}' to CSV File, because ParentWithDictionaryNullable is not stored in DC.Data.MultipleChildrenDictionary_ParentNullables.");

        csvWriter.Write(multipleChildrenDictionary_Child.ParentWithDictionaryNullable.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates MultipleChildrenDictionary_Child with the provided values
    /// </summary>
    public void Update(DateTime dateKey, string text, MultipleChildrenDictionary_Parent parentWithDictionary, MultipleChildrenDictionary_ParentNullable? parentWithDictionaryNullable) {
      var isCancelled = false;
      onUpdating(dateKey, text, parentWithDictionary, parentWithDictionaryNullable, ref isCancelled);
      if (isCancelled) return;

      var isChangeDetected = false;
      var dateKeyRounded = dateKey.Floor(Rounding.Days);
      if (DateKey!=dateKeyRounded) {
        DateKey = dateKeyRounded;
        isChangeDetected = true;
      }
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (ParentWithDictionary!=parentWithDictionary) {
        ParentWithDictionary.RemoveFromMultipleChildrenDictionary_Children(this);
        ParentWithDictionary = parentWithDictionary;
        ParentWithDictionary.AddToMultipleChildrenDictionary_Children(this);
        isChangeDetected = true;
      }
      if (ParentWithDictionaryNullable is null) {
        if (parentWithDictionaryNullable is null) {
          //nothing to do
        } else {
          ParentWithDictionaryNullable = parentWithDictionaryNullable;
          ParentWithDictionaryNullable.AddToMultipleChildrenDictionary_Children(this);
          isChangeDetected = true;
        }
      } else {
        if (parentWithDictionaryNullable is null) {
          ParentWithDictionaryNullable.RemoveFromMultipleChildrenDictionary_Children(this);
          ParentWithDictionaryNullable = null;
          isChangeDetected = true;
        } else {
          if (ParentWithDictionaryNullable!=parentWithDictionaryNullable) {
            ParentWithDictionaryNullable.RemoveFromMultipleChildrenDictionary_Children(this);
            ParentWithDictionaryNullable = parentWithDictionaryNullable;
            ParentWithDictionaryNullable.AddToMultipleChildrenDictionary_Children(this);
            isChangeDetected = true;
          }
        }
      }
      if (isChangeDetected) {
        onUpdated();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdating(
      DateTime dateKey, 
      string text, 
      MultipleChildrenDictionary_Parent parentWithDictionary, 
      MultipleChildrenDictionary_ParentNullable? parentWithDictionaryNullable, 
      ref bool isCancelled);
    partial void onUpdated();


    /// <summary>
    /// Updates this MultipleChildrenDictionary_Child with values from CSV file
    /// </summary>
    internal static void Update(MultipleChildrenDictionary_Child multipleChildrenDictionary_Child, CsvReader csvReader, DC context) {
      multipleChildrenDictionary_Child.DateKey = csvReader.ReadDate();
      multipleChildrenDictionary_Child.Text = csvReader.ReadString();
      if (!context.MultipleChildrenDictionary_Parents.TryGetValue(csvReader.ReadInt(), out var parentWithDictionary)) {
        parentWithDictionary = MultipleChildrenDictionary_Parent.NoMultipleChildrenDictionary_Parent;
      }
      if (multipleChildrenDictionary_Child.ParentWithDictionary!=parentWithDictionary) {
        if (multipleChildrenDictionary_Child.ParentWithDictionary!=MultipleChildrenDictionary_Parent.NoMultipleChildrenDictionary_Parent) {
          multipleChildrenDictionary_Child.ParentWithDictionary.RemoveFromMultipleChildrenDictionary_Children(multipleChildrenDictionary_Child);
        }
        multipleChildrenDictionary_Child.ParentWithDictionary = parentWithDictionary;
        multipleChildrenDictionary_Child.ParentWithDictionary.AddToMultipleChildrenDictionary_Children(multipleChildrenDictionary_Child);
      }
      var parentWithDictionaryNullableKey = csvReader.ReadIntNull();
      MultipleChildrenDictionary_ParentNullable? parentWithDictionaryNullable;
      if (parentWithDictionaryNullableKey is null) {
        parentWithDictionaryNullable = null;
      } else {
        if (!context.MultipleChildrenDictionary_ParentNullables.TryGetValue(parentWithDictionaryNullableKey.Value, out parentWithDictionaryNullable)) {
          parentWithDictionaryNullable = MultipleChildrenDictionary_ParentNullable.NoMultipleChildrenDictionary_ParentNullable;
        }
      }
      if (multipleChildrenDictionary_Child.ParentWithDictionaryNullable is null) {
        if (parentWithDictionaryNullable is null) {
          //nothing to do
        } else {
          multipleChildrenDictionary_Child.ParentWithDictionaryNullable = parentWithDictionaryNullable;
          multipleChildrenDictionary_Child.ParentWithDictionaryNullable.AddToMultipleChildrenDictionary_Children(multipleChildrenDictionary_Child);
        }
      } else {
        if (parentWithDictionaryNullable is null) {
          if (multipleChildrenDictionary_Child.ParentWithDictionaryNullable!=MultipleChildrenDictionary_ParentNullable.NoMultipleChildrenDictionary_ParentNullable) {
            multipleChildrenDictionary_Child.ParentWithDictionaryNullable.RemoveFromMultipleChildrenDictionary_Children(multipleChildrenDictionary_Child);
          }
          multipleChildrenDictionary_Child.ParentWithDictionaryNullable = null;
        } else {
          if (multipleChildrenDictionary_Child.ParentWithDictionaryNullable!=MultipleChildrenDictionary_ParentNullable.NoMultipleChildrenDictionary_ParentNullable) {
            multipleChildrenDictionary_Child.ParentWithDictionaryNullable.RemoveFromMultipleChildrenDictionary_Children(multipleChildrenDictionary_Child);
          }
          multipleChildrenDictionary_Child.ParentWithDictionaryNullable = parentWithDictionaryNullable;
          multipleChildrenDictionary_Child.ParentWithDictionaryNullable.AddToMultipleChildrenDictionary_Children(multipleChildrenDictionary_Child);
        }
      }
      multipleChildrenDictionary_Child.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes MultipleChildrenDictionary_Child from DC.Data.MultipleChildrenDictionary_Children, 
    /// disconnects MultipleChildrenDictionary_Child from MultipleChildrenDictionary_Parent because of ParentWithDictionary and 
    /// disconnects MultipleChildrenDictionary_Child from MultipleChildrenDictionary_ParentNullable because of ParentWithDictionaryNullable.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"MultipleChildrenDictionary_Child.Remove(): MultipleChildrenDictionary_Child 'Class MultipleChildrenDictionary_Child' is not stored in DC.Data, key is {Key}.");
      }
      onRemove();
      DC.Data.MultipleChildrenDictionary_Children.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Disconnects MultipleChildrenDictionary_Child from MultipleChildrenDictionary_Parent because of ParentWithDictionary and 
    /// disconnects MultipleChildrenDictionary_Child from MultipleChildrenDictionary_ParentNullable because of ParentWithDictionaryNullable.
    /// </summary>
    internal static void Disconnect(MultipleChildrenDictionary_Child multipleChildrenDictionary_Child) {
      if (multipleChildrenDictionary_Child.ParentWithDictionary!=MultipleChildrenDictionary_Parent.NoMultipleChildrenDictionary_Parent) {
        multipleChildrenDictionary_Child.ParentWithDictionary.RemoveFromMultipleChildrenDictionary_Children(multipleChildrenDictionary_Child);
      }
      if (multipleChildrenDictionary_Child.ParentWithDictionaryNullable!=null && multipleChildrenDictionary_Child.ParentWithDictionaryNullable!=MultipleChildrenDictionary_ParentNullable.NoMultipleChildrenDictionary_ParentNullable) {
        multipleChildrenDictionary_Child.ParentWithDictionaryNullable.RemoveFromMultipleChildrenDictionary_Children(multipleChildrenDictionary_Child);
      }
    }


    /// <summary>
    /// Removes multipleChildrenDictionary_ParentNullable from ParentWithDictionaryNullable
    /// </summary>
    internal void RemoveParentWithDictionaryNullable(MultipleChildrenDictionary_ParentNullable multipleChildrenDictionary_ParentNullable) {
      if (multipleChildrenDictionary_ParentNullable!=ParentWithDictionaryNullable) throw new Exception();
      ParentWithDictionaryNullable = null;
      HasChanged?.Invoke(this);
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {DateKey.ToShortDateString()}," +
        $" {Text}," +
        $" {ParentWithDictionary.ToShortString()}," +
        $" {ParentWithDictionaryNullable?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" DateKey: {DateKey.ToShortDateString()}," +
        $" Text: {Text}," +
        $" ParentWithDictionary: {ParentWithDictionary.ToShortString()}," +
        $" ParentWithDictionaryNullable: {ParentWithDictionaryNullable?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }


  #region MultipleChildrenDictionary_ChildWriter
  //      --------------------------------------

  /// <summary>
  /// Writes a CSV file containing records which can be read back as MultipleChildrenDictionary_Child. Note that the keys of linked objects
  /// need to be provided in Write(), since the data context will not be involved.
  /// </summary>
  public class MultipleChildrenDictionary_ChildWriter: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvWriter csvWriter;
    int lastKey = int.MinValue;


    /// <summary>
    /// Constructor, will write the MultipleChildrenDictionary_Child header line into the CSV file. Dispose MultipleChildrenDictionary_ChildWriter once done.
    /// </summary>
    public MultipleChildrenDictionary_ChildWriter(string? fileNamePath, CsvConfig csvConfig, int maxLineCharLenght) {
      this.csvConfig = csvConfig;
      csvWriter = new CsvWriter(fileNamePath, csvConfig, maxLineCharLenght, null, 0);
      var csvHeaderString = Csv.ToCsvHeaderString(MultipleChildrenDictionary_Child.Headers, csvConfig.Delimiter);
      csvWriter.WriteLine(csvHeaderString);
    }


    /// <summary>
    /// Writes the details of one MultipleChildrenDictionary_Child to the CSV file
    /// </summary>
    public void Write(
      int key, 
      DateTime dateKey, 
      string text, 
      int parentWithDictionaryKey, 
      int? parentWithDictionaryNullableKey)
    {
      if (key<0) {
        throw new Exception($"MultipleChildrenDictionary_Child's key {key} needs to be greater equal 0.");
      }
      if (key<=lastKey) {
        throw new Exception($"MultipleChildrenDictionary_Child's key {key} must be greater than the last written MultipleChildrenDictionary_Child's key {lastKey}.");
      }
      lastKey = key;
      csvWriter.WriteFirstLineChar(csvConfig.LineCharAdd);
      csvWriter.Write(key);
      csvWriter.WriteDate(dateKey);
      csvWriter.Write(text);
      if (parentWithDictionaryKey<0) throw new Exception($"Cannot write multipleChildrenDictionary_Child to CSV File, because ParentWithDictionary is not stored in DC.Data.MultipleChildrenDictionary_Parents.");

      csvWriter.Write(parentWithDictionaryKey.ToString());
      if (parentWithDictionaryNullableKey is null) {
        csvWriter.WriteNull();
      } else {
        if (parentWithDictionaryNullableKey<0) throw new Exception($"Cannot write multipleChildrenDictionary_Child to CSV File, because ParentWithDictionaryNullable is not stored in DC.Data.MultipleChildrenDictionary_ParentNullables.");

        csvWriter.Write(parentWithDictionaryNullableKey.ToString());
      }
      csvWriter.WriteEndOfLine();
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of MultipleChildrenDictionary_ChildWriter exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is MultipleChildrenDictionary_ChildWriter already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvWriter.Dispose();
    }
    #endregion
  }
  #endregion
}
