//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into CreateOnlyParentChangeableChild_Child.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageDataContext  {


    /// <summary>
    /// Example of an updatable and deletable Child, i.e. the child's properties can change.Therefore it 
    /// can be removed from parent and assigned to another parent.
    /// </summary>
  public partial class CreateOnlyParentChangeableChild_Child: IStorageItemGeneric<CreateOnlyParentChangeableChild_Child> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for CreateOnlyParentChangeableChild_Child. Gets set once CreateOnlyParentChangeableChild_Child gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem createOnlyParentChangeableChild_Child, int key) {
      ((CreateOnlyParentChangeableChild_Child)createOnlyParentChangeableChild_Child).Key = key;
    }


    /// <summary>
    /// Readonly Text
    /// </summary>
    public string ReadonlyText { get; }


    /// <summary>
    /// Updatable Text
    /// </summary>
    public string UpdatableText { get; private set; }


    /// <summary>
    /// Parent
    /// </summary>
    public CreateOnlyParentChangeableChild_Parent Parent { get; private set; }


    /// <summary>
    /// Parent
    /// </summary>          
    public CreateOnlyParentChangeableChild_ParentNullable? ParentNullable { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "ReadonlyText", "UpdatableText", "Parent", "ParentNullable"};


    /// <summary>
    /// None existing CreateOnlyParentChangeableChild_Child
    /// </summary>
    internal static CreateOnlyParentChangeableChild_Child NoCreateOnlyParentChangeableChild_Child = new CreateOnlyParentChangeableChild_Child("NoReadonlyText", "NoUpdatableText", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of CreateOnlyParentChangeableChild_Child has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/CreateOnlyParentChangeableChild_Child, /*new*/CreateOnlyParentChangeableChild_Child>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// CreateOnlyParentChangeableChild_Child Constructor. If isStoring is true, adds CreateOnlyParentChangeableChild_Child to DC.Data.CreateOnlyParentChangeableChild_Children, 
    /// adds CreateOnlyParentChangeableChild_Child to createOnlyParentChangeableChild_Parent.CreateOnlyParentChangeableChild_Children
    /// and if there is a ParentNullable adds CreateOnlyParentChangeableChild_Child to createOnlyParentChangeableChild_ParentNullable.CreateOnlyParentChangeableChild_Children.
    /// </summary>
    public CreateOnlyParentChangeableChild_Child(
      string readonlyText, 
      string updatableText, 
      CreateOnlyParentChangeableChild_Parent parent, 
      CreateOnlyParentChangeableChild_ParentNullable? parentNullable, 
      bool isStoring = true)
    {
      Key = StorageExtensions.NoKey;
      ReadonlyText = readonlyText;
      UpdatableText = updatableText;
      Parent = parent;
      ParentNullable = parentNullable;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public CreateOnlyParentChangeableChild_Child(CreateOnlyParentChangeableChild_Child original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      ReadonlyText = original.ReadonlyText;
      UpdatableText = original.UpdatableText;
      Parent = original.Parent;
      ParentNullable = original.ParentNullable;
      onCloned(this);
    }
    partial void onCloned(CreateOnlyParentChangeableChild_Child clone);


    /// <summary>
    /// Constructor for CreateOnlyParentChangeableChild_Child read from CSV file
    /// </summary>
    private CreateOnlyParentChangeableChild_Child(int key, CsvReader csvReader){
      Key = key;
      ReadonlyText = csvReader.ReadString();
      UpdatableText = csvReader.ReadString();
      var createOnlyParentChangeableChild_ParentKey = csvReader.ReadInt();
      if (DC.Data.CreateOnlyParentChangeableChild_Parents.TryGetValue(createOnlyParentChangeableChild_ParentKey, out var parent)) {
          Parent = parent;
      } else {
        throw new Exception($"Read CreateOnlyParentChangeableChild_Child from CSV file: Cannot find Parent with key {createOnlyParentChangeableChild_ParentKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      }
      var parentNullableKey = csvReader.ReadIntNull();
      if (parentNullableKey.HasValue) {
        if (DC.Data.CreateOnlyParentChangeableChild_ParentNullables.TryGetValue(parentNullableKey.Value, out var parentNullable)) {
          ParentNullable = parentNullable;
        } else {
          ParentNullable = CreateOnlyParentChangeableChild_ParentNullable.NoCreateOnlyParentChangeableChild_ParentNullable;
        }
      }
      if (Parent!=CreateOnlyParentChangeableChild_Parent.NoCreateOnlyParentChangeableChild_Parent) {
        Parent.AddToCreateOnlyParentChangeableChild_Children(this);
      }
      if (parentNullableKey.HasValue && ParentNullable!=CreateOnlyParentChangeableChild_ParentNullable.NoCreateOnlyParentChangeableChild_ParentNullable) {
        ParentNullable!.AddToCreateOnlyParentChangeableChild_Children(this);
      }
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New CreateOnlyParentChangeableChild_Child read from CSV file
    /// </summary>
    internal static CreateOnlyParentChangeableChild_Child Create(int key, CsvReader csvReader) {
      return new CreateOnlyParentChangeableChild_Child(key, csvReader);
    }


    /// <summary>
    /// Verify that createOnlyParentChangeableChild_Child.Parent exists.
    /// Verify that createOnlyParentChangeableChild_Child.ParentNullable exists.
    /// </summary>
    internal static bool Verify(CreateOnlyParentChangeableChild_Child createOnlyParentChangeableChild_Child) {
      if (createOnlyParentChangeableChild_Child.Parent==CreateOnlyParentChangeableChild_Parent.NoCreateOnlyParentChangeableChild_Parent) return false;
      if (createOnlyParentChangeableChild_Child.ParentNullable==CreateOnlyParentChangeableChild_ParentNullable.NoCreateOnlyParentChangeableChild_ParentNullable) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds CreateOnlyParentChangeableChild_Child to DC.Data.CreateOnlyParentChangeableChild_Children, CreateOnlyParentChangeableChild_Parent and CreateOnlyParentChangeableChild_ParentNullable. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"CreateOnlyParentChangeableChild_Child cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      if (Parent.Key<0) {
        throw new Exception($"CreateOnlyParentChangeableChild_Child cannot be stored in DC.Data, Parent is missing or not stored yet." + Environment.NewLine + ToString());
      }
      if (ParentNullable!=null && ParentNullable.Key<0) {
        throw new Exception($"CreateOnlyParentChangeableChild_Child cannot be stored in DC.Data, ParentNullable is not stored yet." + Environment.NewLine + ToString());
      }
      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data.CreateOnlyParentChangeableChild_Children.Add(this);
      Parent.AddToCreateOnlyParentChangeableChild_Children(this);
      ParentNullable?.AddToCreateOnlyParentChangeableChild_Children(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write CreateOnlyParentChangeableChild_Child to CSV file
    /// </summary>
    public const int EstimatedLineLength = 300;


    /// <summary>
    /// Write CreateOnlyParentChangeableChild_Child to CSV file
    /// </summary>
    internal static void Write(CreateOnlyParentChangeableChild_Child createOnlyParentChangeableChild_Child, CsvWriter csvWriter) {
      createOnlyParentChangeableChild_Child.onCsvWrite();
      csvWriter.Write(createOnlyParentChangeableChild_Child.ReadonlyText);
      csvWriter.Write(createOnlyParentChangeableChild_Child.UpdatableText);
      if (createOnlyParentChangeableChild_Child.Parent.Key<0) throw new Exception($"Cannot write createOnlyParentChangeableChild_Child '{createOnlyParentChangeableChild_Child}' to CSV File, because Parent is not stored in DC.Data.CreateOnlyParentChangeableChild_Parents.");

      csvWriter.Write(createOnlyParentChangeableChild_Child.Parent.Key.ToString());
      if (createOnlyParentChangeableChild_Child.ParentNullable is null) {
        csvWriter.WriteNull();
      } else {
        if (createOnlyParentChangeableChild_Child.ParentNullable.Key<0) throw new Exception($"Cannot write createOnlyParentChangeableChild_Child '{createOnlyParentChangeableChild_Child}' to CSV File, because ParentNullable is not stored in DC.Data.CreateOnlyParentChangeableChild_ParentNullables.");

        csvWriter.Write(createOnlyParentChangeableChild_Child.ParentNullable.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates CreateOnlyParentChangeableChild_Child with the provided values
    /// </summary>
    public void Update(string updatableText, CreateOnlyParentChangeableChild_Parent parent, CreateOnlyParentChangeableChild_ParentNullable? parentNullable) {
      var clone = new CreateOnlyParentChangeableChild_Child(this);
      var isCancelled = false;
      onUpdating(updatableText, parent, parentNullable, ref isCancelled);
      if (isCancelled) return;

      var isChangeDetected = false;
      if (UpdatableText!=updatableText) {
        UpdatableText = updatableText;
        isChangeDetected = true;
      }
      if (Parent!=parent) {
        if (Key>=0) {
          Parent.RemoveFromCreateOnlyParentChangeableChild_Children(this);
        }
        Parent = parent;
        if (Key>=0) {
          Parent.AddToCreateOnlyParentChangeableChild_Children(this);
        }
        isChangeDetected = true;
      }
      if (ParentNullable is null) {
        if (parentNullable is null) {
          //nothing to do
        } else {
          ParentNullable = parentNullable;
          if (Key>=0) {
            ParentNullable.AddToCreateOnlyParentChangeableChild_Children(this);
          }
          isChangeDetected = true;
        }
      } else {
        if (parentNullable is null) {
          if (Key>=0) {
            ParentNullable.RemoveFromCreateOnlyParentChangeableChild_Children(this);
          }
          ParentNullable = null;
          isChangeDetected = true;
        } else {
          if (ParentNullable!=parentNullable) {
            if (Key>=0) {
              ParentNullable.RemoveFromCreateOnlyParentChangeableChild_Children(this);
            }
            ParentNullable = parentNullable;
            if (Key>=0) {
              ParentNullable.AddToCreateOnlyParentChangeableChild_Children(this);
            }
            isChangeDetected = true;
          }
        }
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data.CreateOnlyParentChangeableChild_Children.ItemHasChanged(clone, this);
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(string updatableText, CreateOnlyParentChangeableChild_Parent parent, CreateOnlyParentChangeableChild_ParentNullable? parentNullable, ref bool isCancelled);
    partial void onUpdated(CreateOnlyParentChangeableChild_Child old);


    /// <summary>
    /// Updates this CreateOnlyParentChangeableChild_Child with values from CSV file
    /// </summary>
    internal static void Update(CreateOnlyParentChangeableChild_Child createOnlyParentChangeableChild_Child, CsvReader csvReader){
      var readonlyText = csvReader.ReadString();
      if (createOnlyParentChangeableChild_Child.ReadonlyText!=readonlyText) {
        throw new Exception($"CreateOnlyParentChangeableChild_Child.Update(): Property ReadonlyText '{createOnlyParentChangeableChild_Child.ReadonlyText}' is " +
          $"readonly, readonlyText '{readonlyText}' read from the CSV file should be the same." + Environment.NewLine + 
          createOnlyParentChangeableChild_Child.ToString());
      }
      createOnlyParentChangeableChild_Child.UpdatableText = csvReader.ReadString();
      if (!DC.Data.CreateOnlyParentChangeableChild_Parents.TryGetValue(csvReader.ReadInt(), out var parent)) {
        parent = CreateOnlyParentChangeableChild_Parent.NoCreateOnlyParentChangeableChild_Parent;
      }
      if (createOnlyParentChangeableChild_Child.Parent!=parent) {
        if (createOnlyParentChangeableChild_Child.Parent!=CreateOnlyParentChangeableChild_Parent.NoCreateOnlyParentChangeableChild_Parent) {
          createOnlyParentChangeableChild_Child.Parent.RemoveFromCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_Child);
        }
        createOnlyParentChangeableChild_Child.Parent = parent;
        createOnlyParentChangeableChild_Child.Parent.AddToCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_Child);
      }
      var parentNullableKey = csvReader.ReadIntNull();
      CreateOnlyParentChangeableChild_ParentNullable? parentNullable;
      if (parentNullableKey is null) {
        parentNullable = null;
      } else {
        if (!DC.Data.CreateOnlyParentChangeableChild_ParentNullables.TryGetValue(parentNullableKey.Value, out parentNullable)) {
          parentNullable = CreateOnlyParentChangeableChild_ParentNullable.NoCreateOnlyParentChangeableChild_ParentNullable;
        }
      }
      if (createOnlyParentChangeableChild_Child.ParentNullable is null) {
        if (parentNullable is null) {
          //nothing to do
        } else {
          createOnlyParentChangeableChild_Child.ParentNullable = parentNullable;
          createOnlyParentChangeableChild_Child.ParentNullable.AddToCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_Child);
        }
      } else {
        if (parentNullable is null) {
          if (createOnlyParentChangeableChild_Child.ParentNullable!=CreateOnlyParentChangeableChild_ParentNullable.NoCreateOnlyParentChangeableChild_ParentNullable) {
            createOnlyParentChangeableChild_Child.ParentNullable.RemoveFromCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_Child);
          }
          createOnlyParentChangeableChild_Child.ParentNullable = null;
        } else {
          if (createOnlyParentChangeableChild_Child.ParentNullable!=CreateOnlyParentChangeableChild_ParentNullable.NoCreateOnlyParentChangeableChild_ParentNullable) {
            createOnlyParentChangeableChild_Child.ParentNullable.RemoveFromCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_Child);
          }
          createOnlyParentChangeableChild_Child.ParentNullable = parentNullable;
          createOnlyParentChangeableChild_Child.ParentNullable.AddToCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_Child);
        }
      }
      createOnlyParentChangeableChild_Child.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes CreateOnlyParentChangeableChild_Child from DC.Data.CreateOnlyParentChangeableChild_Children, 
    /// disconnects CreateOnlyParentChangeableChild_Child from CreateOnlyParentChangeableChild_Parent because of Parent and 
    /// disconnects CreateOnlyParentChangeableChild_Child from CreateOnlyParentChangeableChild_ParentNullable because of ParentNullable.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"CreateOnlyParentChangeableChild_Child.Remove(): CreateOnlyParentChangeableChild_Child 'Class CreateOnlyParentChangeableChild_Child' is not stored in DC.Data, key is {Key}.");
      }
      onRemove();
      DC.Data.CreateOnlyParentChangeableChild_Children.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Disconnects CreateOnlyParentChangeableChild_Child from CreateOnlyParentChangeableChild_Parent because of Parent and 
    /// disconnects CreateOnlyParentChangeableChild_Child from CreateOnlyParentChangeableChild_ParentNullable because of ParentNullable.
    /// </summary>
    internal static void Disconnect(CreateOnlyParentChangeableChild_Child createOnlyParentChangeableChild_Child) {
      if (createOnlyParentChangeableChild_Child.Parent!=CreateOnlyParentChangeableChild_Parent.NoCreateOnlyParentChangeableChild_Parent) {
        createOnlyParentChangeableChild_Child.Parent.RemoveFromCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_Child);
      }
      if (createOnlyParentChangeableChild_Child.ParentNullable!=null && createOnlyParentChangeableChild_Child.ParentNullable!=CreateOnlyParentChangeableChild_ParentNullable.NoCreateOnlyParentChangeableChild_ParentNullable) {
        createOnlyParentChangeableChild_Child.ParentNullable.RemoveFromCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_Child);
      }
    }


    /// <summary>
    /// Removes createOnlyParentChangeableChild_ParentNullable from ParentNullable
    /// </summary>
    internal void RemoveParentNullable(CreateOnlyParentChangeableChild_ParentNullable createOnlyParentChangeableChild_ParentNullable) {
      if (createOnlyParentChangeableChild_ParentNullable!=ParentNullable) throw new Exception();

      var clone = new CreateOnlyParentChangeableChild_Child(this);
      ParentNullable = null;
      HasChanged?.Invoke(clone, this);
    }


    /// <summary>
    /// Removes CreateOnlyParentChangeableChild_Child from possible parents as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var createOnlyParentChangeableChild_Child = (CreateOnlyParentChangeableChild_Child) item;
      if (createOnlyParentChangeableChild_Child.Parent!=CreateOnlyParentChangeableChild_Parent.NoCreateOnlyParentChangeableChild_Parent) {
        createOnlyParentChangeableChild_Child.Parent.RemoveFromCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_Child);
      }
      if (createOnlyParentChangeableChild_Child.ParentNullable!=null && createOnlyParentChangeableChild_Child.ParentNullable!=CreateOnlyParentChangeableChild_ParentNullable.NoCreateOnlyParentChangeableChild_ParentNullable) {
        createOnlyParentChangeableChild_Child.ParentNullable.RemoveFromCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_Child);
      }
      createOnlyParentChangeableChild_Child.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the CreateOnlyParentChangeableChild_Child item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldItem, IStorageItem newItem) {
      var createOnlyParentChangeableChild_ChildOld = (CreateOnlyParentChangeableChild_Child) oldItem;
      var createOnlyParentChangeableChild_ChildNew = (CreateOnlyParentChangeableChild_Child) newItem;
      if (createOnlyParentChangeableChild_ChildNew.ReadonlyText!=createOnlyParentChangeableChild_ChildOld.ReadonlyText) {
        throw new Exception($"CreateOnlyParentChangeableChild_Child.Update(): Property ReadonlyText '{createOnlyParentChangeableChild_ChildNew.ReadonlyText}' is " +
          $"readonly, ReadonlyText '{createOnlyParentChangeableChild_ChildOld.ReadonlyText}' read from the CSV file should be the same." + Environment.NewLine + 
          createOnlyParentChangeableChild_ChildNew.ToString());
      }
      createOnlyParentChangeableChild_ChildNew.UpdatableText = createOnlyParentChangeableChild_ChildOld.UpdatableText;
      if (createOnlyParentChangeableChild_ChildNew.Parent!=createOnlyParentChangeableChild_ChildOld.Parent) {
        if (createOnlyParentChangeableChild_ChildNew.Parent!=CreateOnlyParentChangeableChild_Parent.NoCreateOnlyParentChangeableChild_Parent) {
          createOnlyParentChangeableChild_ChildNew.Parent.RemoveFromCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_ChildNew);
        }
        createOnlyParentChangeableChild_ChildNew.Parent = createOnlyParentChangeableChild_ChildOld.Parent;
        createOnlyParentChangeableChild_ChildNew.Parent.AddToCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_ChildNew);
      }
      if (createOnlyParentChangeableChild_ChildNew.ParentNullable is null) {
        if (createOnlyParentChangeableChild_ChildOld.ParentNullable is null) {
          //nothing to do
        } else {
          createOnlyParentChangeableChild_ChildNew.ParentNullable = createOnlyParentChangeableChild_ChildOld.ParentNullable;
          createOnlyParentChangeableChild_ChildNew.ParentNullable.AddToCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_ChildNew);
        }
      } else {
        if (createOnlyParentChangeableChild_ChildOld.ParentNullable is null) {
          if (createOnlyParentChangeableChild_ChildNew.ParentNullable!=CreateOnlyParentChangeableChild_ParentNullable.NoCreateOnlyParentChangeableChild_ParentNullable) {
            createOnlyParentChangeableChild_ChildNew.ParentNullable.RemoveFromCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_ChildNew);
          }
          createOnlyParentChangeableChild_ChildNew.ParentNullable = null;
        } else {
          if (createOnlyParentChangeableChild_ChildNew.ParentNullable!=CreateOnlyParentChangeableChild_ParentNullable.NoCreateOnlyParentChangeableChild_ParentNullable) {
            createOnlyParentChangeableChild_ChildNew.ParentNullable.RemoveFromCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_ChildNew);
          }
          createOnlyParentChangeableChild_ChildNew.ParentNullable = createOnlyParentChangeableChild_ChildOld.ParentNullable;
          createOnlyParentChangeableChild_ChildNew.ParentNullable.AddToCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_ChildNew);
        }
      }
      createOnlyParentChangeableChild_ChildNew.onRollbackItemUpdated(createOnlyParentChangeableChild_ChildOld);
    }
    partial void onRollbackItemUpdated(CreateOnlyParentChangeableChild_Child oldCreateOnlyParentChangeableChild_Child);


    /// <summary>
    /// Adds CreateOnlyParentChangeableChild_Child item to possible parents again as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemRemove(IStorageItem item) {
      var createOnlyParentChangeableChild_Child = (CreateOnlyParentChangeableChild_Child) item;
      createOnlyParentChangeableChild_Child.Parent.AddToCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_Child);
      createOnlyParentChangeableChild_Child.ParentNullable?.AddToCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_Child);
      createOnlyParentChangeableChild_Child.onRollbackItemRemoved();
    }
    partial void onRollbackItemRemoved();


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {ReadonlyText}," +
        $" {UpdatableText}," +
        $" {Parent.ToShortString()}," +
        $" {ParentNullable?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" ReadonlyText: {ReadonlyText}," +
        $" UpdatableText: {UpdatableText}," +
        $" Parent: {Parent.ToShortString()}," +
        $" ParentNullable: {ParentNullable?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
