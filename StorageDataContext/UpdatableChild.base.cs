//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into UpdatableChild.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// Example of a "readonly" Child, i.e. the child's properties will not change and once it is added to its parent
    /// and therefore it also cannot be removed from parent, because the Parent property of the child cannot be changed
    /// either.
    /// </summary>
  public partial class UpdatableChild: IStorage<UpdatableChild> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for UpdatableChild. Gets set once UpdatableChild gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(UpdatableChild updatableChild, int key) { updatableChild.Key = key; }


    /// <summary>
    /// Readonly Text, because class is not updatable
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Parent
    /// </summary>
    public ReadOnlyParent2 ReadOnlyParent2 { get; private set; }


    /// <summary>
    /// Parent
    /// </summary>          
    public ReadOnlyParent2Nullable? ReadOnlyParent2Nullable { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Text", "ReadOnlyParent2", "ReadOnlyParent2Nullable"};


    /// <summary>
    /// None existing UpdatableChild
    /// </summary>
    internal static UpdatableChild NoUpdatableChild = new UpdatableChild("NoText", ReadOnlyParent2.NoReadOnlyParent2, null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of UpdatableChild has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action<UpdatableChild>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// UpdatableChild Constructor. If isStoring is true, adds UpdatableChild to DC.Data.UpdatableChildren, 
    /// adds UpdatableChild to readOnlyParent2.UpdatableChildren
    /// and if there is a ReadOnlyParent2Nullable adds UpdatableChild to readOnlyParent2Nullable.UpdatableChildren.
    /// </summary>
    public UpdatableChild(string text, ReadOnlyParent2 readOnlyParent2, ReadOnlyParent2Nullable? readOnlyParent2Nullable, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      ReadOnlyParent2 = readOnlyParent2;
      ReadOnlyParent2Nullable = readOnlyParent2Nullable;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for UpdatableChild read from CSV file
    /// </summary>
    private UpdatableChild(int key, CsvReader csvReader, DC context) {
      Key = key;
      Text = csvReader.ReadString();
      var readOnlyParent2Key = csvReader.ReadInt();
      if (context.ReadOnlyParent2s.TryGetValue(readOnlyParent2Key, out var readOnlyParent2)) {
          ReadOnlyParent2 = readOnlyParent2;
      } else {
        throw new Exception($"Read UpdatableChild from CSV file: Cannot find ReadOnlyParent2 with key {readOnlyParent2Key}." + Environment.NewLine + 
          csvReader.PresentContent);
      }
      var readOnlyParent2NullableKey = csvReader.ReadIntNull();
      if (readOnlyParent2NullableKey.HasValue) {
        if (context.ReadOnlyParent2Nullables.TryGetValue(readOnlyParent2NullableKey.Value, out var readOnlyParent2Nullable)) {
          ReadOnlyParent2Nullable = readOnlyParent2Nullable;
        } else {
          ReadOnlyParent2Nullable = ReadOnlyParent2Nullable.NoReadOnlyParent2Nullable;
        }
      }
      if (ReadOnlyParent2!=ReadOnlyParent2.NoReadOnlyParent2) {
        ReadOnlyParent2.AddToUpdatableChildren(this);
      }
      if (readOnlyParent2NullableKey.HasValue && ReadOnlyParent2Nullable!=ReadOnlyParent2Nullable.NoReadOnlyParent2Nullable) {
        ReadOnlyParent2Nullable!.AddToUpdatableChildren(this);
      }
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DC context);


    /// <summary>
    /// New UpdatableChild read from CSV file
    /// </summary>
    internal static UpdatableChild Create(int key, CsvReader csvReader, DC context) {
      return new UpdatableChild(key, csvReader, context);
    }


    /// <summary>
    /// Verify that updatableChild.ReadOnlyParent2 exists.
    /// Verify that updatableChild.ReadOnlyParent2Nullable exists.
    /// </summary>
    internal static bool Verify(UpdatableChild updatableChild) {
      if (updatableChild.ReadOnlyParent2==ReadOnlyParent2.NoReadOnlyParent2) return false;
      if (updatableChild.ReadOnlyParent2Nullable==ReadOnlyParent2Nullable.NoReadOnlyParent2Nullable) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds UpdatableChild to DC.Data.UpdatableChildren, ReadOnlyParent2.UpdatableChildren and ReadOnlyParent2Nullable.UpdatableChildren. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"UpdatableChild can not be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      if (ReadOnlyParent2.Key<0) {
        throw new Exception($"UpdatableChild can not be stored in DC.Data, ReadOnlyParent2 is missing or not stored yet." + Environment.NewLine + ToString());
      }
      if (ReadOnlyParent2Nullable!=null && ReadOnlyParent2Nullable.Key<0) {
        throw new Exception($"UpdatableChild can not be stored in DC.Data, ReadOnlyParent2Nullable is not stored yet." + Environment.NewLine + ToString());
      }
      onStore();
      DC.Data.UpdatableChildren.Add(this);
      ReadOnlyParent2.AddToUpdatableChildren(this);
      ReadOnlyParent2Nullable?.AddToUpdatableChildren(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write UpdatableChild to CSV file
    /// </summary>
    public const int MaxLineLength = 150;


    /// <summary>
    /// Write UpdatableChild to CSV file
    /// </summary>
    internal static void Write(UpdatableChild updatableChild, CsvWriter csvWriter) {
      updatableChild.onCsvWrite();
      csvWriter.Write(updatableChild.Text);
      if (updatableChild.ReadOnlyParent2.Key<0) throw new Exception($"Cannot write updatableChild '{updatableChild}' to CSV File, because ReadOnlyParent2 is not stored in DC.Data.ReadOnlyParent2s.");

      csvWriter.Write(updatableChild.ReadOnlyParent2.Key.ToString());
      if (updatableChild.ReadOnlyParent2Nullable is null) {
        csvWriter.WriteNull();
      } else {
        if (updatableChild.ReadOnlyParent2Nullable.Key<0) throw new Exception($"Cannot write updatableChild '{updatableChild}' to CSV File, because ReadOnlyParent2Nullable is not stored in DC.Data.ReadOnlyParent2Nullables.");

        csvWriter.Write(updatableChild.ReadOnlyParent2Nullable.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates UpdatableChild with the provided values
    /// </summary>
    public void Update(string text, ReadOnlyParent2 readOnlyParent2, ReadOnlyParent2Nullable? readOnlyParent2Nullable) {
      var isCancelled = false;
      onUpdating(text, readOnlyParent2, readOnlyParent2Nullable, ref isCancelled);
      if (isCancelled) return;

      var isChangeDetected = false;
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (ReadOnlyParent2!=readOnlyParent2) {
        ReadOnlyParent2.RemoveFromUpdatableChildren(this);
        ReadOnlyParent2 = readOnlyParent2;
        ReadOnlyParent2.AddToUpdatableChildren(this);
        isChangeDetected = true;
      }
      if (ReadOnlyParent2Nullable is null) {
        if (readOnlyParent2Nullable is null) {
          //nothing to do
        } else {
          ReadOnlyParent2Nullable = readOnlyParent2Nullable;
          ReadOnlyParent2Nullable.AddToUpdatableChildren(this);
          isChangeDetected = true;
        }
      } else {
        if (readOnlyParent2Nullable is null) {
          ReadOnlyParent2Nullable.RemoveFromUpdatableChildren(this);
          ReadOnlyParent2Nullable = null;
          isChangeDetected = true;
        } else {
          if (ReadOnlyParent2Nullable!=readOnlyParent2Nullable) {
            ReadOnlyParent2Nullable.RemoveFromUpdatableChildren(this);
            ReadOnlyParent2Nullable = readOnlyParent2Nullable;
            ReadOnlyParent2Nullable.AddToUpdatableChildren(this);
            isChangeDetected = true;
          }
        }
      }
      if (isChangeDetected) {
        onUpdated();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdating(string text, ReadOnlyParent2 readOnlyParent2, ReadOnlyParent2Nullable? readOnlyParent2Nullable, ref bool isCancelled);
    partial void onUpdated();


    /// <summary>
    /// Updates this UpdatableChild with values from CSV file
    /// </summary>
    internal static void Update(UpdatableChild updatableChild, CsvReader csvReader, DC context) {
      updatableChild.Text = csvReader.ReadString();
      if (!context.ReadOnlyParent2s.TryGetValue(csvReader.ReadInt(), out var readOnlyParent2)) {
        readOnlyParent2 = ReadOnlyParent2.NoReadOnlyParent2;
      }
      if (updatableChild.ReadOnlyParent2!=readOnlyParent2) {
        if (updatableChild.ReadOnlyParent2!=ReadOnlyParent2.NoReadOnlyParent2) {
          updatableChild.ReadOnlyParent2.RemoveFromUpdatableChildren(updatableChild);
        }
        updatableChild.ReadOnlyParent2 = readOnlyParent2;
        updatableChild.ReadOnlyParent2.AddToUpdatableChildren(updatableChild);
      }
      var readOnlyParent2NullableKey = csvReader.ReadIntNull();
      ReadOnlyParent2Nullable? readOnlyParent2Nullable;
      if (readOnlyParent2NullableKey is null) {
        readOnlyParent2Nullable = null;
      } else {
        if (!context.ReadOnlyParent2Nullables.TryGetValue(readOnlyParent2NullableKey.Value, out readOnlyParent2Nullable)) {
          readOnlyParent2Nullable = ReadOnlyParent2Nullable.NoReadOnlyParent2Nullable;
        }
      }
      if (updatableChild.ReadOnlyParent2Nullable is null) {
        if (readOnlyParent2Nullable is null) {
          //nothing to do
        } else {
          updatableChild.ReadOnlyParent2Nullable = readOnlyParent2Nullable;
          updatableChild.ReadOnlyParent2Nullable.AddToUpdatableChildren(updatableChild);
        }
      } else {
        if (readOnlyParent2Nullable is null) {
          if (updatableChild.ReadOnlyParent2Nullable!=ReadOnlyParent2Nullable.NoReadOnlyParent2Nullable) {
            updatableChild.ReadOnlyParent2Nullable.RemoveFromUpdatableChildren(updatableChild);
          }
          updatableChild.ReadOnlyParent2Nullable = null;
        } else {
          if (updatableChild.ReadOnlyParent2Nullable!=ReadOnlyParent2Nullable.NoReadOnlyParent2Nullable) {
            updatableChild.ReadOnlyParent2Nullable.RemoveFromUpdatableChildren(updatableChild);
          }
          updatableChild.ReadOnlyParent2Nullable = readOnlyParent2Nullable;
          updatableChild.ReadOnlyParent2Nullable.AddToUpdatableChildren(updatableChild);
        }
      }
      updatableChild.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removing UpdatableChild from DC.Data.UpdatableChildren is not supported.
    /// </summary>
    public void Remove() {
      throw new NotSupportedException("StorageClass attribute AreInstancesDeletable is false.");
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}," +
        $" {ReadOnlyParent2.ToShortString()}," +
        $" {ReadOnlyParent2Nullable?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" ReadOnlyParent2: {ReadOnlyParent2.ToShortString()}," +
        $" ReadOnlyParent2Nullable: {ReadOnlyParent2Nullable?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }


  #region UpdatableChildWriter
  //      --------------------

  /// <summary>
  /// Writes a CSV file containing records which can be read back as UpdatableChild. Note that the keys of linked objects
  /// need to be provided in Write(), since the data context will not be involved.
  /// </summary>
  public class UpdatableChildWriter: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvWriter csvWriter;
    int lastKey = int.MinValue;


    /// <summary>
    /// Constructor, will write the UpdatableChild header line into the CSV file. Dispose UpdatableChildWriter once done.
    /// </summary>
    public UpdatableChildWriter(string? fileNamePath, CsvConfig csvConfig, int maxLineCharLenght) {
      this.csvConfig = csvConfig;
      csvWriter = new CsvWriter(fileNamePath, csvConfig, maxLineCharLenght, null, 0);
      var csvHeaderString = Csv.ToCsvHeaderString(UpdatableChild.Headers, csvConfig.Delimiter);
      csvWriter.WriteLine(csvHeaderString);
    }


    /// <summary>
    /// Writes the details of one UpdatableChild to the CSV file
    /// </summary>
    public void Write(int key, string text, int readOnlyParent2Key, int? readOnlyParent2NullableKey) {
      if (key<0) {
        throw new Exception($"UpdatableChild's key {key} needs to be greater equal 0.");
      }
      if (key<=lastKey) {
        throw new Exception($"UpdatableChild's key {key} must be greater than the last written UpdatableChild's key {lastKey}.");
      }
      lastKey = key;
      csvWriter.WriteFirstLineChar(csvConfig.LineCharAdd);
      csvWriter.Write(key);
      csvWriter.Write(text);
      if (readOnlyParent2Key<0) throw new Exception($"Cannot write updatableChild to CSV File, because ReadOnlyParent2 is not stored in DC.Data.ReadOnlyParent2s.");

      csvWriter.Write(readOnlyParent2Key.ToString());
      if (readOnlyParent2NullableKey is null) {
        csvWriter.WriteNull();
      } else {
        if (readOnlyParent2NullableKey<0) throw new Exception($"Cannot write updatableChild to CSV File, because ReadOnlyParent2Nullable is not stored in DC.Data.ReadOnlyParent2Nullables.");

        csvWriter.Write(readOnlyParent2NullableKey.ToString());
      }
      csvWriter.WriteEndOfLine();
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of UpdatableChildWriter exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is UpdatableChildWriter already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvWriter.Dispose();
    }
    #endregion
  }
  #endregion
}
