//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ChildrenList_Parent.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Threading;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// Example of deletable parent using a List for its children. It can have only deletable children. The child must have a 
    /// parent (the child.Parent property is not nullable).
    /// </summary>
  public partial class ChildrenList_Parent: IStorage<ChildrenList_Parent> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ChildrenList_Parent. Gets set once ChildrenList_Parent gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(ChildrenList_Parent childrenList_Parent, int key) { childrenList_Parent.Key = key; }


    /// <summary>
    /// Some Text
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Deletable children which must have a parent
    /// </summary>
    public IReadOnlyList<ChildrenList_Child> ChildrenList_Children => childrenList_Children;
    readonly List<ChildrenList_Child> childrenList_Children;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Text"};


    /// <summary>
    /// None existing ChildrenList_Parent
    /// </summary>
    internal static ChildrenList_Parent NoChildrenList_Parent = new ChildrenList_Parent("NoText", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of ChildrenList_Parent has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action<ChildrenList_Parent>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ChildrenList_Parent Constructor. If isStoring is true, adds ChildrenList_Parent to DC.Data.ChildrenList_Parents.
    /// </summary>
    public ChildrenList_Parent(string text, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      childrenList_Children = new List<ChildrenList_Child>();
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for ChildrenList_Parent read from CSV file
    /// </summary>
    private ChildrenList_Parent(int key, CsvReader csvReader, DC context) {
      Key = key;
      Text = csvReader.ReadString();
      childrenList_Children = new List<ChildrenList_Child>();
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DC context);


    /// <summary>
    /// New ChildrenList_Parent read from CSV file
    /// </summary>
    internal static ChildrenList_Parent Create(int key, CsvReader csvReader, DC context) {
      return new ChildrenList_Parent(key, csvReader, context);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ChildrenList_Parent to DC.Data.ChildrenList_Parents. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ChildrenList_Parent cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data.ChildrenList_Parents.Add(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write ChildrenList_Parent to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write ChildrenList_Parent to CSV file
    /// </summary>
    internal static void Write(ChildrenList_Parent childrenList_Parent, CsvWriter csvWriter) {
      childrenList_Parent.onCsvWrite();
      csvWriter.Write(childrenList_Parent.Text);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates ChildrenList_Parent with the provided values
    /// </summary>
    public void Update(string text) {
      var isCancelled = false;
      onUpdating(text, ref isCancelled);
      if (isCancelled) return;

      var isChangeDetected = false;
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdating(string text, ref bool isCancelled);
    partial void onUpdated();


    /// <summary>
    /// Updates this ChildrenList_Parent with values from CSV file
    /// </summary>
    internal static void Update(ChildrenList_Parent childrenList_Parent, CsvReader csvReader, DC _) {
      childrenList_Parent.Text = csvReader.ReadString();
      childrenList_Parent.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Add childrenList_Child to ChildrenList_Children.
    /// </summary>
    internal void AddToChildrenList_Children(ChildrenList_Child childrenList_Child) {
      childrenList_Children.Add(childrenList_Child);
      onAddedToChildrenList_Children(childrenList_Child);
    }
    partial void onAddedToChildrenList_Children(ChildrenList_Child childrenList_Child);


    /// <summary>
    /// Removes childrenList_Child from ChildrenList_Parent.
    /// </summary>
    internal void RemoveFromChildrenList_Children(ChildrenList_Child childrenList_Child) {
#if DEBUG
      if (!childrenList_Children.Remove(childrenList_Child)) throw new Exception();
#else
        childrenList_Children.Remove(childrenList_Child);
#endif
      onRemovedFromChildrenList_Children(childrenList_Child);
    }
    partial void onRemovedFromChildrenList_Children(ChildrenList_Child childrenList_Child);


    /// <summary>
    /// Removes ChildrenList_Parent from DC.Data.ChildrenList_Parents and 
    /// deletes any ChildrenList_Child where ChildrenList_Child.Parent links to this ChildrenList_Parent.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"ChildrenList_Parent.Remove(): ChildrenList_Parent 'Class ChildrenList_Parent' is not stored in DC.Data, key is {Key}.");
      }
      onRemove();
      DC.Data.ChildrenList_Parents.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Deletes any ChildrenList_Child where ChildrenList_Child.Parent links to this ChildrenList_Parent.
    /// </summary>
    internal static void Disconnect(ChildrenList_Parent childrenList_Parent) {
      for (int childrenList_ChildIndex = childrenList_Parent.ChildrenList_Children.Count-1; childrenList_ChildIndex>= 0; childrenList_ChildIndex--) {
        var childrenList_Child = childrenList_Parent.ChildrenList_Children[childrenList_ChildIndex];
         if (childrenList_Child.Key>=0) {
           childrenList_Child.Remove();
         }
      }
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" ChildrenList_Children: {ChildrenList_Children.Count};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }


  #region ChildrenList_ParentRaw
  //      ----------------------

  /// <summary>
  /// ChildrenList_ParentRaw is used instead ChildrenList_Parent and DC.Data to read an instance from a CSV file with 
  /// ChildrenList_ParentReader or write with ChildrenList_ParentWriter.
  /// </summary>
  public class ChildrenList_ParentRaw {

    /// <summary>
    /// Unique identifier for ChildrenList_ParentRaw.
    /// </summary>
    public int Key { get; set; }


    /// <summary>
    /// Some Text
    /// </summary>
    public string Text { get; set; } ="";


    /// <summary>
    /// How was ChildrenList_ParentRaw marked in CSV file (read, update, delete) ? If not read from CSV file, RawState is new.
    /// </summary>
    public RawStateEnum RawState { get; set; }


    /// <summary>
    /// Default Constructor.
    /// </summary>
    public ChildrenList_ParentRaw() {
    }


    /// <summary>
    /// Constructor, will replace links to parents with the parents' key.
    /// </summary>
    public ChildrenList_ParentRaw(ChildrenList_Parent childrenList_Parent) {
      Key = childrenList_Parent.Key;
      Text = childrenList_Parent.Text;
    }


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text};";
      return returnString;
    }
  }
  #endregion


  #region ChildrenList_ParentReader
  //      -------------------------

  /// <summary>
  /// Reads from a CSV file containing ChildrenList_Parent instances. Note that the keys of linked objects will be returned 
  /// and not the linked objects themselves, since the data context will not be involved.
  /// </summary>
  public class ChildrenList_ParentReader: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvReader csvReader;


    /// <summary>
    /// Constructor, will read and verify the ChildrenList_Parent header line. You need to dispose ChildrenList_ParentReader once
    /// you are done, except when you have read the whole file, then ChildrenList_ParentReader.ReadLine() disposes automatically.
    /// </summary>
    public ChildrenList_ParentReader(string fileNamePath, CsvConfig csvConfig) {
      this.csvConfig = csvConfig;
      csvReader = new CsvReader(fileNamePath, csvConfig, ChildrenList_Parent.EstimatedLineLength);
      var csvHeaderString = Csv.ToCsvHeaderString(ChildrenList_Parent.Headers, csvConfig.Delimiter);
      var headerLine = csvReader.ReadLine();
      if (csvHeaderString!=headerLine) throw new Exception($"Error reading file {csvReader.FileName}{Environment.NewLine}'" +
        headerLine + "' should be '" + csvHeaderString + "'.");
    }


    /// <summary>
    /// Reads the details of one ChildrenList_Parent from the CSV file. Returns false when all lines are
    /// read and disposes the reader.
    /// </summary>
    public bool ReadLine([NotNullWhen(true)] out ChildrenList_ParentRaw? childrenList_ParentRaw){
      if (csvReader.IsEndOfFileReached()) {
        csvReader.Dispose();
        childrenList_ParentRaw = null;
        return false;
      }
      childrenList_ParentRaw = new ChildrenList_ParentRaw();
      var firstLineChar = csvReader.ReadFirstLineChar();
      if (firstLineChar==csvConfig.LineCharAdd) {
        childrenList_ParentRaw.RawState = RawStateEnum.Read;
      } else if (firstLineChar==csvConfig.LineCharUpdate) {
        childrenList_ParentRaw.RawState = RawStateEnum.Updated;
      } else if (firstLineChar==csvConfig.LineCharDelete) {
        childrenList_ParentRaw.RawState = RawStateEnum.Deleted;
      } else {
        throw new NotSupportedException($"Illegal first line character '{firstLineChar}' found in '{csvReader.GetPresentContent()}'.");
      }
      childrenList_ParentRaw.Key = csvReader.ReadInt();
      childrenList_ParentRaw.Text = csvReader.ReadString();
      csvReader.ReadEndOfLine();
      return true;
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of ChildrenList_ParentReader exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is ChildrenList_ParentReader already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvReader.Dispose();
    }
    #endregion
  }
  #endregion


  #region ChildrenList_ParentWriter
  //      -------------------------

  /// <summary>
  /// Writes a CSV file containing records which can be read back as ChildrenList_Parent. Note that the keys of linked objects
  /// need to be provided in Write(), since the data context will not be involved.
  /// </summary>
  public class ChildrenList_ParentWriter: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvWriter csvWriter;
    int lastKey = int.MinValue;


    /// <summary>
    /// Constructor, will write the ChildrenList_Parent header line into the CSV file. Dispose ChildrenList_ParentWriter once done.
    /// </summary>
    public ChildrenList_ParentWriter(string fileNamePath, CsvConfig csvConfig){
      this.csvConfig = csvConfig;
      csvWriter = new CsvWriter(fileNamePath, csvConfig, ChildrenList_Parent.EstimatedLineLength, null, 0);
      var csvHeaderString = Csv.ToCsvHeaderString(ChildrenList_Parent.Headers, csvConfig.Delimiter);
      csvWriter.WriteLine(csvHeaderString);
    }


    /// <summary>
    /// Writes the details of one ChildrenList_ParentRaw to the CSV file
    /// </summary>
    public void Write(ChildrenList_ParentRaw childrenList_ParentRaw){
      if (childrenList_ParentRaw.Key<0) {
        throw new Exception($"ChildrenList_ParentRaw's key {childrenList_ParentRaw.Key} needs to be greater equal 0.");
      }
      if (childrenList_ParentRaw.Key<=lastKey) {
        throw new Exception($"ChildrenList_ParentRaw's key {childrenList_ParentRaw.Key} must be greater than the last written ChildrenList_Parent's key {lastKey}.");
      }
      lastKey = childrenList_ParentRaw.Key;
      csvWriter.WriteFirstLineChar(csvConfig.LineCharAdd);
      csvWriter.Write(childrenList_ParentRaw.Key);
      csvWriter.Write(childrenList_ParentRaw.Text);
      csvWriter.WriteEndOfLine();
    }


    /// <summary>
    /// Writes the details of one ChildrenList_Parent to the CSV file
    /// </summary>
    public void Write(int key, string text) {
      if (key<0) {
        throw new Exception($"ChildrenList_Parent's key {key} needs to be greater equal 0.");
      }
      if (key<=lastKey) {
        throw new Exception($"ChildrenList_Parent's key {key} must be greater than the last written ChildrenList_Parent's key {lastKey}.");
      }
      lastKey = key;
      csvWriter.WriteFirstLineChar(csvConfig.LineCharAdd);
      csvWriter.Write(key);
      csvWriter.Write(text);
      csvWriter.WriteEndOfLine();
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of ChildrenList_ParentWriter exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is ChildrenList_ParentWriter already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvWriter.Dispose();
    }
    #endregion
  }
  #endregion
}
