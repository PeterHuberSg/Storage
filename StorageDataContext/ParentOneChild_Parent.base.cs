//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ParentOneChild_Parent.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// Example for parent which can have at most 1 child and the parent property in the child is not nullable.
    /// </summary>
  public partial class ParentOneChild_Parent: IStorage<ParentOneChild_Parent> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ParentOneChild_Parent. Gets set once ParentOneChild_Parent gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(ParentOneChild_Parent parentOneChild_Parent, int key) { parentOneChild_Parent.Key = key; }


    /// <summary>
    /// Some Text comment
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Links to conditional child. Parent might or might not have a child, since the parent always gets
    /// created before the child.
    /// </summary>
    public ParentOneChild_Child? Child { get; private set; }


    /// <summary>
    /// Links to conditional readonly child. Parent might or might not have a child, since the parent always gets
    /// created before the child.
    /// </summary>
    public ParentOneChild_ReadonlyChild? ReadonlyChild { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Text"};


    /// <summary>
    /// None existing ParentOneChild_Parent
    /// </summary>
    internal static ParentOneChild_Parent NoParentOneChild_Parent = new ParentOneChild_Parent("NoText", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of ParentOneChild_Parent has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action<ParentOneChild_Parent>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ParentOneChild_Parent Constructor. If isStoring is true, adds ParentOneChild_Parent to DC.Data.ParentOneChild_Parents.
    /// </summary>
    public ParentOneChild_Parent(string text, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for ParentOneChild_Parent read from CSV file
    /// </summary>
    private ParentOneChild_Parent(int key, CsvReader csvReader, DC context) {
      Key = key;
      Text = csvReader.ReadString();
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DC context);


    /// <summary>
    /// New ParentOneChild_Parent read from CSV file
    /// </summary>
    internal static ParentOneChild_Parent Create(int key, CsvReader csvReader, DC context) {
      return new ParentOneChild_Parent(key, csvReader, context);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ParentOneChild_Parent to DC.Data.ParentOneChild_Parents. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ParentOneChild_Parent cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      onStore();
      DC.Data.ParentOneChild_Parents.Add(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write ParentOneChild_Parent to CSV file
    /// </summary>
    public const int MaxLineLength = 150;


    /// <summary>
    /// Write ParentOneChild_Parent to CSV file
    /// </summary>
    internal static void Write(ParentOneChild_Parent parentOneChild_Parent, CsvWriter csvWriter) {
      parentOneChild_Parent.onCsvWrite();
      csvWriter.Write(parentOneChild_Parent.Text);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates ParentOneChild_Parent with the provided values
    /// </summary>
    public void Update(string text) {
      var isCancelled = false;
      onUpdating(text, ref isCancelled);
      if (isCancelled) return;

      var isChangeDetected = false;
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdating(string text, ref bool isCancelled);
    partial void onUpdated();


    /// <summary>
    /// Updates this ParentOneChild_Parent with values from CSV file
    /// </summary>
    internal static void Update(ParentOneChild_Parent parentOneChild_Parent, CsvReader csvReader, DC _) {
      parentOneChild_Parent.Text = csvReader.ReadString();
      parentOneChild_Parent.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Add parentOneChild_Child to Child.
    /// </summary>
    internal void AddToChild(ParentOneChild_Child parentOneChild_Child) {
      if (Child!=null) {
        throw new Exception($"ParentOneChild_Parent.AddToChild(): '{Child}' is already assigned to Child, it is not possible to assign now '{parentOneChild_Child}'.");
      }
      Child = parentOneChild_Child;
      onAddedToChild(parentOneChild_Child);
    }
    partial void onAddedToChild(ParentOneChild_Child parentOneChild_Child);


    /// <summary>
    /// Removes parentOneChild_Child from ParentOneChild_Parent.
    /// </summary>
    internal void RemoveFromChild(ParentOneChild_Child parentOneChild_Child) {
#if DEBUG
      if (Child!=parentOneChild_Child) {
        throw new Exception($"ParentOneChild_Parent.RemoveFromChild(): Child does not link to parentOneChild_Child '{parentOneChild_Child}' but '{Child}'.");
      }
#endif
      Child = null;
      onRemovedFromChild(parentOneChild_Child);
    }
    partial void onRemovedFromChild(ParentOneChild_Child parentOneChild_Child);


    /// <summary>
    /// Add parentOneChild_ReadonlyChild to ReadonlyChild.
    /// </summary>
    internal void AddToReadonlyChild(ParentOneChild_ReadonlyChild parentOneChild_ReadonlyChild) {
      if (ReadonlyChild!=null) {
        throw new Exception($"ParentOneChild_Parent.AddToReadonlyChild(): '{ReadonlyChild}' is already assigned to ReadonlyChild, it is not possible to assign now '{parentOneChild_ReadonlyChild}'.");
      }
      ReadonlyChild = parentOneChild_ReadonlyChild;
      onAddedToReadonlyChild(parentOneChild_ReadonlyChild);
    }
    partial void onAddedToReadonlyChild(ParentOneChild_ReadonlyChild parentOneChild_ReadonlyChild);


    /// <summary>
    /// Removes parentOneChild_ReadonlyChild from ParentOneChild_Parent.
    /// </summary>
    internal void RemoveFromReadonlyChild(ParentOneChild_ReadonlyChild parentOneChild_ReadonlyChild) {
#if DEBUG
      if (ReadonlyChild!=parentOneChild_ReadonlyChild) {
        throw new Exception($"ParentOneChild_Parent.RemoveFromReadonlyChild(): ReadonlyChild does not link to parentOneChild_ReadonlyChild '{parentOneChild_ReadonlyChild}' but '{ReadonlyChild}'.");
      }
#endif
      ReadonlyChild = null;
      onRemovedFromReadonlyChild(parentOneChild_ReadonlyChild);
    }
    partial void onRemovedFromReadonlyChild(ParentOneChild_ReadonlyChild parentOneChild_ReadonlyChild);


    /// <summary>
    /// Removes ParentOneChild_Parent from DC.Data.ParentOneChild_Parents, 
    /// deletes any ParentOneChild_Child where ParentOneChild_Child.Parent links to this ParentOneChild_Parent and 
    /// deletes any ParentOneChild_ReadonlyChild where ParentOneChild_ReadonlyChild.Parent links to this ParentOneChild_Parent.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"ParentOneChild_Parent.Remove(): ParentOneChild_Parent 'Class ParentOneChild_Parent' is not stored in DC.Data, key is {Key}.");
      }
      onRemove();
      DC.Data.ParentOneChild_Parents.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Deletes any ParentOneChild_Child where ParentOneChild_Child.Parent links to this ParentOneChild_Parent and 
    /// deletes any ParentOneChild_ReadonlyChild where ParentOneChild_ReadonlyChild.Parent links to this ParentOneChild_Parent.
    /// </summary>
    internal static void Disconnect(ParentOneChild_Parent parentOneChild_Parent) {
      if (parentOneChild_Parent.Child!=null) {
         if (parentOneChild_Parent.Child.Key>=0) {
           parentOneChild_Parent.Child.Remove();
         }
        parentOneChild_Parent.Child = null;
      }
      if (parentOneChild_Parent.ReadonlyChild!=null) {
         if (parentOneChild_Parent.ReadonlyChild.Key>=0) {
           parentOneChild_Parent.ReadonlyChild.Remove();
         }
        parentOneChild_Parent.ReadonlyChild = null;
      }
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" Child: {Child?.ToShortString()}," +
        $" ReadonlyChild: {ReadonlyChild?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }


  #region ParentOneChild_ParentWriter
  //      ---------------------------

  /// <summary>
  /// Writes a CSV file containing records which can be read back as ParentOneChild_Parent. Note that the keys of linked objects
  /// need to be provided in Write(), since the data context will not be involved.
  /// </summary>
  public class ParentOneChild_ParentWriter: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvWriter csvWriter;
    int lastKey = int.MinValue;


    /// <summary>
    /// Constructor, will write the ParentOneChild_Parent header line into the CSV file. Dispose ParentOneChild_ParentWriter once done.
    /// </summary>
    public ParentOneChild_ParentWriter(string? fileNamePath, CsvConfig csvConfig, int maxLineCharLenght) {
      this.csvConfig = csvConfig;
      csvWriter = new CsvWriter(fileNamePath, csvConfig, maxLineCharLenght, null, 0);
      var csvHeaderString = Csv.ToCsvHeaderString(ParentOneChild_Parent.Headers, csvConfig.Delimiter);
      csvWriter.WriteLine(csvHeaderString);
    }


    /// <summary>
    /// Writes the details of one ParentOneChild_Parent to the CSV file
    /// </summary>
    public void Write(int key, string text) {
      if (key<0) {
        throw new Exception($"ParentOneChild_Parent's key {key} needs to be greater equal 0.");
      }
      if (key<=lastKey) {
        throw new Exception($"ParentOneChild_Parent's key {key} must be greater than the last written ParentOneChild_Parent's key {lastKey}.");
      }
      lastKey = key;
      csvWriter.WriteFirstLineChar(csvConfig.LineCharAdd);
      csvWriter.Write(key);
      csvWriter.Write(text);
      csvWriter.WriteEndOfLine();
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of ParentOneChild_ParentWriter exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is ParentOneChild_ParentWriter already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvWriter.Dispose();
    }
    #endregion
  }
  #endregion
}
