//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ParentOneChild_Parent.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageDataContext  {


    /// <summary>
    /// Example for parent which can have at most 1 child and the parent property in the child is not nullable.
    /// </summary>
  public partial class ParentOneChild_Parent: IStorageItemGeneric<ParentOneChild_Parent> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ParentOneChild_Parent. Gets set once ParentOneChild_Parent gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem parentOneChild_Parent, int key) {
      ((ParentOneChild_Parent)parentOneChild_Parent).Key = key;
    }


    /// <summary>
    /// Some Text comment
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Links to conditional child. Parent might or might not have a child, since the parent always gets
    /// created before the child.
    /// </summary>
    public ParentOneChild_Child? Child { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Text"};


    /// <summary>
    /// None existing ParentOneChild_Parent
    /// </summary>
    internal static ParentOneChild_Parent NoParentOneChild_Parent = new ParentOneChild_Parent("NoText", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of ParentOneChild_Parent has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/ParentOneChild_Parent, /*new*/ParentOneChild_Parent>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ParentOneChild_Parent Constructor. If isStoring is true, adds ParentOneChild_Parent to DC.Data.ParentOneChild_Parents.
    /// </summary>
    public ParentOneChild_Parent(string text, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public ParentOneChild_Parent(ParentOneChild_Parent original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Text = original.Text;
      onCloned(this);
    }
    partial void onCloned(ParentOneChild_Parent clone);


    /// <summary>
    /// Constructor for ParentOneChild_Parent read from CSV file
    /// </summary>
    private ParentOneChild_Parent(int key, CsvReader csvReader){
      Key = key;
      Text = csvReader.ReadString();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New ParentOneChild_Parent read from CSV file
    /// </summary>
    internal static ParentOneChild_Parent Create(int key, CsvReader csvReader) {
      return new ParentOneChild_Parent(key, csvReader);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ParentOneChild_Parent to DC.Data.ParentOneChild_Parents. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ParentOneChild_Parent cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data.ParentOneChild_Parents.Add(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write ParentOneChild_Parent to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write ParentOneChild_Parent to CSV file
    /// </summary>
    internal static void Write(ParentOneChild_Parent parentOneChild_Parent, CsvWriter csvWriter) {
      parentOneChild_Parent.onCsvWrite();
      csvWriter.Write(parentOneChild_Parent.Text);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates ParentOneChild_Parent with the provided values
    /// </summary>
    public void Update(string text) {
      var clone = new ParentOneChild_Parent(this);
      var isCancelled = false;
      onUpdating(text, ref isCancelled);
      if (isCancelled) return;

      var isChangeDetected = false;
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data.ParentOneChild_Parents.ItemHasChanged(clone, this);
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(string text, ref bool isCancelled);
    partial void onUpdated(ParentOneChild_Parent old);


    /// <summary>
    /// Updates this ParentOneChild_Parent with values from CSV file
    /// </summary>
    internal static void Update(ParentOneChild_Parent parentOneChild_Parent, CsvReader csvReader){
      parentOneChild_Parent.Text = csvReader.ReadString();
      parentOneChild_Parent.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Add parentOneChild_Child to Child.
    /// </summary>
    internal void AddToChild(ParentOneChild_Child parentOneChild_Child) {
#if DEBUG
      if (parentOneChild_Child==ParentOneChild_Child.NoParentOneChild_Child) throw new Exception();
#endif
      if (Child!=null) {
        throw new Exception($"ParentOneChild_Parent.AddToChild(): '{Child}' is already assigned to Child, it is not possible to assign now '{parentOneChild_Child}'.");
      }
      Child = parentOneChild_Child;
      onAddedToChild(parentOneChild_Child);
    }
    partial void onAddedToChild(ParentOneChild_Child parentOneChild_Child);


    /// <summary>
    /// Removes parentOneChild_Child from ParentOneChild_Parent.
    /// </summary>
    internal void RemoveFromChild(ParentOneChild_Child parentOneChild_Child) {
#if DEBUG
      if (Child!=parentOneChild_Child) {
        throw new Exception($"ParentOneChild_Parent.RemoveFromChild(): Child does not link to parentOneChild_Child '{parentOneChild_Child}' but '{Child}'.");
      }
#endif
      Child = null;
      onRemovedFromChild(parentOneChild_Child);
    }
    partial void onRemovedFromChild(ParentOneChild_Child parentOneChild_Child);


    /// <summary>
    /// Removes ParentOneChild_Parent from DC.Data.ParentOneChild_Parents and 
    /// deletes any ParentOneChild_Child where ParentOneChild_Child.Parent links to this ParentOneChild_Parent.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"ParentOneChild_Parent.Remove(): ParentOneChild_Parent 'Class ParentOneChild_Parent' is not stored in DC.Data, key is {Key}.");
      }
      onRemove();
      //the removal of this instance from its parent instances gets executed in Disconnect(), which gets
      //called during the execution of the following line.
      DC.Data.ParentOneChild_Parents.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Deletes any ParentOneChild_Child where ParentOneChild_Child.Parent links to this ParentOneChild_Parent.
    /// </summary>
    internal static void Disconnect(ParentOneChild_Parent parentOneChild_Parent) {
      if (parentOneChild_Parent.Child!=null) {
         if (parentOneChild_Parent.Child.Key>=0) {
           parentOneChild_Parent.Child.Remove();
         }
        parentOneChild_Parent.Child = null;
      }
    }


    /// <summary>
    /// Removes ParentOneChild_Parent from possible parents as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var parentOneChild_Parent = (ParentOneChild_Parent) item;
      parentOneChild_Parent.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the ParentOneChild_Parent item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldItem, IStorageItem newItem) {
      var parentOneChild_ParentOld = (ParentOneChild_Parent) oldItem;
      var parentOneChild_ParentNew = (ParentOneChild_Parent) newItem;
      parentOneChild_ParentNew.Text = parentOneChild_ParentOld.Text;
      parentOneChild_ParentNew.onRollbackItemUpdated(parentOneChild_ParentOld);
    }
    partial void onRollbackItemUpdated(ParentOneChild_Parent oldParentOneChild_Parent);


    /// <summary>
    /// Adds ParentOneChild_Parent item to possible parents again as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemRemove(IStorageItem item) {
      var parentOneChild_Parent = (ParentOneChild_Parent) item;
      parentOneChild_Parent.onRollbackItemRemoved();
    }
    partial void onRollbackItemRemoved();


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" Child: {Child?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
