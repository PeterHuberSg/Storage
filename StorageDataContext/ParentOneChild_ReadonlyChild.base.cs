//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ParentOneChild_ReadonlyChild.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// Readonly Child class with one parent property which is not nullable and one property to a different parent 
    /// which is nullable
    /// </summary>
  public partial class ParentOneChild_ReadonlyChild: IStorage<ParentOneChild_ReadonlyChild> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ParentOneChild_ReadonlyChild. Gets set once ParentOneChild_ReadonlyChild gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(ParentOneChild_ReadonlyChild parentOneChild_ReadonlyChild, int key) { parentOneChild_ReadonlyChild.Key = key; }


    /// <summary>
    /// Some Text comment
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Links to parent
    /// </summary>
    public ParentOneChild_Parent Parent { get; private set; }


    /// <summary>
    /// Links to parent conditionally
    /// </summary>
    public ParentOneChild_ParentNullable? ParentNullable { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Text", "Parent", "ParentNullable"};


    /// <summary>
    /// None existing ParentOneChild_ReadonlyChild
    /// </summary>
    internal static ParentOneChild_ReadonlyChild NoParentOneChild_ReadonlyChild = new ParentOneChild_ReadonlyChild("NoText", ParentOneChild_Parent.NoParentOneChild_Parent, null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of ParentOneChild_ReadonlyChild has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action<ParentOneChild_ReadonlyChild>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ParentOneChild_ReadonlyChild Constructor. If isStoring is true, adds ParentOneChild_ReadonlyChild to DC.Data.ParentOneChild_ReadonlyChildren, 
    /// adds ParentOneChild_ReadonlyChild to parentOneChild_Parent.ParentOneChild_ReadonlyChildren
    /// and if there is a ParentNullable adds ParentOneChild_ReadonlyChild to parentOneChild_ParentNullable.ParentOneChild_ReadonlyChildren.
    /// </summary>
    public ParentOneChild_ReadonlyChild(string text, ParentOneChild_Parent parent, ParentOneChild_ParentNullable? parentNullable, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      Parent = parent;
      ParentNullable = parentNullable;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for ParentOneChild_ReadonlyChild read from CSV file
    /// </summary>
    private ParentOneChild_ReadonlyChild(int key, CsvReader csvReader, DC context) {
      Key = key;
      Text = csvReader.ReadString();
      var parentOneChild_ParentKey = csvReader.ReadInt();
      if (context.ParentOneChild_Parents.TryGetValue(parentOneChild_ParentKey, out var parent)) {
          Parent = parent;
      } else {
        throw new Exception($"Read ParentOneChild_ReadonlyChild from CSV file: Cannot find Parent with key {parentOneChild_ParentKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      }
      var parentNullableKey = csvReader.ReadIntNull();
      if (parentNullableKey.HasValue) {
        if (context.ParentOneChild_ParentNullables.TryGetValue(parentNullableKey.Value, out var parentNullable)) {
          ParentNullable = parentNullable;
        } else {
          ParentNullable = ParentOneChild_ParentNullable.NoParentOneChild_ParentNullable;
        }
      }
      if (Parent!=ParentOneChild_Parent.NoParentOneChild_Parent) {
        Parent.AddToReadonlyChild(this);
      }
      if (parentNullableKey.HasValue && ParentNullable!=ParentOneChild_ParentNullable.NoParentOneChild_ParentNullable) {
        ParentNullable!.AddToReadonlyChild(this);
      }
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DC context);


    /// <summary>
    /// New ParentOneChild_ReadonlyChild read from CSV file
    /// </summary>
    internal static ParentOneChild_ReadonlyChild Create(int key, CsvReader csvReader, DC context) {
      return new ParentOneChild_ReadonlyChild(key, csvReader, context);
    }


    /// <summary>
    /// Verify that parentOneChild_ReadonlyChild.Parent exists.
    /// Verify that parentOneChild_ReadonlyChild.ParentNullable exists.
    /// </summary>
    internal static bool Verify(ParentOneChild_ReadonlyChild parentOneChild_ReadonlyChild) {
      if (parentOneChild_ReadonlyChild.Parent==ParentOneChild_Parent.NoParentOneChild_Parent) return false;
      if (parentOneChild_ReadonlyChild.ParentNullable==ParentOneChild_ParentNullable.NoParentOneChild_ParentNullable) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ParentOneChild_ReadonlyChild to DC.Data.ParentOneChild_ReadonlyChildren, ParentOneChild_Parent and ParentOneChild_ParentNullable. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ParentOneChild_ReadonlyChild cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      if (Parent.Key<0) {
        throw new Exception($"ParentOneChild_ReadonlyChild cannot be stored in DC.Data, Parent is missing or not stored yet." + Environment.NewLine + ToString());
      }
      if (ParentNullable!=null && ParentNullable.Key<0) {
        throw new Exception($"ParentOneChild_ReadonlyChild cannot be stored in DC.Data, ParentNullable is not stored yet." + Environment.NewLine + ToString());
      }
      onStore();
      DC.Data.ParentOneChild_ReadonlyChildren.Add(this);
      Parent.AddToReadonlyChild(this);
      ParentNullable?.AddToReadonlyChild(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write ParentOneChild_ReadonlyChild to CSV file
    /// </summary>
    public const int MaxLineLength = 150;


    /// <summary>
    /// Write ParentOneChild_ReadonlyChild to CSV file
    /// </summary>
    internal static void Write(ParentOneChild_ReadonlyChild parentOneChild_ReadonlyChild, CsvWriter csvWriter) {
      parentOneChild_ReadonlyChild.onCsvWrite();
      csvWriter.Write(parentOneChild_ReadonlyChild.Text);
      if (parentOneChild_ReadonlyChild.Parent.Key<0) throw new Exception($"Cannot write parentOneChild_ReadonlyChild '{parentOneChild_ReadonlyChild}' to CSV File, because Parent is not stored in DC.Data.ParentOneChild_Parents.");

      csvWriter.Write(parentOneChild_ReadonlyChild.Parent.Key.ToString());
      if (parentOneChild_ReadonlyChild.ParentNullable is null) {
        csvWriter.WriteNull();
      } else {
        if (parentOneChild_ReadonlyChild.ParentNullable.Key<0) throw new Exception($"Cannot write parentOneChild_ReadonlyChild '{parentOneChild_ReadonlyChild}' to CSV File, because ParentNullable is not stored in DC.Data.ParentOneChild_ParentNullables.");

        csvWriter.Write(parentOneChild_ReadonlyChild.ParentNullable.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates ParentOneChild_ReadonlyChild with the provided values
    /// </summary>
    public void Update(string text, ParentOneChild_Parent parent, ParentOneChild_ParentNullable? parentNullable) {
      var isCancelled = false;
      onUpdating(text, parent, parentNullable, ref isCancelled);
      if (isCancelled) return;

      var isChangeDetected = false;
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (Parent!=parent) {
        Parent.RemoveFromReadonlyChild(this);
        Parent = parent;
        Parent.AddToReadonlyChild(this);
        isChangeDetected = true;
      }
      if (ParentNullable is null) {
        if (parentNullable is null) {
          //nothing to do
        } else {
          ParentNullable = parentNullable;
          ParentNullable.AddToReadonlyChild(this);
          isChangeDetected = true;
        }
      } else {
        if (parentNullable is null) {
          ParentNullable.RemoveFromReadonlyChild(this);
          ParentNullable = null;
          isChangeDetected = true;
        } else {
          if (ParentNullable!=parentNullable) {
            ParentNullable.RemoveFromReadonlyChild(this);
            ParentNullable = parentNullable;
            ParentNullable.AddToReadonlyChild(this);
            isChangeDetected = true;
          }
        }
      }
      if (isChangeDetected) {
        onUpdated();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdating(string text, ParentOneChild_Parent parent, ParentOneChild_ParentNullable? parentNullable, ref bool isCancelled);
    partial void onUpdated();


    /// <summary>
    /// Updates this ParentOneChild_ReadonlyChild with values from CSV file
    /// </summary>
    internal static void Update(ParentOneChild_ReadonlyChild parentOneChild_ReadonlyChild, CsvReader csvReader, DC context) {
      parentOneChild_ReadonlyChild.Text = csvReader.ReadString();
      if (!context.ParentOneChild_Parents.TryGetValue(csvReader.ReadInt(), out var parent)) {
        parent = ParentOneChild_Parent.NoParentOneChild_Parent;
      }
      if (parentOneChild_ReadonlyChild.Parent!=parent) {
        if (parentOneChild_ReadonlyChild.Parent!=ParentOneChild_Parent.NoParentOneChild_Parent) {
          parentOneChild_ReadonlyChild.Parent.RemoveFromReadonlyChild(parentOneChild_ReadonlyChild);
        }
        parentOneChild_ReadonlyChild.Parent = parent;
        parentOneChild_ReadonlyChild.Parent.AddToReadonlyChild(parentOneChild_ReadonlyChild);
      }
      var parentNullableKey = csvReader.ReadIntNull();
      ParentOneChild_ParentNullable? parentNullable;
      if (parentNullableKey is null) {
        parentNullable = null;
      } else {
        if (!context.ParentOneChild_ParentNullables.TryGetValue(parentNullableKey.Value, out parentNullable)) {
          parentNullable = ParentOneChild_ParentNullable.NoParentOneChild_ParentNullable;
        }
      }
      if (parentOneChild_ReadonlyChild.ParentNullable is null) {
        if (parentNullable is null) {
          //nothing to do
        } else {
          parentOneChild_ReadonlyChild.ParentNullable = parentNullable;
          parentOneChild_ReadonlyChild.ParentNullable.AddToReadonlyChild(parentOneChild_ReadonlyChild);
        }
      } else {
        if (parentNullable is null) {
          if (parentOneChild_ReadonlyChild.ParentNullable!=ParentOneChild_ParentNullable.NoParentOneChild_ParentNullable) {
            parentOneChild_ReadonlyChild.ParentNullable.RemoveFromReadonlyChild(parentOneChild_ReadonlyChild);
          }
          parentOneChild_ReadonlyChild.ParentNullable = null;
        } else {
          if (parentOneChild_ReadonlyChild.ParentNullable!=ParentOneChild_ParentNullable.NoParentOneChild_ParentNullable) {
            parentOneChild_ReadonlyChild.ParentNullable.RemoveFromReadonlyChild(parentOneChild_ReadonlyChild);
          }
          parentOneChild_ReadonlyChild.ParentNullable = parentNullable;
          parentOneChild_ReadonlyChild.ParentNullable.AddToReadonlyChild(parentOneChild_ReadonlyChild);
        }
      }
      parentOneChild_ReadonlyChild.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes ParentOneChild_ReadonlyChild from DC.Data.ParentOneChild_ReadonlyChildren, 
    /// disconnects ParentOneChild_ReadonlyChild from ParentOneChild_Parent because of Parent and 
    /// disconnects ParentOneChild_ReadonlyChild from ParentOneChild_ParentNullable because of ParentNullable.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"ParentOneChild_ReadonlyChild.Remove(): ParentOneChild_ReadonlyChild 'Class ParentOneChild_ReadonlyChild' is not stored in DC.Data, key is {Key}.");
      }
      onRemove();
      DC.Data.ParentOneChild_ReadonlyChildren.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Disconnects ParentOneChild_ReadonlyChild from ParentOneChild_Parent because of Parent and 
    /// disconnects ParentOneChild_ReadonlyChild from ParentOneChild_ParentNullable because of ParentNullable.
    /// </summary>
    internal static void Disconnect(ParentOneChild_ReadonlyChild parentOneChild_ReadonlyChild) {
      if (parentOneChild_ReadonlyChild.Parent!=ParentOneChild_Parent.NoParentOneChild_Parent) {
        parentOneChild_ReadonlyChild.Parent.RemoveFromReadonlyChild(parentOneChild_ReadonlyChild);
      }
      if (parentOneChild_ReadonlyChild.ParentNullable!=null && parentOneChild_ReadonlyChild.ParentNullable!=ParentOneChild_ParentNullable.NoParentOneChild_ParentNullable) {
        parentOneChild_ReadonlyChild.ParentNullable.RemoveFromReadonlyChild(parentOneChild_ReadonlyChild);
      }
    }


    /// <summary>
    /// Removes parentOneChild_ParentNullable from ParentNullable
    /// </summary>
    internal void RemoveParentNullable(ParentOneChild_ParentNullable parentOneChild_ParentNullable) {
      if (parentOneChild_ParentNullable!=ParentNullable) throw new Exception();
      ParentNullable = null;
      HasChanged?.Invoke(this);
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}," +
        $" {Parent.ToShortString()}," +
        $" {ParentNullable?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" Parent: {Parent.ToShortString()}," +
        $" ParentNullable: {ParentNullable?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }


  #region ParentOneChild_ReadonlyChildWriter
  //      ----------------------------------

  /// <summary>
  /// Writes a CSV file containing records which can be read back as ParentOneChild_ReadonlyChild. Note that the keys of linked objects
  /// need to be provided in Write(), since the data context will not be involved.
  /// </summary>
  public class ParentOneChild_ReadonlyChildWriter: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvWriter csvWriter;
    int lastKey = int.MinValue;


    /// <summary>
    /// Constructor, will write the ParentOneChild_ReadonlyChild header line into the CSV file. Dispose ParentOneChild_ReadonlyChildWriter once done.
    /// </summary>
    public ParentOneChild_ReadonlyChildWriter(string? fileNamePath, CsvConfig csvConfig, int maxLineCharLenght) {
      this.csvConfig = csvConfig;
      csvWriter = new CsvWriter(fileNamePath, csvConfig, maxLineCharLenght, null, 0);
      var csvHeaderString = Csv.ToCsvHeaderString(ParentOneChild_ReadonlyChild.Headers, csvConfig.Delimiter);
      csvWriter.WriteLine(csvHeaderString);
    }


    /// <summary>
    /// Writes the details of one ParentOneChild_ReadonlyChild to the CSV file
    /// </summary>
    public void Write(int key, string text, int parentKey, int? parentNullableKey) {
      if (key<0) {
        throw new Exception($"ParentOneChild_ReadonlyChild's key {key} needs to be greater equal 0.");
      }
      if (key<=lastKey) {
        throw new Exception($"ParentOneChild_ReadonlyChild's key {key} must be greater than the last written ParentOneChild_ReadonlyChild's key {lastKey}.");
      }
      lastKey = key;
      csvWriter.WriteFirstLineChar(csvConfig.LineCharAdd);
      csvWriter.Write(key);
      csvWriter.Write(text);
      if (parentKey<0) throw new Exception($"Cannot write parentOneChild_ReadonlyChild to CSV File, because Parent is not stored in DC.Data.ParentOneChild_Parents.");

      csvWriter.Write(parentKey.ToString());
      if (parentNullableKey is null) {
        csvWriter.WriteNull();
      } else {
        if (parentNullableKey<0) throw new Exception($"Cannot write parentOneChild_ReadonlyChild to CSV File, because ParentNullable is not stored in DC.Data.ParentOneChild_ParentNullables.");

        csvWriter.Write(parentNullableKey.ToString());
      }
      csvWriter.WriteEndOfLine();
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of ParentOneChild_ReadonlyChildWriter exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is ParentOneChild_ReadonlyChildWriter already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvWriter.Dispose();
    }
    #endregion
  }
  #endregion
}
