//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into CreateOnlyParentChangeableChild_ParentNullable.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageDataContext  {


    /// <summary>
    /// Example of a "CreateOnly" Parent, i.e. this parent's properties will not change and this parent will never get
    /// deleted, but it is still possible to add and remove children. The parent property in the child 
    /// is nullable.
    /// </summary>
  public partial class CreateOnlyParentChangeableChild_ParentNullable: IStorageItemGeneric<CreateOnlyParentChangeableChild_ParentNullable> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for CreateOnlyParentChangeableChild_ParentNullable. Gets set once CreateOnlyParentChangeableChild_ParentNullable gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem createOnlyParentChangeableChild_ParentNullable, int key, bool isRollback) {
#if DEBUG
      if (isRollback) {
        if (key==StorageExtensions.NoKey) {
          DC.Trace?.Invoke($"Release CreateOnlyParentChangeableChild_ParentNullable key @{createOnlyParentChangeableChild_ParentNullable.Key} #{createOnlyParentChangeableChild_ParentNullable.GetHashCode()}");
        } else {
          DC.Trace?.Invoke($"Store CreateOnlyParentChangeableChild_ParentNullable key @{key} #{createOnlyParentChangeableChild_ParentNullable.GetHashCode()}");
        }
      }
#endif
      ((CreateOnlyParentChangeableChild_ParentNullable)createOnlyParentChangeableChild_ParentNullable).Key = key;
    }


    /// <summary>
    /// Text will be readonly even it is not marked as such, because class is not updatable
    /// </summary>
    public string Text { get; }


    /// <summary>
    /// List of children
    /// </summary>
    public IReadOnlyList<CreateOnlyParentChangeableChild_Child> CreateOnlyParentChangeableChild_Children => createOnlyParentChangeableChild_Children;
    readonly List<CreateOnlyParentChangeableChild_Child> createOnlyParentChangeableChild_Children;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Text"};


    /// <summary>
    /// None existing CreateOnlyParentChangeableChild_ParentNullable
    /// </summary>
    internal static CreateOnlyParentChangeableChild_ParentNullable NoCreateOnlyParentChangeableChild_ParentNullable = new CreateOnlyParentChangeableChild_ParentNullable("NoText", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// This event will never be raised, but is needed to comply with IStorage.
    /// </summary>
#pragma warning disable 67
    public event Action</*old*/CreateOnlyParentChangeableChild_ParentNullable, /*new*/CreateOnlyParentChangeableChild_ParentNullable>? HasChanged;
#pragma warning restore 67
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// CreateOnlyParentChangeableChild_ParentNullable Constructor. If isStoring is true, adds CreateOnlyParentChangeableChild_ParentNullable to DC.Data.CreateOnlyParentChangeableChild_ParentNullables.
    /// </summary>
    public CreateOnlyParentChangeableChild_ParentNullable(string text, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      createOnlyParentChangeableChild_Children = new List<CreateOnlyParentChangeableChild_Child>();
#if DEBUG
      DC.Trace?.Invoke($"new CreateOnlyParentChangeableChild_ParentNullable: {ToTraceString()}");
#endif
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(27,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public CreateOnlyParentChangeableChild_ParentNullable(CreateOnlyParentChangeableChild_ParentNullable original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Text = original.Text;
      onCloned(this);
    }
    partial void onCloned(CreateOnlyParentChangeableChild_ParentNullable clone);


    /// <summary>
    /// Constructor for CreateOnlyParentChangeableChild_ParentNullable read from CSV file
    /// </summary>
    private CreateOnlyParentChangeableChild_ParentNullable(int key, CsvReader csvReader){
      Key = key;
      Text = csvReader.ReadString();
      createOnlyParentChangeableChild_Children = new List<CreateOnlyParentChangeableChild_Child>();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New CreateOnlyParentChangeableChild_ParentNullable read from CSV file
    /// </summary>
    internal static CreateOnlyParentChangeableChild_ParentNullable Create(int key, CsvReader csvReader) {
      return new CreateOnlyParentChangeableChild_ParentNullable(key, csvReader);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds CreateOnlyParentChangeableChild_ParentNullable to DC.Data.CreateOnlyParentChangeableChild_ParentNullables.<br/>
    /// Throws an Exception when CreateOnlyParentChangeableChild_ParentNullable is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"CreateOnlyParentChangeableChild_ParentNullable cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data.CreateOnlyParentChangeableChild_ParentNullables.Add(this);
      onStored();
#if DEBUG
      DC.Trace?.Invoke($"Stored CreateOnlyParentChangeableChild_ParentNullable #{GetHashCode()} @{Key}");
#endif
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write CreateOnlyParentChangeableChild_ParentNullable to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write CreateOnlyParentChangeableChild_ParentNullable to CSV file
    /// </summary>
    internal static void Write(CreateOnlyParentChangeableChild_ParentNullable createOnlyParentChangeableChild_ParentNullable, CsvWriter csvWriter) {
      createOnlyParentChangeableChild_ParentNullable.onCsvWrite();
      csvWriter.Write(createOnlyParentChangeableChild_ParentNullable.Text);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Add createOnlyParentChangeableChild_Child to CreateOnlyParentChangeableChild_Children.
    /// </summary>
    internal void AddToCreateOnlyParentChangeableChild_Children(CreateOnlyParentChangeableChild_Child createOnlyParentChangeableChild_Child) {
#if DEBUG
      if (createOnlyParentChangeableChild_Child==CreateOnlyParentChangeableChild_Child.NoCreateOnlyParentChangeableChild_Child) throw new Exception();
      if ((createOnlyParentChangeableChild_Child.Key>=0)&&(Key<0)) throw new Exception();
      if (createOnlyParentChangeableChild_Children.Contains(createOnlyParentChangeableChild_Child)) throw new Exception();
#endif
      createOnlyParentChangeableChild_Children.Add(createOnlyParentChangeableChild_Child);
      onAddedToCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_Child);
#if DEBUG
      DC.Trace?.Invoke($"Add CreateOnlyParentChangeableChild_Child {createOnlyParentChangeableChild_Child.GetKeyOrHash()} to " +
        $"{this.GetKeyOrHash()} CreateOnlyParentChangeableChild_ParentNullable.CreateOnlyParentChangeableChild_Children");
#endif
    }
    partial void onAddedToCreateOnlyParentChangeableChild_Children(CreateOnlyParentChangeableChild_Child createOnlyParentChangeableChild_Child);


    /// <summary>
    /// Removes createOnlyParentChangeableChild_Child from CreateOnlyParentChangeableChild_ParentNullable.
    /// </summary>
    internal void RemoveFromCreateOnlyParentChangeableChild_Children(CreateOnlyParentChangeableChild_Child createOnlyParentChangeableChild_Child) {
#if DEBUG
      if (!createOnlyParentChangeableChild_Children.Remove(createOnlyParentChangeableChild_Child)) throw new Exception();
#else
        createOnlyParentChangeableChild_Children.Remove(createOnlyParentChangeableChild_Child);
#endif
      onRemovedFromCreateOnlyParentChangeableChild_Children(createOnlyParentChangeableChild_Child);
#if DEBUG
      DC.Trace?.Invoke($"Remove CreateOnlyParentChangeableChild_Child {createOnlyParentChangeableChild_Child.GetKeyOrHash()} from " +
        $"{this.GetKeyOrHash()} CreateOnlyParentChangeableChild_ParentNullable.CreateOnlyParentChangeableChild_Children");
#endif
    }
    partial void onRemovedFromCreateOnlyParentChangeableChild_Children(CreateOnlyParentChangeableChild_Child createOnlyParentChangeableChild_Child);


    /// <summary>
    /// Removes CreateOnlyParentChangeableChild_ParentNullable from DC.Data.CreateOnlyParentChangeableChild_ParentNullables.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"CreateOnlyParentChangeableChild_ParentNullable.Release(): CreateOnlyParentChangeableChild_ParentNullable '{this}' is not stored in DC.Data, key is {Key}.");
      }
      foreach (var createOnlyParentChangeableChild_Child in CreateOnlyParentChangeableChild_Children) {
        if (createOnlyParentChangeableChild_Child?.Key>=0) {
          throw new Exception($"Cannot release CreateOnlyParentChangeableChild_ParentNullable '{this}' " + Environment.NewLine + 
            $"because '{createOnlyParentChangeableChild_Child}' in CreateOnlyParentChangeableChild_ParentNullable.CreateOnlyParentChangeableChild_Children is still stored.");
        }
      }
      onReleased();
      DC.Data.CreateOnlyParentChangeableChild_ParentNullables.Remove(Key);
#if DEBUG
      DC.Trace?.Invoke($"Released CreateOnlyParentChangeableChild_ParentNullable @{Key} #{GetHashCode()}");
#endif
    }
    partial void onReleased();


    /// <summary>
    /// Undoes the new() statement as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var createOnlyParentChangeableChild_ParentNullable = (CreateOnlyParentChangeableChild_ParentNullable) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback new CreateOnlyParentChangeableChild_ParentNullable(): {createOnlyParentChangeableChild_ParentNullable.ToTraceString()}");
#endif
      createOnlyParentChangeableChild_ParentNullable.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases CreateOnlyParentChangeableChild_ParentNullable from DC.Data.CreateOnlyParentChangeableChild_ParentNullables as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var createOnlyParentChangeableChild_ParentNullable = (CreateOnlyParentChangeableChild_ParentNullable) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback CreateOnlyParentChangeableChild_ParentNullable.Store(): {createOnlyParentChangeableChild_ParentNullable.ToTraceString()}");
#endif
      createOnlyParentChangeableChild_ParentNullable.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the CreateOnlyParentChangeableChild_ParentNullable item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (CreateOnlyParentChangeableChild_ParentNullable) oldStorageItem;
      var newItem = (CreateOnlyParentChangeableChild_ParentNullable) newStorageItem;
#if DEBUG
      DC.Trace?.Invoke($"Rolling back CreateOnlyParentChangeableChild_ParentNullable.Update(): {newItem.ToTraceString()}");
#endif
      if (newItem.Text!=oldItem.Text) {
        throw new Exception($"CreateOnlyParentChangeableChild_ParentNullable.Update(): Property Text '{newItem.Text}' is " +
          $"readonly, Text '{oldItem.Text}' read from the CSV file should be the same." + Environment.NewLine + 
          newItem.ToString());
      }
      newItem.onRollbackItemUpdated(oldItem);
#if DEBUG
      DC.Trace?.Invoke($"Rolled back CreateOnlyParentChangeableChild_ParentNullable.Update(): {newItem.ToTraceString()}");
#endif
    }
    partial void onRollbackItemUpdated(CreateOnlyParentChangeableChild_ParentNullable oldCreateOnlyParentChangeableChild_ParentNullable);


    /// <summary>
    /// Adds CreateOnlyParentChangeableChild_ParentNullable to DC.Data.CreateOnlyParentChangeableChild_ParentNullables as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var createOnlyParentChangeableChild_ParentNullable = (CreateOnlyParentChangeableChild_ParentNullable) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback CreateOnlyParentChangeableChild_ParentNullable.Release(): {createOnlyParentChangeableChild_ParentNullable.ToTraceString()}");
#endif
      createOnlyParentChangeableChild_ParentNullable.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Text}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Text: {Text}," +
        $" CreateOnlyParentChangeableChild_Children: {CreateOnlyParentChangeableChild_Children.Count};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
