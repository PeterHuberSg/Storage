//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into DemoChild.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageDataContext  {


  public partial class DemoChild: IStorageItemGeneric<DemoChild> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for DemoChild. Gets set once DemoChild gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem demoChild, int key, bool isRollback) {
#if DEBUG
      if (isRollback) {
        if (key==StorageExtensions.NoKey) {
          DC.Trace?.Invoke($"Release DemoChild key @{demoChild.Key} #{demoChild.GetHashCode()}");
        } else {
          DC.Trace?.Invoke($"Store DemoChild key @{key} #{demoChild.GetHashCode()}");
        }
      }
#endif
      ((DemoChild)demoChild).Key = key;
    }


    public string DemoChildData { get; private set; }


    public DemoParent Parent { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "DemoChildData", "Parent"};


    /// <summary>
    /// None existing DemoChild
    /// </summary>
    internal static DemoChild NoDemoChild = new DemoChild("NoDemoChildData", DemoParent.NoDemoParent, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of DemoChild has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/DemoChild, /*new*/DemoChild>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// DemoChild Constructor. If isStoring is true, adds DemoChild to DC.Data.DemoChildren.
    /// </summary>
    public DemoChild(string demoChildData, DemoParent parent, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      DemoChildData = demoChildData;
      Parent = parent;
#if DEBUG
      DC.Trace?.Invoke($"new DemoChild: {ToTraceString()}");
#endif
      Parent.AddToDemoChildren(this);
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(35,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public DemoChild(DemoChild original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      DemoChildData = original.DemoChildData;
      Parent = original.Parent;
      onCloned(this);
    }
    partial void onCloned(DemoChild clone);


    /// <summary>
    /// Constructor for DemoChild read from CSV file
    /// </summary>
    private DemoChild(int key, CsvReader csvReader){
      Key = key;
      DemoChildData = csvReader.ReadString();
      var demoParentKey = csvReader.ReadInt();
      if (DC.Data.DemoParents.TryGetValue(demoParentKey, out var parent)) {
          Parent = parent;
      } else {
        throw new Exception($"Read DemoChild from CSV file: Cannot find Parent with key {demoParentKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      }
      if (Parent!=DemoParent.NoDemoParent) {
        Parent.AddToDemoChildren(this);
      }
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New DemoChild read from CSV file
    /// </summary>
    internal static DemoChild Create(int key, CsvReader csvReader) {
      return new DemoChild(key, csvReader);
    }


    /// <summary>
    /// Verify that demoChild.Parent exists.
    /// </summary>
    internal static bool Verify(DemoChild demoChild) {
      if (demoChild.Parent==DemoParent.NoDemoParent) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds DemoChild to DC.Data.DemoChildren.<br/>
    /// Throws an Exception when DemoChild is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"DemoChild cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      if (Parent.Key<0) {
        throw new Exception($"Cannot store child DemoChild '{this}'.Parent to DemoParent '{Parent}' because parent is not stored yet.");
      }
      DC.Data.DemoChildren.Add(this);
      onStored();
#if DEBUG
      DC.Trace?.Invoke($"Stored DemoChild #{GetHashCode()} @{Key}");
#endif
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write DemoChild to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write DemoChild to CSV file
    /// </summary>
    internal static void Write(DemoChild demoChild, CsvWriter csvWriter) {
      demoChild.onCsvWrite();
      csvWriter.Write(demoChild.DemoChildData);
      if (demoChild.Parent.Key<0) throw new Exception($"Cannot write demoChild '{demoChild}' to CSV File, because Parent is not stored in DC.Data.DemoParents.");

      csvWriter.Write(demoChild.Parent.Key.ToString());
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates DemoChild with the provided values
    /// </summary>
    public void Update(string demoChildData, DemoParent parent) {
      if (Key>=0){
        if (parent.Key<0) {
          throw new Exception($"DemoChild.Update(): It is illegal to add stored DemoChild '{this}'" + Environment.NewLine + 
            $"to Parent '{parent}', which is not stored.");
        }
      }
      var clone = new DemoChild(this);
      var isCancelled = false;
      onUpdating(demoChildData, parent, ref isCancelled);
      if (isCancelled) return;

#if DEBUG
      DC.Trace?.Invoke($"Updating DemoChild: {ToTraceString()}");
#endif
      var isChangeDetected = false;
      if (DemoChildData!=demoChildData) {
        DemoChildData = demoChildData;
        isChangeDetected = true;
      }
      if (Parent!=parent) {
        Parent.RemoveFromDemoChildren(this);
        Parent = parent;
        Parent.AddToDemoChildren(this);
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data.DemoChildren.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(35, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
#if DEBUG
      DC.Trace?.Invoke($"Updated DemoChild: {ToTraceString()}");
#endif
    }
    partial void onUpdating(string demoChildData, DemoParent parent, ref bool isCancelled);
    partial void onUpdated(DemoChild old);


    /// <summary>
    /// Updates this DemoChild with values from CSV file
    /// </summary>
    internal static void Update(DemoChild demoChild, CsvReader csvReader){
      demoChild.DemoChildData = csvReader.ReadString();
      if (!DC.Data.DemoParents.TryGetValue(csvReader.ReadInt(), out var parent)) {
        parent = DemoParent.NoDemoParent;
      }
      if (demoChild.Parent!=parent) {
        if (demoChild.Parent!=DemoParent.NoDemoParent) {
          demoChild.Parent.RemoveFromDemoChildren(demoChild);
        }
        demoChild.Parent = parent;
        demoChild.Parent.AddToDemoChildren(demoChild);
      }
      demoChild.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes DemoChild from DC.Data.DemoChildren.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"DemoChild.Release(): DemoChild '{this}' is not stored in DC.Data, key is {Key}.");
      }
      onReleased();
      DC.Data.DemoChildren.Remove(Key);
#if DEBUG
      DC.Trace?.Invoke($"Released DemoChild @{Key} #{GetHashCode()}");
#endif
    }
    partial void onReleased();


    /// <summary>
    /// Removes DemoChild from parents as part of a transaction rollback of the new() statement.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var demoChild = (DemoChild) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback new DemoChild(): {demoChild.ToTraceString()}");
#endif
      if (demoChild.Parent!=DemoParent.NoDemoParent) {
        demoChild.Parent.RemoveFromDemoChildren(demoChild);
      }
      demoChild.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases DemoChild from DC.Data.DemoChildren as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var demoChild = (DemoChild) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback DemoChild.Store(): {demoChild.ToTraceString()}");
#endif
      demoChild.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the DemoChild item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (DemoChild) oldStorageItem;
      var newItem = (DemoChild) newStorageItem;
#if DEBUG
      DC.Trace?.Invoke($"Rolling back DemoChild.Update(): {newItem.ToTraceString()}");
#endif
      newItem.DemoChildData = oldItem.DemoChildData;
      if (newItem.Parent!=oldItem.Parent) {
        if (newItem.Parent!=DemoParent.NoDemoParent) {
            newItem.Parent.RemoveFromDemoChildren(newItem);
        }
        newItem.Parent = oldItem.Parent;
        newItem.Parent.AddToDemoChildren(newItem);
      }
      newItem.onRollbackItemUpdated(oldItem);
#if DEBUG
      DC.Trace?.Invoke($"Rolled back DemoChild.Update(): {newItem.ToTraceString()}");
#endif
    }
    partial void onRollbackItemUpdated(DemoChild oldDemoChild);


    /// <summary>
    /// Adds DemoChild to DC.Data.DemoChildren as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var demoChild = (DemoChild) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback DemoChild.Release(): {demoChild.ToTraceString()}");
#endif
      demoChild.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {DemoChildData}|" +
        $" Parent {Parent.GetKeyOrHash()}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {DemoChildData}," +
        $" {Parent.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" DemoChildData: {DemoChildData}," +
        $" Parent: {Parent.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
