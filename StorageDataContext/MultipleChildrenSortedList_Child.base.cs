//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into MultipleChildrenSortedList_Child.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// SortedListChild has a member providing the key value needed to add SortedListChild to  
    /// ParentWithSortedList and ParentWithSortedListNullable
    /// </summary>
  public partial class MultipleChildrenSortedList_Child: IStorage<MultipleChildrenSortedList_Child> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for MultipleChildrenSortedList_Child. Gets set once MultipleChildrenSortedList_Child gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(MultipleChildrenSortedList_Child multipleChildrenSortedList_Child, int key) { multipleChildrenSortedList_Child.Key = key; }


    /// <summary>
    /// Key field used in ParentWithSortedList.SortedListChildren SortedList
    /// Stores only dates but no times.
    /// </summary>
    public DateTime DateKey { get; private set; }


    /// <summary>
    /// Some info
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Parent
    /// </summary>
    public MultipleChildrenSortedList_Parent ParentWithSortedList { get; private set; }


    /// <summary>
    /// Nullable Parent
    /// </summary>
    public MultipleChildrenSortedList_ParentNullable? ParentWithSortedListNullable { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "DateKey", "Text", "ParentWithSortedList", "ParentWithSortedListNullable"};


    /// <summary>
    /// None existing MultipleChildrenSortedList_Child
    /// </summary>
    internal static MultipleChildrenSortedList_Child NoMultipleChildrenSortedList_Child = new MultipleChildrenSortedList_Child(DateTime.MinValue.Date, "NoText", MultipleChildrenSortedList_Parent.NoMultipleChildrenSortedList_Parent, null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of MultipleChildrenSortedList_Child has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action<MultipleChildrenSortedList_Child>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// MultipleChildrenSortedList_Child Constructor. If isStoring is true, adds MultipleChildrenSortedList_Child to DC.Data.MultipleChildrenSortedList_Children, 
    /// adds MultipleChildrenSortedList_Child to multipleChildrenSortedList_Parent.MultipleChildrenSortedList_Children
    /// and if there is a ParentWithSortedListNullable adds MultipleChildrenSortedList_Child to multipleChildrenSortedList_ParentNullable.MultipleChildrenSortedList_Children.
    /// </summary>
    public MultipleChildrenSortedList_Child(
      DateTime dateKey, 
      string text, 
      MultipleChildrenSortedList_Parent parentWithSortedList, 
      MultipleChildrenSortedList_ParentNullable? parentWithSortedListNullable, 
      bool isStoring = true)
    {
      Key = StorageExtensions.NoKey;
      DateKey = dateKey.Floor(Rounding.Days);
      Text = text;
      ParentWithSortedList = parentWithSortedList;
      ParentWithSortedListNullable = parentWithSortedListNullable;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for MultipleChildrenSortedList_Child read from CSV file
    /// </summary>
    private MultipleChildrenSortedList_Child(int key, CsvReader csvReader, DC context) {
      Key = key;
      DateKey = csvReader.ReadDate();
      Text = csvReader.ReadString();
      var multipleChildrenSortedList_ParentKey = csvReader.ReadInt();
      if (context.MultipleChildrenSortedList_Parents.TryGetValue(multipleChildrenSortedList_ParentKey, out var parentWithSortedList)) {
          ParentWithSortedList = parentWithSortedList;
      } else {
        throw new Exception($"Read MultipleChildrenSortedList_Child from CSV file: Cannot find ParentWithSortedList with key {multipleChildrenSortedList_ParentKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      }
      var parentWithSortedListNullableKey = csvReader.ReadIntNull();
      if (parentWithSortedListNullableKey.HasValue) {
        if (context.MultipleChildrenSortedList_ParentNullables.TryGetValue(parentWithSortedListNullableKey.Value, out var parentWithSortedListNullable)) {
          ParentWithSortedListNullable = parentWithSortedListNullable;
        } else {
          ParentWithSortedListNullable = MultipleChildrenSortedList_ParentNullable.NoMultipleChildrenSortedList_ParentNullable;
        }
      }
      if (ParentWithSortedList!=MultipleChildrenSortedList_Parent.NoMultipleChildrenSortedList_Parent) {
        ParentWithSortedList.AddToMultipleChildrenSortedList_Children(this);
      }
      if (parentWithSortedListNullableKey.HasValue && ParentWithSortedListNullable!=MultipleChildrenSortedList_ParentNullable.NoMultipleChildrenSortedList_ParentNullable) {
        ParentWithSortedListNullable!.AddToMultipleChildrenSortedList_Children(this);
      }
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DC context);


    /// <summary>
    /// New MultipleChildrenSortedList_Child read from CSV file
    /// </summary>
    internal static MultipleChildrenSortedList_Child Create(int key, CsvReader csvReader, DC context) {
      return new MultipleChildrenSortedList_Child(key, csvReader, context);
    }


    /// <summary>
    /// Verify that multipleChildrenSortedList_Child.ParentWithSortedList exists.
    /// Verify that multipleChildrenSortedList_Child.ParentWithSortedListNullable exists.
    /// </summary>
    internal static bool Verify(MultipleChildrenSortedList_Child multipleChildrenSortedList_Child) {
      if (multipleChildrenSortedList_Child.ParentWithSortedList==MultipleChildrenSortedList_Parent.NoMultipleChildrenSortedList_Parent) return false;
      if (multipleChildrenSortedList_Child.ParentWithSortedListNullable==MultipleChildrenSortedList_ParentNullable.NoMultipleChildrenSortedList_ParentNullable) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds MultipleChildrenSortedList_Child to DC.Data.MultipleChildrenSortedList_Children, MultipleChildrenSortedList_Parent and MultipleChildrenSortedList_ParentNullable. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"MultipleChildrenSortedList_Child cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      if (ParentWithSortedList.Key<0) {
        throw new Exception($"MultipleChildrenSortedList_Child cannot be stored in DC.Data, ParentWithSortedList is missing or not stored yet." + Environment.NewLine + ToString());
      }
      if (ParentWithSortedListNullable!=null && ParentWithSortedListNullable.Key<0) {
        throw new Exception($"MultipleChildrenSortedList_Child cannot be stored in DC.Data, ParentWithSortedListNullable is not stored yet." + Environment.NewLine + ToString());
      }
      onStore();
      DC.Data.MultipleChildrenSortedList_Children.Add(this);
      ParentWithSortedList.AddToMultipleChildrenSortedList_Children(this);
      ParentWithSortedListNullable?.AddToMultipleChildrenSortedList_Children(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write MultipleChildrenSortedList_Child to CSV file
    /// </summary>
    public const int MaxLineLength = 161;


    /// <summary>
    /// Write MultipleChildrenSortedList_Child to CSV file
    /// </summary>
    internal static void Write(MultipleChildrenSortedList_Child multipleChildrenSortedList_Child, CsvWriter csvWriter) {
      multipleChildrenSortedList_Child.onCsvWrite();
      csvWriter.WriteDate(multipleChildrenSortedList_Child.DateKey);
      csvWriter.Write(multipleChildrenSortedList_Child.Text);
      if (multipleChildrenSortedList_Child.ParentWithSortedList.Key<0) throw new Exception($"Cannot write multipleChildrenSortedList_Child '{multipleChildrenSortedList_Child}' to CSV File, because ParentWithSortedList is not stored in DC.Data.MultipleChildrenSortedList_Parents.");

      csvWriter.Write(multipleChildrenSortedList_Child.ParentWithSortedList.Key.ToString());
      if (multipleChildrenSortedList_Child.ParentWithSortedListNullable is null) {
        csvWriter.WriteNull();
      } else {
        if (multipleChildrenSortedList_Child.ParentWithSortedListNullable.Key<0) throw new Exception($"Cannot write multipleChildrenSortedList_Child '{multipleChildrenSortedList_Child}' to CSV File, because ParentWithSortedListNullable is not stored in DC.Data.MultipleChildrenSortedList_ParentNullables.");

        csvWriter.Write(multipleChildrenSortedList_Child.ParentWithSortedListNullable.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates MultipleChildrenSortedList_Child with the provided values
    /// </summary>
    public void Update(DateTime dateKey, string text, MultipleChildrenSortedList_Parent parentWithSortedList, MultipleChildrenSortedList_ParentNullable? parentWithSortedListNullable) {
      var isCancelled = false;
      onUpdating(dateKey, text, parentWithSortedList, parentWithSortedListNullable, ref isCancelled);
      if (isCancelled) return;

      var isChangeDetected = false;
      var dateKeyRounded = dateKey.Floor(Rounding.Days);
      if (DateKey!=dateKeyRounded) {
        DateKey = dateKeyRounded;
        isChangeDetected = true;
      }
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (ParentWithSortedList!=parentWithSortedList) {
        ParentWithSortedList.RemoveFromMultipleChildrenSortedList_Children(this);
        ParentWithSortedList = parentWithSortedList;
        ParentWithSortedList.AddToMultipleChildrenSortedList_Children(this);
        isChangeDetected = true;
      }
      if (ParentWithSortedListNullable is null) {
        if (parentWithSortedListNullable is null) {
          //nothing to do
        } else {
          ParentWithSortedListNullable = parentWithSortedListNullable;
          ParentWithSortedListNullable.AddToMultipleChildrenSortedList_Children(this);
          isChangeDetected = true;
        }
      } else {
        if (parentWithSortedListNullable is null) {
          ParentWithSortedListNullable.RemoveFromMultipleChildrenSortedList_Children(this);
          ParentWithSortedListNullable = null;
          isChangeDetected = true;
        } else {
          if (ParentWithSortedListNullable!=parentWithSortedListNullable) {
            ParentWithSortedListNullable.RemoveFromMultipleChildrenSortedList_Children(this);
            ParentWithSortedListNullable = parentWithSortedListNullable;
            ParentWithSortedListNullable.AddToMultipleChildrenSortedList_Children(this);
            isChangeDetected = true;
          }
        }
      }
      if (isChangeDetected) {
        onUpdated();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdating(
      DateTime dateKey, 
      string text, 
      MultipleChildrenSortedList_Parent parentWithSortedList, 
      MultipleChildrenSortedList_ParentNullable? parentWithSortedListNullable, 
      ref bool isCancelled);
    partial void onUpdated();


    /// <summary>
    /// Updates this MultipleChildrenSortedList_Child with values from CSV file
    /// </summary>
    internal static void Update(MultipleChildrenSortedList_Child multipleChildrenSortedList_Child, CsvReader csvReader, DC context) {
      multipleChildrenSortedList_Child.DateKey = csvReader.ReadDate();
      multipleChildrenSortedList_Child.Text = csvReader.ReadString();
      if (!context.MultipleChildrenSortedList_Parents.TryGetValue(csvReader.ReadInt(), out var parentWithSortedList)) {
        parentWithSortedList = MultipleChildrenSortedList_Parent.NoMultipleChildrenSortedList_Parent;
      }
      if (multipleChildrenSortedList_Child.ParentWithSortedList!=parentWithSortedList) {
        if (multipleChildrenSortedList_Child.ParentWithSortedList!=MultipleChildrenSortedList_Parent.NoMultipleChildrenSortedList_Parent) {
          multipleChildrenSortedList_Child.ParentWithSortedList.RemoveFromMultipleChildrenSortedList_Children(multipleChildrenSortedList_Child);
        }
        multipleChildrenSortedList_Child.ParentWithSortedList = parentWithSortedList;
        multipleChildrenSortedList_Child.ParentWithSortedList.AddToMultipleChildrenSortedList_Children(multipleChildrenSortedList_Child);
      }
      var parentWithSortedListNullableKey = csvReader.ReadIntNull();
      MultipleChildrenSortedList_ParentNullable? parentWithSortedListNullable;
      if (parentWithSortedListNullableKey is null) {
        parentWithSortedListNullable = null;
      } else {
        if (!context.MultipleChildrenSortedList_ParentNullables.TryGetValue(parentWithSortedListNullableKey.Value, out parentWithSortedListNullable)) {
          parentWithSortedListNullable = MultipleChildrenSortedList_ParentNullable.NoMultipleChildrenSortedList_ParentNullable;
        }
      }
      if (multipleChildrenSortedList_Child.ParentWithSortedListNullable is null) {
        if (parentWithSortedListNullable is null) {
          //nothing to do
        } else {
          multipleChildrenSortedList_Child.ParentWithSortedListNullable = parentWithSortedListNullable;
          multipleChildrenSortedList_Child.ParentWithSortedListNullable.AddToMultipleChildrenSortedList_Children(multipleChildrenSortedList_Child);
        }
      } else {
        if (parentWithSortedListNullable is null) {
          if (multipleChildrenSortedList_Child.ParentWithSortedListNullable!=MultipleChildrenSortedList_ParentNullable.NoMultipleChildrenSortedList_ParentNullable) {
            multipleChildrenSortedList_Child.ParentWithSortedListNullable.RemoveFromMultipleChildrenSortedList_Children(multipleChildrenSortedList_Child);
          }
          multipleChildrenSortedList_Child.ParentWithSortedListNullable = null;
        } else {
          if (multipleChildrenSortedList_Child.ParentWithSortedListNullable!=MultipleChildrenSortedList_ParentNullable.NoMultipleChildrenSortedList_ParentNullable) {
            multipleChildrenSortedList_Child.ParentWithSortedListNullable.RemoveFromMultipleChildrenSortedList_Children(multipleChildrenSortedList_Child);
          }
          multipleChildrenSortedList_Child.ParentWithSortedListNullable = parentWithSortedListNullable;
          multipleChildrenSortedList_Child.ParentWithSortedListNullable.AddToMultipleChildrenSortedList_Children(multipleChildrenSortedList_Child);
        }
      }
      multipleChildrenSortedList_Child.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes MultipleChildrenSortedList_Child from DC.Data.MultipleChildrenSortedList_Children, 
    /// disconnects MultipleChildrenSortedList_Child from MultipleChildrenSortedList_Parent because of ParentWithSortedList and 
    /// disconnects MultipleChildrenSortedList_Child from MultipleChildrenSortedList_ParentNullable because of ParentWithSortedListNullable.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"MultipleChildrenSortedList_Child.Remove(): MultipleChildrenSortedList_Child 'Class MultipleChildrenSortedList_Child' is not stored in DC.Data, key is {Key}.");
      }
      onRemove();
      DC.Data.MultipleChildrenSortedList_Children.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Disconnects MultipleChildrenSortedList_Child from MultipleChildrenSortedList_Parent because of ParentWithSortedList and 
    /// disconnects MultipleChildrenSortedList_Child from MultipleChildrenSortedList_ParentNullable because of ParentWithSortedListNullable.
    /// </summary>
    internal static void Disconnect(MultipleChildrenSortedList_Child multipleChildrenSortedList_Child) {
      if (multipleChildrenSortedList_Child.ParentWithSortedList!=MultipleChildrenSortedList_Parent.NoMultipleChildrenSortedList_Parent) {
        multipleChildrenSortedList_Child.ParentWithSortedList.RemoveFromMultipleChildrenSortedList_Children(multipleChildrenSortedList_Child);
      }
      if (multipleChildrenSortedList_Child.ParentWithSortedListNullable!=null && multipleChildrenSortedList_Child.ParentWithSortedListNullable!=MultipleChildrenSortedList_ParentNullable.NoMultipleChildrenSortedList_ParentNullable) {
        multipleChildrenSortedList_Child.ParentWithSortedListNullable.RemoveFromMultipleChildrenSortedList_Children(multipleChildrenSortedList_Child);
      }
    }


    /// <summary>
    /// Removes multipleChildrenSortedList_ParentNullable from ParentWithSortedListNullable
    /// </summary>
    internal void RemoveParentWithSortedListNullable(MultipleChildrenSortedList_ParentNullable multipleChildrenSortedList_ParentNullable) {
      if (multipleChildrenSortedList_ParentNullable!=ParentWithSortedListNullable) throw new Exception();
      ParentWithSortedListNullable = null;
      HasChanged?.Invoke(this);
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {DateKey.ToShortDateString()}," +
        $" {Text}," +
        $" {ParentWithSortedList.ToShortString()}," +
        $" {ParentWithSortedListNullable?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" DateKey: {DateKey.ToShortDateString()}," +
        $" Text: {Text}," +
        $" ParentWithSortedList: {ParentWithSortedList.ToShortString()}," +
        $" ParentWithSortedListNullable: {ParentWithSortedListNullable?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }


  #region MultipleChildrenSortedList_ChildWriter
  //      --------------------------------------

  /// <summary>
  /// Writes a CSV file containing records which can be read back as MultipleChildrenSortedList_Child. Note that the keys of linked objects
  /// need to be provided in Write(), since the data context will not be involved.
  /// </summary>
  public class MultipleChildrenSortedList_ChildWriter: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvWriter csvWriter;
    int lastKey = int.MinValue;


    /// <summary>
    /// Constructor, will write the MultipleChildrenSortedList_Child header line into the CSV file. Dispose MultipleChildrenSortedList_ChildWriter once done.
    /// </summary>
    public MultipleChildrenSortedList_ChildWriter(string? fileNamePath, CsvConfig csvConfig, int maxLineCharLenght) {
      this.csvConfig = csvConfig;
      csvWriter = new CsvWriter(fileNamePath, csvConfig, maxLineCharLenght, null, 0);
      var csvHeaderString = Csv.ToCsvHeaderString(MultipleChildrenSortedList_Child.Headers, csvConfig.Delimiter);
      csvWriter.WriteLine(csvHeaderString);
    }


    /// <summary>
    /// Writes the details of one MultipleChildrenSortedList_Child to the CSV file
    /// </summary>
    public void Write(
      int key, 
      DateTime dateKey, 
      string text, 
      int parentWithSortedListKey, 
      int? parentWithSortedListNullableKey)
    {
      if (key<0) {
        throw new Exception($"MultipleChildrenSortedList_Child's key {key} needs to be greater equal 0.");
      }
      if (key<=lastKey) {
        throw new Exception($"MultipleChildrenSortedList_Child's key {key} must be greater than the last written MultipleChildrenSortedList_Child's key {lastKey}.");
      }
      lastKey = key;
      csvWriter.WriteFirstLineChar(csvConfig.LineCharAdd);
      csvWriter.Write(key);
      csvWriter.WriteDate(dateKey);
      csvWriter.Write(text);
      if (parentWithSortedListKey<0) throw new Exception($"Cannot write multipleChildrenSortedList_Child to CSV File, because ParentWithSortedList is not stored in DC.Data.MultipleChildrenSortedList_Parents.");

      csvWriter.Write(parentWithSortedListKey.ToString());
      if (parentWithSortedListNullableKey is null) {
        csvWriter.WriteNull();
      } else {
        if (parentWithSortedListNullableKey<0) throw new Exception($"Cannot write multipleChildrenSortedList_Child to CSV File, because ParentWithSortedListNullable is not stored in DC.Data.MultipleChildrenSortedList_ParentNullables.");

        csvWriter.Write(parentWithSortedListNullableKey.ToString());
      }
      csvWriter.WriteEndOfLine();
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of MultipleChildrenSortedList_ChildWriter exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is MultipleChildrenSortedList_ChildWriter already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvWriter.Dispose();
    }
    #endregion
  }
  #endregion
}
