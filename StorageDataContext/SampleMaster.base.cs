//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into SampleMaster.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageDataContext  {


    /// <summary>
    /// Some comment for SampleMaster.
    /// With an additional line.
    /// </summary>
  public partial class SampleMaster: IStorageItemGeneric<SampleMaster> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for SampleMaster. Gets set once SampleMaster gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem sampleMaster, int key) {
      ((SampleMaster)sampleMaster).Key = key;
    }


    /// <summary>
    /// Some Text comment
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// List representing parent child relationship
    /// </summary>
    public ICollection<Sample> SampleX => sampleX;
    readonly HashSet<Sample> sampleX;


    /// <summary>
    /// Integer property with int.MinValue as default
    /// </summary>
    public int NumberWithDefault { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Text", "NumberWithDefault"};


    /// <summary>
    /// None existing SampleMaster
    /// </summary>
    internal static SampleMaster NoSampleMaster = new SampleMaster("NoText", int.MinValue, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of SampleMaster has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/SampleMaster, /*new*/SampleMaster>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// SampleMaster Constructor. If isStoring is true, adds SampleMaster to DC.Data.SampleMasters.
    /// </summary>
    public SampleMaster(string text, int numberWithDefault = int.MinValue, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      sampleX = new HashSet<Sample>();
      NumberWithDefault = numberWithDefault;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public SampleMaster(SampleMaster original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Text = original.Text;
      NumberWithDefault = original.NumberWithDefault;
      onCloned(this);
    }
    partial void onCloned(SampleMaster clone);


    /// <summary>
    /// Constructor for SampleMaster read from CSV file
    /// </summary>
    private SampleMaster(int key, CsvReader csvReader){
      Key = key;
      Text = csvReader.ReadString();
      sampleX = new HashSet<Sample>();
      NumberWithDefault = csvReader.ReadInt();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New SampleMaster read from CSV file
    /// </summary>
    internal static SampleMaster Create(int key, CsvReader csvReader) {
      return new SampleMaster(key, csvReader);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds SampleMaster to DC.Data.SampleMasters. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"SampleMaster cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data.SampleMasters.Add(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write SampleMaster to CSV file
    /// </summary>
    public const int EstimatedLineLength = 161;


    /// <summary>
    /// Write SampleMaster to CSV file
    /// </summary>
    internal static void Write(SampleMaster sampleMaster, CsvWriter csvWriter) {
      sampleMaster.onCsvWrite();
      csvWriter.Write(sampleMaster.Text);
      csvWriter.Write(sampleMaster.NumberWithDefault);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates SampleMaster with the provided values
    /// </summary>
    public void Update(string text, int numberWithDefault) {
      var clone = new SampleMaster(this);
      var isCancelled = false;
      onUpdating(text, numberWithDefault, ref isCancelled);
      if (isCancelled) return;

      var isChangeDetected = false;
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (NumberWithDefault!=numberWithDefault) {
        NumberWithDefault = numberWithDefault;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data.SampleMasters.ItemHasChanged(clone, this);
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(string text, int numberWithDefault, ref bool isCancelled);
    partial void onUpdated(SampleMaster old);


    /// <summary>
    /// Updates this SampleMaster with values from CSV file
    /// </summary>
    internal static void Update(SampleMaster sampleMaster, CsvReader csvReader){
      sampleMaster.Text = csvReader.ReadString();
      sampleMaster.NumberWithDefault = csvReader.ReadInt();
      sampleMaster.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Add sample to SampleX.
    /// </summary>
    internal void AddToSampleX(Sample sample) {
#if DEBUG
      if (sample==Sample.NoSample) throw new Exception();
#endif
      sampleX.Add(sample);
      onAddedToSampleX(sample);
    }
    partial void onAddedToSampleX(Sample sample);


    /// <summary>
    /// Removes sample from SampleMaster.
    /// </summary>
    internal void RemoveFromSampleX(Sample sample) {
      //Execute Remove() only when exactly one property in the child still links to this parent. If
      //no property links here (Count=0), the child should not be in the children collection. If
      //more than 1 child property links here, it cannot yet be removed from the children collection.
      var countLinks = 0;
      if (sample.OneMaster==this ) countLinks++;
      if (sample.OtherMaster==this ) countLinks++;
      if (countLinks>1) return;
#if DEBUG
      if (countLinks==0) throw new Exception();
      if (!sampleX.Remove(sample)) throw new Exception();
#else
        sampleX.Remove(sample);
#endif
      onRemovedFromSampleX(sample);
    }
    partial void onRemovedFromSampleX(Sample sample);


    /// <summary>
    /// Removing SampleMaster from DC.Data.SampleMasters is not supported.
    /// </summary>
    public void Remove() {
      throw new NotSupportedException("StorageClass attribute AreInstancesDeletable is false.");
    }


    /// <summary>
    /// Removes SampleMaster from possible parents as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var sampleMaster = (SampleMaster) item;
      sampleMaster.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the SampleMaster item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldItem, IStorageItem newItem) {
      var sampleMasterOld = (SampleMaster) oldItem;
      var sampleMasterNew = (SampleMaster) newItem;
      sampleMasterNew.Text = sampleMasterOld.Text;
      sampleMasterNew.NumberWithDefault = sampleMasterOld.NumberWithDefault;
      sampleMasterNew.onRollbackItemUpdated(sampleMasterOld);
    }
    partial void onRollbackItemUpdated(SampleMaster oldSampleMaster);


    /// <summary>
    /// Adds SampleMaster item to possible parents again as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemRemove(IStorageItem item) {
      var sampleMaster = (SampleMaster) item;
      sampleMaster.onRollbackItemRemoved();
    }
    partial void onRollbackItemRemoved();


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}," +
        $" {NumberWithDefault}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" SampleX: {SampleX.Count}," +
        $" NumberWithDefault: {NumberWithDefault};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
