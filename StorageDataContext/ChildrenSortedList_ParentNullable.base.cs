//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ChildrenSortedList_ParentNullable.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// Example of a parent child relationship using a SortedList where the child's parent property is nullable.
    /// </summary>
  public partial class ChildrenSortedList_ParentNullable: IStorage<ChildrenSortedList_ParentNullable> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ChildrenSortedList_ParentNullable. Gets set once ChildrenSortedList_ParentNullable gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(ChildrenSortedList_ParentNullable childrenSortedList_ParentNullable, int key) { childrenSortedList_ParentNullable.Key = key; }


    /// <summary>
    /// This text is readonly. Readonly only matters when [StorageClass(areInstancesUpdatable: true)]
    /// </summary>
    public string TextReadOnly { get; }


    /// <summary>
    /// This text can be updated
    /// </summary>
    public string TextUpdateable { get; private set; }


    /// <summary>
    /// SortedList used instead of List. Comment is required and indicates which property of the SortedListChild to 
    /// use as key
    /// </summary>
    public IReadOnlyDictionary<DateTime, ChildrenSortedList_Child> ChildrenSortedList_Children => childrenSortedList_Children;
    readonly SortedList<DateTime, ChildrenSortedList_Child> childrenSortedList_Children;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "TextReadOnly", "TextUpdateable"};


    /// <summary>
    /// None existing ChildrenSortedList_ParentNullable
    /// </summary>
    internal static ChildrenSortedList_ParentNullable NoChildrenSortedList_ParentNullable = new ChildrenSortedList_ParentNullable("NoTextReadOnly", "NoTextUpdateable", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of ChildrenSortedList_ParentNullable has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action<ChildrenSortedList_ParentNullable>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ChildrenSortedList_ParentNullable Constructor. If isStoring is true, adds ChildrenSortedList_ParentNullable to DC.Data.ChildrenSortedList_ParentNullables.
    /// </summary>
    public ChildrenSortedList_ParentNullable(string textReadOnly, string textUpdateable, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      TextReadOnly = textReadOnly;
      TextUpdateable = textUpdateable;
      childrenSortedList_Children = new SortedList<DateTime, ChildrenSortedList_Child>();
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for ChildrenSortedList_ParentNullable read from CSV file
    /// </summary>
    private ChildrenSortedList_ParentNullable(int key, CsvReader csvReader, DC context) {
      Key = key;
      TextReadOnly = csvReader.ReadString();
      TextUpdateable = csvReader.ReadString();
      childrenSortedList_Children = new SortedList<DateTime, ChildrenSortedList_Child>();
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DC context);


    /// <summary>
    /// New ChildrenSortedList_ParentNullable read from CSV file
    /// </summary>
    internal static ChildrenSortedList_ParentNullable Create(int key, CsvReader csvReader, DC context) {
      return new ChildrenSortedList_ParentNullable(key, csvReader, context);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ChildrenSortedList_ParentNullable to DC.Data.ChildrenSortedList_ParentNullables. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ChildrenSortedList_ParentNullable cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      onStore();
      DC.Data.ChildrenSortedList_ParentNullables.Add(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write ChildrenSortedList_ParentNullable to CSV file
    /// </summary>
    public const int MaxLineLength = 300;


    /// <summary>
    /// Write ChildrenSortedList_ParentNullable to CSV file
    /// </summary>
    internal static void Write(ChildrenSortedList_ParentNullable childrenSortedList_ParentNullable, CsvWriter csvWriter) {
      childrenSortedList_ParentNullable.onCsvWrite();
      csvWriter.Write(childrenSortedList_ParentNullable.TextReadOnly);
      csvWriter.Write(childrenSortedList_ParentNullable.TextUpdateable);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates ChildrenSortedList_ParentNullable with the provided values
    /// </summary>
    public void Update(string textUpdateable) {
      var isCancelled = false;
      onUpdating(textUpdateable, ref isCancelled);
      if (isCancelled) return;

      var isChangeDetected = false;
      if (TextUpdateable!=textUpdateable) {
        TextUpdateable = textUpdateable;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdating(string textUpdateable, ref bool isCancelled);
    partial void onUpdated();


    /// <summary>
    /// Updates this ChildrenSortedList_ParentNullable with values from CSV file
    /// </summary>
    internal static void Update(ChildrenSortedList_ParentNullable childrenSortedList_ParentNullable, CsvReader csvReader, DC _) {
      var value = csvReader.ReadString();
      if (childrenSortedList_ParentNullable.TextReadOnly!=value) {
        throw new Exception($"ChildrenSortedList_ParentNullable.Update(): Property TextReadOnly '{childrenSortedList_ParentNullable.TextReadOnly}' is " +
          $"readonly, the value '{value}' read from the CSV file should be the same." + Environment.NewLine + 
          childrenSortedList_ParentNullable.ToString());
      }
      childrenSortedList_ParentNullable.TextUpdateable = csvReader.ReadString();
      childrenSortedList_ParentNullable.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Add childrenSortedList_Child to ChildrenSortedList_Children.
    /// </summary>
    internal void AddToChildrenSortedList_Children(ChildrenSortedList_Child childrenSortedList_Child) {
      childrenSortedList_Children.Add(childrenSortedList_Child.DateKey, childrenSortedList_Child);
      onAddedToChildrenSortedList_Children(childrenSortedList_Child);
    }
    partial void onAddedToChildrenSortedList_Children(ChildrenSortedList_Child childrenSortedList_Child);


    /// <summary>
    /// Removes childrenSortedList_Child from ChildrenSortedList_ParentNullable.
    /// </summary>
    internal void RemoveFromChildrenSortedList_Children(ChildrenSortedList_Child childrenSortedList_Child) {
#if DEBUG
      if (!childrenSortedList_Children.Remove(childrenSortedList_Child.DateKey)) throw new Exception();
#else
        childrenSortedList_Children.Remove(childrenSortedList_Child.DateKey);
#endif
      onRemovedFromChildrenSortedList_Children(childrenSortedList_Child);
    }
    partial void onRemovedFromChildrenSortedList_Children(ChildrenSortedList_Child childrenSortedList_Child);


    /// <summary>
    /// Removes ChildrenSortedList_ParentNullable from DC.Data.ChildrenSortedList_ParentNullables and 
    /// disconnects ChildrenSortedList_Child.ParentWithSortedListNullable from ChildrenSortedList_Children.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"ChildrenSortedList_ParentNullable.Remove(): ChildrenSortedList_ParentNullable 'Class ChildrenSortedList_ParentNullable' is not stored in DC.Data, key is {Key}.");
      }
      onRemove();
      DC.Data.ChildrenSortedList_ParentNullables.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Disconnects ChildrenSortedList_Child.ParentWithSortedListNullable from ChildrenSortedList_Children.
    /// </summary>
    internal static void Disconnect(ChildrenSortedList_ParentNullable childrenSortedList_ParentNullable) {
      var childrenSortedList_Children = new ChildrenSortedList_Child[childrenSortedList_ParentNullable.ChildrenSortedList_Children.Count];
      childrenSortedList_ParentNullable.childrenSortedList_Children.Values.CopyTo(childrenSortedList_Children, 0);
      foreach (var childrenSortedList_Child in childrenSortedList_Children) {
        childrenSortedList_Child.RemoveParentWithSortedListNullable(childrenSortedList_ParentNullable);
      }
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {TextReadOnly}," +
        $" {TextUpdateable}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" TextReadOnly: {TextReadOnly}," +
        $" TextUpdateable: {TextUpdateable}," +
        $" ChildrenSortedList_Children: {ChildrenSortedList_Children.Count};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
