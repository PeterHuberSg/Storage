//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into MultipleChildrenDictionary_Parent.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// Example of a parent child relationship using a Dictionary.
    /// </summary>
  public partial class MultipleChildrenDictionary_Parent: IStorage<MultipleChildrenDictionary_Parent> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for MultipleChildrenDictionary_Parent. Gets set once MultipleChildrenDictionary_Parent gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(MultipleChildrenDictionary_Parent multipleChildrenDictionary_Parent, int key) { multipleChildrenDictionary_Parent.Key = key; }


    /// <summary>
    /// Some Text
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Dictionary used instead of List. Comment is required and indicates which property of the DictionaryChild to 
    /// use as key
    /// </summary>
    public IReadOnlyDictionary<DateTime, MultipleChildrenDictionary_Child> MultipleChildrenDictionary_Children => multipleChildrenDictionary_Children;
    readonly Dictionary<DateTime, MultipleChildrenDictionary_Child> multipleChildrenDictionary_Children;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Text"};


    /// <summary>
    /// None existing MultipleChildrenDictionary_Parent
    /// </summary>
    internal static MultipleChildrenDictionary_Parent NoMultipleChildrenDictionary_Parent = new MultipleChildrenDictionary_Parent("NoText", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of MultipleChildrenDictionary_Parent has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action<MultipleChildrenDictionary_Parent>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// MultipleChildrenDictionary_Parent Constructor. If isStoring is true, adds MultipleChildrenDictionary_Parent to DC.Data.MultipleChildrenDictionary_Parents.
    /// </summary>
    public MultipleChildrenDictionary_Parent(string text, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      multipleChildrenDictionary_Children = new Dictionary<DateTime, MultipleChildrenDictionary_Child>();
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for MultipleChildrenDictionary_Parent read from CSV file
    /// </summary>
    private MultipleChildrenDictionary_Parent(int key, CsvReader csvReader, DC context) {
      Key = key;
      Text = csvReader.ReadString();
      multipleChildrenDictionary_Children = new Dictionary<DateTime, MultipleChildrenDictionary_Child>();
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DC context);


    /// <summary>
    /// New MultipleChildrenDictionary_Parent read from CSV file
    /// </summary>
    internal static MultipleChildrenDictionary_Parent Create(int key, CsvReader csvReader, DC context) {
      return new MultipleChildrenDictionary_Parent(key, csvReader, context);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds MultipleChildrenDictionary_Parent to DC.Data.MultipleChildrenDictionary_Parents. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"MultipleChildrenDictionary_Parent cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      onStore();
      DC.Data.MultipleChildrenDictionary_Parents.Add(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write MultipleChildrenDictionary_Parent to CSV file
    /// </summary>
    public const int MaxLineLength = 150;


    /// <summary>
    /// Write MultipleChildrenDictionary_Parent to CSV file
    /// </summary>
    internal static void Write(MultipleChildrenDictionary_Parent multipleChildrenDictionary_Parent, CsvWriter csvWriter) {
      multipleChildrenDictionary_Parent.onCsvWrite();
      csvWriter.Write(multipleChildrenDictionary_Parent.Text);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates MultipleChildrenDictionary_Parent with the provided values
    /// </summary>
    public void Update(string text) {
      var isCancelled = false;
      onUpdating(text, ref isCancelled);
      if (isCancelled) return;

      var isChangeDetected = false;
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdating(string text, ref bool isCancelled);
    partial void onUpdated();


    /// <summary>
    /// Updates this MultipleChildrenDictionary_Parent with values from CSV file
    /// </summary>
    internal static void Update(MultipleChildrenDictionary_Parent multipleChildrenDictionary_Parent, CsvReader csvReader, DC _) {
      multipleChildrenDictionary_Parent.Text = csvReader.ReadString();
      multipleChildrenDictionary_Parent.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Add multipleChildrenDictionary_Child to MultipleChildrenDictionary_Children.
    /// </summary>
    internal void AddToMultipleChildrenDictionary_Children(MultipleChildrenDictionary_Child multipleChildrenDictionary_Child) {
      multipleChildrenDictionary_Children.Add(multipleChildrenDictionary_Child.DateKey, multipleChildrenDictionary_Child);
      onAddedToMultipleChildrenDictionary_Children(multipleChildrenDictionary_Child);
    }
    partial void onAddedToMultipleChildrenDictionary_Children(MultipleChildrenDictionary_Child multipleChildrenDictionary_Child);


    /// <summary>
    /// Removes multipleChildrenDictionary_Child from MultipleChildrenDictionary_Parent.
    /// </summary>
    internal void RemoveFromMultipleChildrenDictionary_Children(MultipleChildrenDictionary_Child multipleChildrenDictionary_Child) {
#if DEBUG
      if (!multipleChildrenDictionary_Children.Remove(multipleChildrenDictionary_Child.DateKey)) throw new Exception();
#else
        multipleChildrenDictionary_Children.Remove(multipleChildrenDictionary_Child.DateKey);
#endif
      onRemovedFromMultipleChildrenDictionary_Children(multipleChildrenDictionary_Child);
    }
    partial void onRemovedFromMultipleChildrenDictionary_Children(MultipleChildrenDictionary_Child multipleChildrenDictionary_Child);


    /// <summary>
    /// Removes MultipleChildrenDictionary_Parent from DC.Data.MultipleChildrenDictionary_Parents and 
    /// deletes any MultipleChildrenDictionary_Child where MultipleChildrenDictionary_Child.ParentWithDictionary links to this MultipleChildrenDictionary_Parent.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"MultipleChildrenDictionary_Parent.Remove(): MultipleChildrenDictionary_Parent 'Class MultipleChildrenDictionary_Parent' is not stored in DC.Data, key is {Key}.");
      }
      onRemove();
      DC.Data.MultipleChildrenDictionary_Parents.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Deletes any MultipleChildrenDictionary_Child where MultipleChildrenDictionary_Child.ParentWithDictionary links to this MultipleChildrenDictionary_Parent.
    /// </summary>
    internal static void Disconnect(MultipleChildrenDictionary_Parent multipleChildrenDictionary_Parent) {
      foreach (var multipleChildrenDictionary_Child in multipleChildrenDictionary_Parent.MultipleChildrenDictionary_Children.Values) {
         if (multipleChildrenDictionary_Child.Key>=0) {
           multipleChildrenDictionary_Child.Remove();
         }
      }
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" MultipleChildrenDictionary_Children: {MultipleChildrenDictionary_Children.Count};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
