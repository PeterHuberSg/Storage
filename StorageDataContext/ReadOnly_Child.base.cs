//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ReadOnly_Child.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// Example of a "readonly" Child, i.e. the child's properties will not change and once it is added to its parent
    /// and therefore it also cannot be removed from parent, because the Parent property of the child cannot be changed
    /// either.
    /// </summary>
  public partial class ReadOnly_Child: IStorage<ReadOnly_Child> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ReadOnly_Child. Gets set once ReadOnly_Child gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(ReadOnly_Child readOnly_Child, int key) { readOnly_Child.Key = key; }


    /// <summary>
    /// Readonly Text, because class is not updatable
    /// </summary>
    public string Text { get; }


    /// <summary>
    /// Parent
    /// </summary>
    public ReadOnly_Parent ReadOnlyParent { get; }


    /// <summary>
    /// Parent
    /// </summary>          
    public ReadOnly_ParentNullable? ReadOnlyParentNullable { get; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Text", "ReadOnlyParent", "ReadOnlyParentNullable"};


    /// <summary>
    /// None existing ReadOnly_Child
    /// </summary>
    internal static ReadOnly_Child NoReadOnly_Child = new ReadOnly_Child("NoText", ReadOnly_Parent.NoReadOnly_Parent, null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// This event will never be raised, but is needed to comply with IStorage.
    /// </summary>
#pragma warning disable 67
    public event Action<ReadOnly_Child>? HasChanged;
#pragma warning restore 67
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ReadOnly_Child Constructor. If isStoring is true, adds ReadOnly_Child to DC.Data.ReadOnly_Children, 
    /// adds ReadOnly_Child to readOnly_Parent.ReadOnly_Children
    /// and if there is a ReadOnlyParentNullable adds ReadOnly_Child to readOnly_ParentNullable.ReadOnly_Children.
    /// </summary>
    public ReadOnly_Child(string text, ReadOnly_Parent readOnlyParent, ReadOnly_ParentNullable? readOnlyParentNullable, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      ReadOnlyParent = readOnlyParent;
      ReadOnlyParentNullable = readOnlyParentNullable;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for ReadOnly_Child read from CSV file
    /// </summary>
    private ReadOnly_Child(int key, CsvReader csvReader, DC context) {
      Key = key;
      Text = csvReader.ReadString();
      var readOnly_ParentKey = csvReader.ReadInt();
      if (context.ReadOnly_Parents.TryGetValue(readOnly_ParentKey, out var readOnlyParent)) {
          ReadOnlyParent = readOnlyParent;
      } else {
        throw new Exception($"Read ReadOnly_Child from CSV file: Cannot find ReadOnlyParent with key {readOnly_ParentKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      }
      var readOnlyParentNullableKey = csvReader.ReadIntNull();
      if (readOnlyParentNullableKey.HasValue) {
        if (context.ReadOnly_ParentNullables.TryGetValue(readOnlyParentNullableKey.Value, out var readOnlyParentNullable)) {
          ReadOnlyParentNullable = readOnlyParentNullable;
        } else {
          ReadOnlyParentNullable = ReadOnly_ParentNullable.NoReadOnly_ParentNullable;
        }
      }
      if (ReadOnlyParent!=ReadOnly_Parent.NoReadOnly_Parent) {
        ReadOnlyParent.AddToReadOnly_Children(this);
      }
      if (readOnlyParentNullableKey.HasValue && ReadOnlyParentNullable!=ReadOnly_ParentNullable.NoReadOnly_ParentNullable) {
        ReadOnlyParentNullable!.AddToReadOnly_Children(this);
      }
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DC context);


    /// <summary>
    /// New ReadOnly_Child read from CSV file
    /// </summary>
    internal static ReadOnly_Child Create(int key, CsvReader csvReader, DC context) {
      return new ReadOnly_Child(key, csvReader, context);
    }


    /// <summary>
    /// Verify that readOnly_Child.ReadOnlyParent exists.
    /// Verify that readOnly_Child.ReadOnlyParentNullable exists.
    /// </summary>
    internal static bool Verify(ReadOnly_Child readOnly_Child) {
      if (readOnly_Child.ReadOnlyParent==ReadOnly_Parent.NoReadOnly_Parent) return false;
      if (readOnly_Child.ReadOnlyParentNullable==ReadOnly_ParentNullable.NoReadOnly_ParentNullable) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ReadOnly_Child to DC.Data.ReadOnly_Children, ReadOnly_Parent and ReadOnly_ParentNullable. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ReadOnly_Child cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      if (ReadOnlyParent.Key<0) {
        throw new Exception($"ReadOnly_Child cannot be stored in DC.Data, ReadOnlyParent is missing or not stored yet." + Environment.NewLine + ToString());
      }
      if (ReadOnlyParentNullable!=null && ReadOnlyParentNullable.Key<0) {
        throw new Exception($"ReadOnly_Child cannot be stored in DC.Data, ReadOnlyParentNullable is not stored yet." + Environment.NewLine + ToString());
      }
      onStore();
      DC.Data.ReadOnly_Children.Add(this);
      ReadOnlyParent.AddToReadOnly_Children(this);
      ReadOnlyParentNullable?.AddToReadOnly_Children(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write ReadOnly_Child to CSV file
    /// </summary>
    public const int MaxLineLength = 150;


    /// <summary>
    /// Write ReadOnly_Child to CSV file
    /// </summary>
    internal static void Write(ReadOnly_Child readOnly_Child, CsvWriter csvWriter) {
      readOnly_Child.onCsvWrite();
      csvWriter.Write(readOnly_Child.Text);
      if (readOnly_Child.ReadOnlyParent.Key<0) throw new Exception($"Cannot write readOnly_Child '{readOnly_Child}' to CSV File, because ReadOnlyParent is not stored in DC.Data.ReadOnly_Parents.");

      csvWriter.Write(readOnly_Child.ReadOnlyParent.Key.ToString());
      if (readOnly_Child.ReadOnlyParentNullable is null) {
        csvWriter.WriteNull();
      } else {
        if (readOnly_Child.ReadOnlyParentNullable.Key<0) throw new Exception($"Cannot write readOnly_Child '{readOnly_Child}' to CSV File, because ReadOnlyParentNullable is not stored in DC.Data.ReadOnly_ParentNullables.");

        csvWriter.Write(readOnly_Child.ReadOnlyParentNullable.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Removing ReadOnly_Child from DC.Data.ReadOnly_Children is not supported.
    /// </summary>
    public void Remove() {
      throw new NotSupportedException("StorageClass attribute AreInstancesDeletable is false.");
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}," +
        $" {ReadOnlyParent.ToShortString()}," +
        $" {ReadOnlyParentNullable?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" ReadOnlyParent: {ReadOnlyParent.ToShortString()}," +
        $" ReadOnlyParentNullable: {ReadOnlyParentNullable?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
