//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ChildrenSortedList_Parent.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageDataContext  {


    /// <summary>
    /// Example of a parent child relationship using a SortedList.
    /// </summary>
  public partial class ChildrenSortedList_Parent: IStorageItemGeneric<ChildrenSortedList_Parent> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ChildrenSortedList_Parent. Gets set once ChildrenSortedList_Parent gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem childrenSortedList_Parent, int key, bool isRollback) {
#if DEBUG
      if (isRollback) {
        if (key==StorageExtensions.NoKey) {
          DC.Trace?.Invoke($"Release ChildrenSortedList_Parent key @{childrenSortedList_Parent.Key} #{childrenSortedList_Parent.GetHashCode()}");
        } else {
          DC.Trace?.Invoke($"Store ChildrenSortedList_Parent key @{key} #{childrenSortedList_Parent.GetHashCode()}");
        }
      }
#endif
      ((ChildrenSortedList_Parent)childrenSortedList_Parent).Key = key;
    }


    /// <summary>
    /// This text is readonly. Readonly only matters when [StorageClass(areInstancesUpdatable: true)]
    /// </summary>
    public string TextReadOnly { get; }


    /// <summary>
    /// This text can be updated
    /// </summary>
    public string TextUpdateable { get; private set; }


    /// <summary>
    /// SortedList used instead of List. Comment is required and indicates which property of the SortedListChild to 
    /// use as key
    /// </summary>
    public IReadOnlyDictionary<DateTime, ChildrenSortedList_Child> ChildrenSortedList_Children => childrenSortedList_Children;
    readonly SortedList<DateTime, ChildrenSortedList_Child> childrenSortedList_Children;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "TextReadOnly", "TextUpdateable"};


    /// <summary>
    /// None existing ChildrenSortedList_Parent
    /// </summary>
    internal static ChildrenSortedList_Parent NoChildrenSortedList_Parent = new ChildrenSortedList_Parent("NoTextReadOnly", "NoTextUpdateable", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of ChildrenSortedList_Parent has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/ChildrenSortedList_Parent, /*new*/ChildrenSortedList_Parent>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ChildrenSortedList_Parent Constructor. If isStoring is true, adds ChildrenSortedList_Parent to DC.Data.ChildrenSortedList_Parents.
    /// </summary>
    public ChildrenSortedList_Parent(string textReadOnly, string textUpdateable, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      TextReadOnly = textReadOnly;
      TextUpdateable = textUpdateable;
      childrenSortedList_Children = new SortedList<DateTime, ChildrenSortedList_Child>();
#if DEBUG
      DC.Trace?.Invoke($"new ChildrenSortedList_Parent: {ToTraceString()}");
#endif
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(24,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public ChildrenSortedList_Parent(ChildrenSortedList_Parent original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      TextReadOnly = original.TextReadOnly;
      TextUpdateable = original.TextUpdateable;
      onCloned(this);
    }
    partial void onCloned(ChildrenSortedList_Parent clone);


    /// <summary>
    /// Constructor for ChildrenSortedList_Parent read from CSV file
    /// </summary>
    private ChildrenSortedList_Parent(int key, CsvReader csvReader){
      Key = key;
      TextReadOnly = csvReader.ReadString();
      TextUpdateable = csvReader.ReadString();
      childrenSortedList_Children = new SortedList<DateTime, ChildrenSortedList_Child>();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New ChildrenSortedList_Parent read from CSV file
    /// </summary>
    internal static ChildrenSortedList_Parent Create(int key, CsvReader csvReader) {
      return new ChildrenSortedList_Parent(key, csvReader);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ChildrenSortedList_Parent to DC.Data.ChildrenSortedList_Parents.<br/>
    /// Throws an Exception when ChildrenSortedList_Parent is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ChildrenSortedList_Parent cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data.ChildrenSortedList_Parents.Add(this);
      onStored();
#if DEBUG
      DC.Trace?.Invoke($"Stored ChildrenSortedList_Parent #{GetHashCode()} @{Key}");
#endif
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write ChildrenSortedList_Parent to CSV file
    /// </summary>
    public const int EstimatedLineLength = 300;


    /// <summary>
    /// Write ChildrenSortedList_Parent to CSV file
    /// </summary>
    internal static void Write(ChildrenSortedList_Parent childrenSortedList_Parent, CsvWriter csvWriter) {
      childrenSortedList_Parent.onCsvWrite();
      csvWriter.Write(childrenSortedList_Parent.TextReadOnly);
      csvWriter.Write(childrenSortedList_Parent.TextUpdateable);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates ChildrenSortedList_Parent with the provided values
    /// </summary>
    public void Update(string textUpdateable) {
      var clone = new ChildrenSortedList_Parent(this);
      var isCancelled = false;
      onUpdating(textUpdateable, ref isCancelled);
      if (isCancelled) return;

#if DEBUG
      DC.Trace?.Invoke($"Updating ChildrenSortedList_Parent: {ToTraceString()}");
#endif
      var isChangeDetected = false;
      if (TextUpdateable!=textUpdateable) {
        TextUpdateable = textUpdateable;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data.ChildrenSortedList_Parents.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(24, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
#if DEBUG
      DC.Trace?.Invoke($"Updated ChildrenSortedList_Parent: {ToTraceString()}");
#endif
    }
    partial void onUpdating(string textUpdateable, ref bool isCancelled);
    partial void onUpdated(ChildrenSortedList_Parent old);


    /// <summary>
    /// Updates this ChildrenSortedList_Parent with values from CSV file
    /// </summary>
    internal static void Update(ChildrenSortedList_Parent childrenSortedList_Parent, CsvReader csvReader){
      var textReadOnly = csvReader.ReadString();
      if (childrenSortedList_Parent.TextReadOnly!=textReadOnly) {
        throw new Exception($"ChildrenSortedList_Parent.Update(): Property TextReadOnly '{childrenSortedList_Parent.TextReadOnly}' is " +
          $"readonly, textReadOnly '{textReadOnly}' read from the CSV file should be the same." + Environment.NewLine + 
          childrenSortedList_Parent.ToString());
      }
      childrenSortedList_Parent.TextUpdateable = csvReader.ReadString();
      childrenSortedList_Parent.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Add childrenSortedList_Child to ChildrenSortedList_Children.
    /// </summary>
    internal void AddToChildrenSortedList_Children(ChildrenSortedList_Child childrenSortedList_Child) {
#if DEBUG
      if (childrenSortedList_Child==ChildrenSortedList_Child.NoChildrenSortedList_Child) throw new Exception();
      if ((childrenSortedList_Child.Key>=0)&&(Key<0)) throw new Exception();
      if (childrenSortedList_Children.ContainsKey(childrenSortedList_Child.DateKey)) throw new Exception();
#endif
      childrenSortedList_Children.Add(childrenSortedList_Child.DateKey, childrenSortedList_Child);
      onAddedToChildrenSortedList_Children(childrenSortedList_Child);
#if DEBUG
      DC.Trace?.Invoke($"Add ChildrenSortedList_Child {childrenSortedList_Child.GetKeyOrHash()} to " +
        $"{this.GetKeyOrHash()} ChildrenSortedList_Parent.ChildrenSortedList_Children");
#endif
    }
    partial void onAddedToChildrenSortedList_Children(ChildrenSortedList_Child childrenSortedList_Child);


    /// <summary>
    /// Removes childrenSortedList_Child from ChildrenSortedList_Parent.
    /// </summary>
    internal void RemoveFromChildrenSortedList_Children(ChildrenSortedList_Child childrenSortedList_Child) {
#if DEBUG
      if (!childrenSortedList_Children.Remove(childrenSortedList_Child.DateKey)) throw new Exception();
#else
        childrenSortedList_Children.Remove(childrenSortedList_Child.DateKey);
#endif
      onRemovedFromChildrenSortedList_Children(childrenSortedList_Child);
#if DEBUG
      DC.Trace?.Invoke($"Remove ChildrenSortedList_Child {childrenSortedList_Child.GetKeyOrHash()} from " +
        $"{this.GetKeyOrHash()} ChildrenSortedList_Parent.ChildrenSortedList_Children");
#endif
    }
    partial void onRemovedFromChildrenSortedList_Children(ChildrenSortedList_Child childrenSortedList_Child);


    /// <summary>
    /// Removes ChildrenSortedList_Parent from DC.Data.ChildrenSortedList_Parents.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"ChildrenSortedList_Parent.Release(): ChildrenSortedList_Parent '{this}' is not stored in DC.Data, key is {Key}.");
      }
      foreach (var childrenSortedList_Child in ChildrenSortedList_Children.Values) {
        if (childrenSortedList_Child?.Key>=0) {
          throw new Exception($"Cannot release ChildrenSortedList_Parent '{this}' " + Environment.NewLine + 
            $"because '{childrenSortedList_Child}' in ChildrenSortedList_Parent.ChildrenSortedList_Children is still stored.");
        }
      }
      onReleased();
      DC.Data.ChildrenSortedList_Parents.Remove(Key);
#if DEBUG
      DC.Trace?.Invoke($"Released ChildrenSortedList_Parent @{Key} #{GetHashCode()}");
#endif
    }
    partial void onReleased();


    /// <summary>
    /// Undoes the new() statement as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var childrenSortedList_Parent = (ChildrenSortedList_Parent) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback new ChildrenSortedList_Parent(): {childrenSortedList_Parent.ToTraceString()}");
#endif
      childrenSortedList_Parent.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases ChildrenSortedList_Parent from DC.Data.ChildrenSortedList_Parents as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var childrenSortedList_Parent = (ChildrenSortedList_Parent) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback ChildrenSortedList_Parent.Store(): {childrenSortedList_Parent.ToTraceString()}");
#endif
      childrenSortedList_Parent.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the ChildrenSortedList_Parent item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (ChildrenSortedList_Parent) oldStorageItem;
      var newItem = (ChildrenSortedList_Parent) newStorageItem;
#if DEBUG
      DC.Trace?.Invoke($"Rolling back ChildrenSortedList_Parent.Update(): {newItem.ToTraceString()}");
#endif
      if (newItem.TextReadOnly!=oldItem.TextReadOnly) {
        throw new Exception($"ChildrenSortedList_Parent.Update(): Property TextReadOnly '{newItem.TextReadOnly}' is " +
          $"readonly, TextReadOnly '{oldItem.TextReadOnly}' read from the CSV file should be the same." + Environment.NewLine + 
          newItem.ToString());
      }
      newItem.TextUpdateable = oldItem.TextUpdateable;
      newItem.onRollbackItemUpdated(oldItem);
#if DEBUG
      DC.Trace?.Invoke($"Rolled back ChildrenSortedList_Parent.Update(): {newItem.ToTraceString()}");
#endif
    }
    partial void onRollbackItemUpdated(ChildrenSortedList_Parent oldChildrenSortedList_Parent);


    /// <summary>
    /// Adds ChildrenSortedList_Parent to DC.Data.ChildrenSortedList_Parents as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var childrenSortedList_Parent = (ChildrenSortedList_Parent) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback ChildrenSortedList_Parent.Release(): {childrenSortedList_Parent.ToTraceString()}");
#endif
      childrenSortedList_Parent.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {TextReadOnly}|" +
        $" {TextUpdateable}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {TextReadOnly}," +
        $" {TextUpdateable}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" TextReadOnly: {TextReadOnly}," +
        $" TextUpdateable: {TextUpdateable}," +
        $" ChildrenSortedList_Children: {ChildrenSortedList_Children.Count};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
