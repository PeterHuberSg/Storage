//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into DemoParent.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageDataContext  {


    /// <summary>
    /// Demo parent
    /// </summary>
    /// 
  public partial class DemoParent{

    public string DemoParentData { get; private set; }

    public IReadOnlyList<DemoChild> DemoChildren => demoChildren;
    readonly List<DemoChild> demoChildren;

    public DemoParent(string demoParentData, bool isStoring = true) {
      DemoParentData = demoParentData;
      demoChildren = new List<DemoChild>();
      DC.Trace?.Invoke($"new DemoParent: {ToString()}");
      onConstruct();
      DC.Data.AddTransaction(new TransactionItem(29,TransactionActivityEnum.New, 1, this));
    }
    partial void onConstruct();

    public void Store() {
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();

    public void Update(string demoParentData) {
    }
    partial void onUpdating(string demoParentData, ref bool isCancelled);
    partial void onUpdated(DemoParent old);

    internal void AddToDemoChildren(DemoChild demoChild) {
    }
    partial void onAddedToDemoChildren(DemoChild demoChild);

    internal void RemoveFromDemoChildren(DemoChild demoChild) {
    }
    partial void onRemovedFromDemoChildren(DemoChild demoChild);

    public void Release() {
    }
    partial void onReleased();
  }
}
