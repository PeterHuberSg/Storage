//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into Lookup_Parent.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageDataContext  {


    /// <summary>
    /// Parent of children who use lookup, i.e. parent has no children collection. areInstancesDeletable
    /// must be false.
    /// </summary>
  public partial class Lookup_Parent: IStorageItemGeneric<Lookup_Parent> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for Lookup_Parent. Gets set once Lookup_Parent gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem lookup_Parent, int key) {
      ((Lookup_Parent)lookup_Parent).Key = key;
    }


    /// <summary>
    /// Stores only dates but no times.
    ///  </summary>
    public DateTime Date { get; private set; }


    /// <summary>
    /// Stores decimal with 2 digits after comma.
    ///  </summary>
    public decimal SomeValue { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Date", "SomeValue"};


    /// <summary>
    /// None existing Lookup_Parent
    /// </summary>
    internal static Lookup_Parent NoLookup_Parent = new Lookup_Parent(DateTime.MinValue.Date, Decimal.MinValue, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of Lookup_Parent has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/Lookup_Parent, /*new*/Lookup_Parent>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// Lookup_Parent Constructor. If isStoring is true, adds Lookup_Parent to DC.Data.Lookup_Parents.
    /// </summary>
    public Lookup_Parent(DateTime date, decimal someValue, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Date = date.Floor(Rounding.Days);
      SomeValue = someValue.Round(2);
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public Lookup_Parent(Lookup_Parent original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Date = original.Date;
      SomeValue = original.SomeValue;
      onCloned(this);
    }
    partial void onCloned(Lookup_Parent clone);


    /// <summary>
    /// Constructor for Lookup_Parent read from CSV file
    /// </summary>
    private Lookup_Parent(int key, CsvReader csvReader){
      Key = key;
      Date = csvReader.ReadDate();
      SomeValue = csvReader.ReadDecimal();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New Lookup_Parent read from CSV file
    /// </summary>
    internal static Lookup_Parent Create(int key, CsvReader csvReader) {
      return new Lookup_Parent(key, csvReader);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds Lookup_Parent to DC.Data.Lookup_Parents. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"Lookup_Parent cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data.Lookup_Parents.Add(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write Lookup_Parent to CSV file
    /// </summary>
    public const int EstimatedLineLength = 23;


    /// <summary>
    /// Write Lookup_Parent to CSV file
    /// </summary>
    internal static void Write(Lookup_Parent lookup_Parent, CsvWriter csvWriter) {
      lookup_Parent.onCsvWrite();
      csvWriter.WriteDate(lookup_Parent.Date);
      csvWriter.WriteDecimal2(lookup_Parent.SomeValue);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates Lookup_Parent with the provided values
    /// </summary>
    public void Update(DateTime date, decimal someValue) {
      var clone = new Lookup_Parent(this);
      var isCancelled = false;
      onUpdating(date, someValue, ref isCancelled);
      if (isCancelled) return;

      var isChangeDetected = false;
      var dateRounded = date.Floor(Rounding.Days);
      if (Date!=dateRounded) {
        Date = dateRounded;
        isChangeDetected = true;
      }
      var someValueRounded = someValue.Round(2);
      if (SomeValue!=someValueRounded) {
        SomeValue = someValueRounded;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data.Lookup_Parents.ItemHasChanged(clone, this);
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(DateTime date, decimal someValue, ref bool isCancelled);
    partial void onUpdated(Lookup_Parent old);


    /// <summary>
    /// Updates this Lookup_Parent with values from CSV file
    /// </summary>
    internal static void Update(Lookup_Parent lookup_Parent, CsvReader csvReader){
      lookup_Parent.Date = csvReader.ReadDate();
      lookup_Parent.SomeValue = csvReader.ReadDecimal();
      lookup_Parent.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removing Lookup_Parent from DC.Data.Lookup_Parents is not supported.
    /// </summary>
    public void Remove() {
      throw new NotSupportedException("StorageClass attribute AreInstancesDeletable is false.");
    }


    /// <summary>
    /// Removes Lookup_Parent from possible parents as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var lookup_Parent = (Lookup_Parent) item;
      lookup_Parent.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the Lookup_Parent item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldItem, IStorageItem newItem) {
      var lookup_ParentOld = (Lookup_Parent) oldItem;
      var lookup_ParentNew = (Lookup_Parent) newItem;
      lookup_ParentNew.Date = lookup_ParentOld.Date;
      lookup_ParentNew.SomeValue = lookup_ParentOld.SomeValue;
      lookup_ParentNew.onRollbackItemUpdated(lookup_ParentOld);
    }
    partial void onRollbackItemUpdated(Lookup_Parent oldLookup_Parent);


    /// <summary>
    /// Adds Lookup_Parent item to possible parents again as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemRemove(IStorageItem item) {
      var lookup_Parent = (Lookup_Parent) item;
      lookup_Parent.onRollbackItemRemoved();
    }
    partial void onRollbackItemRemoved();


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Date.ToShortDateString()}," +
        $" {SomeValue}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Date: {Date.ToShortDateString()}," +
        $" SomeValue: {SomeValue};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
