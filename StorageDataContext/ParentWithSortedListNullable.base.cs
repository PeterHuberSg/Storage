//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ParentWithSortedListNullable.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// Example of a parent child relationship using a SortedList where the child's parent property is nullable.
    /// </summary>
  public partial class ParentWithSortedListNullable: IStorage<ParentWithSortedListNullable> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ParentWithSortedListNullable. Gets set once ParentWithSortedListNullable gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(ParentWithSortedListNullable parentWithSortedListNullable, int key) { parentWithSortedListNullable.Key = key; }


    /// <summary>
    /// This text is readonly. Readonly only matters when [StorageClass(areInstancesUpdatable: true)]
    /// </summary>
    public string TextReadOnly { get; }


    /// <summary>
    /// This text can be updated
    /// </summary>
    public string TextUpdateable { get; private set; }


    /// <summary>
    /// SortedList used instead of List. Comment is required and indicates which property of the SortedListChild to 
    /// use as key
    /// </summary>
    public IReadOnlyDictionary<DateTime, SortedListChild> SortedListChildren => sortedListChildren;
    readonly SortedList<DateTime, SortedListChild> sortedListChildren;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "TextReadOnly", "TextUpdateable"};


    /// <summary>
    /// None existing ParentWithSortedListNullable
    /// </summary>
    internal static ParentWithSortedListNullable NoParentWithSortedListNullable = new ParentWithSortedListNullable("NoTextReadOnly", "NoTextUpdateable", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of ParentWithSortedListNullable has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action<ParentWithSortedListNullable>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ParentWithSortedListNullable Constructor. If isStoring is true, adds ParentWithSortedListNullable to DC.Data.ParentsWithSortedListNullable.
    /// </summary>
    public ParentWithSortedListNullable(string textReadOnly, string textUpdateable, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      TextReadOnly = textReadOnly;
      TextUpdateable = textUpdateable;
      sortedListChildren = new SortedList<DateTime, SortedListChild>();
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for ParentWithSortedListNullable read from CSV file
    /// </summary>
    private ParentWithSortedListNullable(int key, CsvReader csvReader, DC context) {
      Key = key;
      TextReadOnly = csvReader.ReadString();
      TextUpdateable = csvReader.ReadString();
      sortedListChildren = new SortedList<DateTime, SortedListChild>();
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DC context);


    /// <summary>
    /// New ParentWithSortedListNullable read from CSV file
    /// </summary>
    internal static ParentWithSortedListNullable Create(int key, CsvReader csvReader, DC context) {
      return new ParentWithSortedListNullable(key, csvReader, context);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ParentWithSortedListNullable to DC.Data.ParentsWithSortedListNullable. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ParentWithSortedListNullable can not be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      onStore();
      DC.Data.ParentsWithSortedListNullable.Add(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write ParentWithSortedListNullable to CSV file
    /// </summary>
    public const int MaxLineLength = 300;


    /// <summary>
    /// Write ParentWithSortedListNullable to CSV file
    /// </summary>
    internal static void Write(ParentWithSortedListNullable parentWithSortedListNullable, CsvWriter csvWriter) {
      parentWithSortedListNullable.onCsvWrite();
      csvWriter.Write(parentWithSortedListNullable.TextReadOnly);
      csvWriter.Write(parentWithSortedListNullable.TextUpdateable);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates ParentWithSortedListNullable with the provided values
    /// </summary>
    public void Update(string textUpdateable) {
      var isChangeDetected = false;
      if (TextUpdateable!=textUpdateable) {
        TextUpdateable = textUpdateable;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdate();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdate();


    /// <summary>
    /// Updates this ParentWithSortedListNullable with values from CSV file
    /// </summary>
    internal static void Update(ParentWithSortedListNullable parentWithSortedListNullable, CsvReader csvReader, DC _) {
      var value = csvReader.ReadString();
      if (parentWithSortedListNullable.TextReadOnly!=value) {
        throw new Exception($"ParentWithSortedListNullable.Update(): Property TextReadOnly '{parentWithSortedListNullable.TextReadOnly}' is " +
          $"readonly, the value '{value}' read from the CSV file should be the same." + Environment.NewLine + 
          parentWithSortedListNullable.ToString());
      }
      parentWithSortedListNullable.TextUpdateable = csvReader.ReadString();
      parentWithSortedListNullable.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Add sortedListChild to SortedListChildren.
    /// </summary>
    internal void AddToSortedListChildren(SortedListChild sortedListChild) {
      sortedListChildren.Add(sortedListChild.DateKey, sortedListChild);
      onAddedToSortedListChildren(sortedListChild);
    }
    partial void onAddedToSortedListChildren(SortedListChild sortedListChild);


    /// <summary>
    /// Removes sortedListChild from SortedListChildren.
    /// </summary>
    internal void RemoveFromSortedListChildren(SortedListChild sortedListChild) {
#if DEBUG
      if (!sortedListChildren.Remove(sortedListChild.DateKey)) throw new Exception();
#else
        sortedListChildren.Remove(sortedListChild.DateKey);
#endif
      onRemovedFromSortedListChildren(sortedListChild);
    }
    partial void onRemovedFromSortedListChildren(SortedListChild sortedListChild);


    /// <summary>
    /// Removes ParentWithSortedListNullable from DC.Data.ParentsWithSortedListNullable and 
    /// disconnects SortedListChild.ParentWithSortedListNullable from SortedListChildren.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"ParentWithSortedListNullable.Remove(): ParentWithSortedListNullable 'Class ParentWithSortedListNullable' is not stored in DC.Data, key is {Key}.");
      }
      onRemove();
      DC.Data.ParentsWithSortedListNullable.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Disconnects SortedListChild.ParentWithSortedListNullable from SortedListChildren.
    /// </summary>
    internal static void Disconnect(ParentWithSortedListNullable parentWithSortedListNullable) {
      var sortedListChildren = new SortedListChild[parentWithSortedListNullable.SortedListChildren.Count];
      parentWithSortedListNullable.sortedListChildren.Values.CopyTo(sortedListChildren, 0);
      foreach (var sortedListChild in sortedListChildren) {
        sortedListChild.RemoveParentWithSortedListNullable(parentWithSortedListNullable);
      }
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {TextReadOnly}," +
        $" {TextUpdateable}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" TextReadOnly: {TextReadOnly}," +
        $" TextUpdateable: {TextUpdateable}," +
        $" SortedListChildren: {SortedListChildren.Count};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }


  #region ParentWithSortedListNullableWriter
  //      ----------------------------------

  /// <summary>
  /// Writes a CSV file containing records which can be read back as ParentWithSortedListNullable. Note that the keys of linked objects
  /// need to be provided in Write(), since the data context will not be involved.
  /// </summary>
  public class ParentWithSortedListNullableWriter: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvWriter csvWriter;
    int lastKey = int.MinValue;


    /// <summary>
    /// Constructor, will write the ParentWithSortedListNullable header line into the CSV file. Dispose ParentWithSortedListNullableWriter once done.
    /// </summary>
    public ParentWithSortedListNullableWriter(string? fileNamePath, CsvConfig csvConfig, int maxLineCharLenght) {
      this.csvConfig = csvConfig;
      csvWriter = new CsvWriter(fileNamePath, csvConfig, maxLineCharLenght, null, 0);
      var csvHeaderString = Csv.ToCsvHeaderString(ParentWithSortedListNullable.Headers, csvConfig.Delimiter);
      csvWriter.WriteLine(csvHeaderString);
    }


    /// <summary>
    /// Writes the details of one ParentWithSortedListNullable to the CSV file
    /// </summary>
    public void Write(int key, string textReadOnly, string textUpdateable) {
      if (key<0) {
        throw new Exception($"ParentWithSortedListNullable's key {key} needs to be greater equal 0.");
      }
      if (key<=lastKey) {
        throw new Exception($"ParentWithSortedListNullable's key {key} must be greater than the last written ParentWithSortedListNullable's key {lastKey}.");
      }
      lastKey = key;
      csvWriter.WriteFirstLineChar(csvConfig.LineCharAdd);
      csvWriter.Write(key);
      csvWriter.Write(textReadOnly);
      csvWriter.Write(textUpdateable);
      csvWriter.WriteEndOfLine();
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of ParentWithSortedListNullableWriter exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is ParentWithSortedListNullableWriter already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvWriter.Dispose();
    }
    #endregion
  }
  #endregion
}
