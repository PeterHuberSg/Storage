//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ReadOnly_ParentNullable.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// Example of a "readonly" Parent, i.e. the parent's properties will not change and the parent will never get
    /// deleted, but it is still possible to add children, but not to remove them. The parent property in the child 
    /// is nullable.
    /// </summary>
  public partial class ReadOnly_ParentNullable: IStorage<ReadOnly_ParentNullable> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ReadOnly_ParentNullable. Gets set once ReadOnly_ParentNullable gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(ReadOnly_ParentNullable readOnly_ParentNullable, int key) { readOnly_ParentNullable.Key = key; }


    /// <summary>
    /// Readonly Text, because class is not updatable
    /// </summary>
    public string Text { get; }


    /// <summary>
    /// List of children
    /// </summary>
    public IReadOnlyList<ReadOnly_Child> ReadOnly_Children => readOnly_Children;
    readonly List<ReadOnly_Child> readOnly_Children;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Text"};


    /// <summary>
    /// None existing ReadOnly_ParentNullable
    /// </summary>
    internal static ReadOnly_ParentNullable NoReadOnly_ParentNullable = new ReadOnly_ParentNullable("NoText", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// This event will never be raised, but is needed to comply with IStorage.
    /// </summary>
#pragma warning disable 67
    public event Action<ReadOnly_ParentNullable>? HasChanged;
#pragma warning restore 67
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ReadOnly_ParentNullable Constructor. If isStoring is true, adds ReadOnly_ParentNullable to DC.Data.ReadOnly_ParentNullables.
    /// </summary>
    public ReadOnly_ParentNullable(string text, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      readOnly_Children = new List<ReadOnly_Child>();
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for ReadOnly_ParentNullable read from CSV file
    /// </summary>
    private ReadOnly_ParentNullable(int key, CsvReader csvReader, DC context) {
      Key = key;
      Text = csvReader.ReadString();
      readOnly_Children = new List<ReadOnly_Child>();
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DC context);


    /// <summary>
    /// New ReadOnly_ParentNullable read from CSV file
    /// </summary>
    internal static ReadOnly_ParentNullable Create(int key, CsvReader csvReader, DC context) {
      return new ReadOnly_ParentNullable(key, csvReader, context);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ReadOnly_ParentNullable to DC.Data.ReadOnly_ParentNullables. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ReadOnly_ParentNullable cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      onStore();
      DC.Data.ReadOnly_ParentNullables.Add(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write ReadOnly_ParentNullable to CSV file
    /// </summary>
    public const int MaxLineLength = 150;


    /// <summary>
    /// Write ReadOnly_ParentNullable to CSV file
    /// </summary>
    internal static void Write(ReadOnly_ParentNullable readOnly_ParentNullable, CsvWriter csvWriter) {
      readOnly_ParentNullable.onCsvWrite();
      csvWriter.Write(readOnly_ParentNullable.Text);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Add readOnly_Child to ReadOnly_Children.
    /// </summary>
    internal void AddToReadOnly_Children(ReadOnly_Child readOnly_Child) {
      readOnly_Children.Add(readOnly_Child);
      onAddedToReadOnly_Children(readOnly_Child);
    }
    partial void onAddedToReadOnly_Children(ReadOnly_Child readOnly_Child);


    /// <summary>
    /// Removing ReadOnly_ParentNullable from DC.Data.ReadOnly_ParentNullables is not supported.
    /// </summary>
    public void Remove() {
      throw new NotSupportedException("StorageClass attribute AreInstancesDeletable is false.");
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" ReadOnly_Children: {ReadOnly_Children.Count};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }


  #region ReadOnly_ParentNullableWriter
  //      -----------------------------

  /// <summary>
  /// Writes a CSV file containing records which can be read back as ReadOnly_ParentNullable. Note that the keys of linked objects
  /// need to be provided in Write(), since the data context will not be involved.
  /// </summary>
  public class ReadOnly_ParentNullableWriter: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvWriter csvWriter;


    /// <summary>
    /// Constructor, will write the ReadOnly_ParentNullable header line into the CSV file. Dispose ReadOnly_ParentNullableWriter once done.
    /// </summary>
    public ReadOnly_ParentNullableWriter(string? fileNamePath, CsvConfig csvConfig, int maxLineCharLenght) {
      this.csvConfig = csvConfig;
      csvWriter = new CsvWriter(fileNamePath, csvConfig, maxLineCharLenght, null, 0);
      var csvHeaderString = Csv.ToCsvHeaderString(ReadOnly_ParentNullable.Headers, csvConfig.Delimiter);
      csvWriter.WriteLine(csvHeaderString);
    }


    /// <summary>
    /// Writes the details of one ReadOnly_ParentNullable to the CSV file
    /// </summary>
    public void Write(string text) {
      csvWriter.StartNewLine();
      csvWriter.Write(text);
      csvWriter.WriteEndOfLine();
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of ReadOnly_ParentNullableWriter exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is ReadOnly_ParentNullableWriter already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvWriter.Dispose();
    }
    #endregion
  }
  #endregion
}
