//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into Lookup_Child.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageDataContext  {


    /// <summary>
    /// Example of a child with a none nullable and a nullable lookup parent. The child maintains links
    /// to its parents, but the parents don't have children collections.
    /// </summary>
  public partial class Lookup_Child: IStorageItemGeneric<Lookup_Child> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for Lookup_Child. Gets set once Lookup_Child gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem lookup_Child, int key, bool isRollback) {
#if DEBUG
      if (isRollback) {
        if (key==StorageExtensions.NoKey) {
          DC.Trace?.Invoke($"Release Lookup_Child key @{lookup_Child.Key} #{lookup_Child.GetHashCode()}");
        } else {
          DC.Trace?.Invoke($"Store Lookup_Child key @{key} #{lookup_Child.GetHashCode()}");
        }
      }
#endif
      ((Lookup_Child)lookup_Child).Key = key;
    }


    /// <summary>
    /// Some info
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Parent does not have a collection for LookupChild, because the child wants to use it only for
    /// lookup. This property requires a parent.
    /// </summary>
    public Lookup_Parent LookupParent { get; private set; }


    /// <summary>
    /// Parent does not have a collection for LookupChild, because the child wants to use it only for
    /// lookup. This property does not require a parent.
    /// </summary>
    public Lookup_ParentNullable? LookupParentNullable { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Text", "LookupParent", "LookupParentNullable"};


    /// <summary>
    /// None existing Lookup_Child
    /// </summary>
    internal static Lookup_Child NoLookup_Child = new Lookup_Child("NoText", Lookup_Parent.NoLookup_Parent, null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of Lookup_Child has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/Lookup_Child, /*new*/Lookup_Child>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// Lookup_Child Constructor. If isStoring is true, adds Lookup_Child to DC.Data.Lookup_Children.
    /// </summary>
    public Lookup_Child(string text, Lookup_Parent lookupParent, Lookup_ParentNullable? lookupParentNullable, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      LookupParent = lookupParent;
      LookupParentNullable = lookupParentNullable;
#if DEBUG
      DC.Trace?.Invoke($"new Lookup_Child: {ToTraceString()}");
#endif
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(10,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public Lookup_Child(Lookup_Child original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Text = original.Text;
      LookupParent = original.LookupParent;
      LookupParentNullable = original.LookupParentNullable;
      onCloned(this);
    }
    partial void onCloned(Lookup_Child clone);


    /// <summary>
    /// Constructor for Lookup_Child read from CSV file
    /// </summary>
    private Lookup_Child(int key, CsvReader csvReader){
      Key = key;
      Text = csvReader.ReadString();
      var lookup_ParentKey = csvReader.ReadInt();
      if (DC.Data.Lookup_Parents.TryGetValue(lookup_ParentKey, out var lookupParent)) {
          LookupParent = lookupParent;
      } else {
        throw new Exception($"Read Lookup_Child from CSV file: Cannot find LookupParent with key {lookup_ParentKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      }
      var lookupParentNullableKey = csvReader.ReadIntNull();
      if (lookupParentNullableKey.HasValue) {
        if (DC.Data.Lookup_ParentNullables.TryGetValue(lookupParentNullableKey.Value, out var lookupParentNullable)) {
          LookupParentNullable = lookupParentNullable;
        } else {
          LookupParentNullable = Lookup_ParentNullable.NoLookup_ParentNullable;
        }
      }
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New Lookup_Child read from CSV file
    /// </summary>
    internal static Lookup_Child Create(int key, CsvReader csvReader) {
      return new Lookup_Child(key, csvReader);
    }


    /// <summary>
    /// Verify that lookup_Child.LookupParent exists.
    /// Verify that lookup_Child.LookupParentNullable exists.
    /// </summary>
    internal static bool Verify(Lookup_Child lookup_Child) {
      if (lookup_Child.LookupParent==Lookup_Parent.NoLookup_Parent) return false;
      if (lookup_Child.LookupParentNullable==Lookup_ParentNullable.NoLookup_ParentNullable) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds Lookup_Child to DC.Data.Lookup_Children.<br/>
    /// Throws an Exception when Lookup_Child is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"Lookup_Child cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      if (LookupParent.Key<0) {
        throw new Exception($"Cannot store child Lookup_Child '{this}'.LookupParent to Lookup_Parent '{LookupParent}' because parent is not stored yet.");
      }
      if (LookupParentNullable?.Key<0) {
        throw new Exception($"Cannot store child Lookup_Child '{this}'.LookupParentNullable to Lookup_ParentNullable '{LookupParentNullable}' because parent is not stored yet.");
      }
      DC.Data.Lookup_Children.Add(this);
      onStored();
#if DEBUG
      DC.Trace?.Invoke($"Stored Lookup_Child #{GetHashCode()} @{Key}");
#endif
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write Lookup_Child to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write Lookup_Child to CSV file
    /// </summary>
    internal static void Write(Lookup_Child lookup_Child, CsvWriter csvWriter) {
      lookup_Child.onCsvWrite();
      csvWriter.Write(lookup_Child.Text);
      if (lookup_Child.LookupParent.Key<0) throw new Exception($"Cannot write lookup_Child '{lookup_Child}' to CSV File, because LookupParent is not stored in DC.Data.Lookup_Parents.");

      csvWriter.Write(lookup_Child.LookupParent.Key.ToString());
      if (lookup_Child.LookupParentNullable is null) {
        csvWriter.WriteNull();
      } else {
        if (lookup_Child.LookupParentNullable.Key<0) throw new Exception($"Cannot write lookup_Child '{lookup_Child}' to CSV File, because LookupParentNullable is not stored in DC.Data.Lookup_ParentNullables.");

        csvWriter.Write(lookup_Child.LookupParentNullable.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates Lookup_Child with the provided values
    /// </summary>
    public void Update(string text, Lookup_Parent lookupParent, Lookup_ParentNullable? lookupParentNullable) {
      if (Key>=0){
        if (lookupParent.Key<0) {
          throw new Exception($"Lookup_Child.Update(): It is illegal to add stored Lookup_Child '{this}'" + Environment.NewLine + 
            $"to LookupParent '{lookupParent}', which is not stored.");
        }
        if (lookupParentNullable?.Key<0) {
          throw new Exception($"Lookup_Child.Update(): It is illegal to add stored Lookup_Child '{this}'" + Environment.NewLine + 
            $"to LookupParentNullable '{lookupParentNullable}', which is not stored.");
        }
      }
      var clone = new Lookup_Child(this);
      var isCancelled = false;
      onUpdating(text, lookupParent, lookupParentNullable, ref isCancelled);
      if (isCancelled) return;

#if DEBUG
      DC.Trace?.Invoke($"Updating Lookup_Child: {ToTraceString()}");
#endif
      var isChangeDetected = false;
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (LookupParent!=lookupParent) {
        LookupParent = lookupParent;
        isChangeDetected = true;
      }
      if (LookupParentNullable is null) {
        if (lookupParentNullable is null) {
          //nothing to do
        } else {
          LookupParentNullable = lookupParentNullable;
          isChangeDetected = true;
        }
      } else {
        if (lookupParentNullable is null) {
          LookupParentNullable = null;
          isChangeDetected = true;
        } else {
          if (LookupParentNullable!=lookupParentNullable) {
            LookupParentNullable = lookupParentNullable;
            isChangeDetected = true;
          }
        }
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data.Lookup_Children.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(10, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
#if DEBUG
      DC.Trace?.Invoke($"Updated Lookup_Child: {ToTraceString()}");
#endif
    }
    partial void onUpdating(string text, Lookup_Parent lookupParent, Lookup_ParentNullable? lookupParentNullable, ref bool isCancelled);
    partial void onUpdated(Lookup_Child old);


    /// <summary>
    /// Updates this Lookup_Child with values from CSV file
    /// </summary>
    internal static void Update(Lookup_Child lookup_Child, CsvReader csvReader){
      lookup_Child.Text = csvReader.ReadString();
      if (!DC.Data.Lookup_Parents.TryGetValue(csvReader.ReadInt(), out var lookupParent)) {
        lookupParent = Lookup_Parent.NoLookup_Parent;
      }
      if (lookup_Child.LookupParent!=lookupParent) {
        lookup_Child.LookupParent = lookupParent;
      }
      var lookupParentNullableKey = csvReader.ReadIntNull();
      Lookup_ParentNullable? lookupParentNullable;
      if (lookupParentNullableKey is null) {
        lookupParentNullable = null;
      } else {
        if (!DC.Data.Lookup_ParentNullables.TryGetValue(lookupParentNullableKey.Value, out lookupParentNullable)) {
          lookupParentNullable = Lookup_ParentNullable.NoLookup_ParentNullable;
        }
      }
      if (lookup_Child.LookupParentNullable is null) {
        if (lookupParentNullable is null) {
          //nothing to do
        } else {
          lookup_Child.LookupParentNullable = lookupParentNullable;
        }
      } else {
        if (lookupParentNullable is null) {
          lookup_Child.LookupParentNullable = null;
        } else {
          lookup_Child.LookupParentNullable = lookupParentNullable;
        }
      }
      lookup_Child.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes Lookup_Child from DC.Data.Lookup_Children.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"Lookup_Child.Release(): Lookup_Child '{this}' is not stored in DC.Data, key is {Key}.");
      }
      onReleased();
      DC.Data.Lookup_Children.Remove(Key);
#if DEBUG
      DC.Trace?.Invoke($"Released Lookup_Child @{Key} #{GetHashCode()}");
#endif
    }
    partial void onReleased();


    /// <summary>
    /// Removes Lookup_Child from parents as part of a transaction rollback of the new() statement.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var lookup_Child = (Lookup_Child) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback new Lookup_Child(): {lookup_Child.ToTraceString()}");
#endif
      lookup_Child.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases Lookup_Child from DC.Data.Lookup_Children as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var lookup_Child = (Lookup_Child) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback Lookup_Child.Store(): {lookup_Child.ToTraceString()}");
#endif
      lookup_Child.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the Lookup_Child item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (Lookup_Child) oldStorageItem;
      var newItem = (Lookup_Child) newStorageItem;
#if DEBUG
      DC.Trace?.Invoke($"Rolling back Lookup_Child.Update(): {newItem.ToTraceString()}");
#endif
      newItem.Text = oldItem.Text;
      if (newItem.LookupParent!=oldItem.LookupParent) {
        newItem.LookupParent = oldItem.LookupParent;
      }
      if (newItem.LookupParentNullable is null) {
        if (oldItem.LookupParentNullable is null) {
          //nothing to do
        } else {
          newItem.LookupParentNullable = oldItem.LookupParentNullable;
        }
      } else {
        if (oldItem.LookupParentNullable is null) {
          newItem.LookupParentNullable = null;
        } else {
          if (oldItem.LookupParentNullable!=newItem.LookupParentNullable) {
          newItem.LookupParentNullable = oldItem.LookupParentNullable;
          }
        }
      }
      newItem.onRollbackItemUpdated(oldItem);
#if DEBUG
      DC.Trace?.Invoke($"Rolled back Lookup_Child.Update(): {newItem.ToTraceString()}");
#endif
    }
    partial void onRollbackItemUpdated(Lookup_Child oldLookup_Child);


    /// <summary>
    /// Adds Lookup_Child to DC.Data.Lookup_Children as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var lookup_Child = (Lookup_Child) item;
#if DEBUG
      DC.Trace?.Invoke($"Rollback Lookup_Child.Release(): {lookup_Child.ToTraceString()}");
#endif
      lookup_Child.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Text}|" +
        $" LookupParent {LookupParent.GetKeyOrHash()}|" +
        $" LookupParentNullable {LookupParentNullable?.GetKeyOrHash()}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}," +
        $" {LookupParent.ToShortString()}," +
        $" {LookupParentNullable?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Text: {Text}," +
        $" LookupParent: {LookupParent.ToShortString()}," +
        $" LookupParentNullable: {LookupParentNullable?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
