//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into Lookup_Child.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// Some comment for Lookup_Child
    /// </summary>
  public partial class Lookup_Child: IStorage<Lookup_Child> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for Lookup_Child. Gets set once Lookup_Child gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(Lookup_Child lookup_Child, int key) { lookup_Child.Key = key; }


    public int Number { get; }


    public Lookup_Parent LookupParent { get; }


    public Lookup_ParentNullable? LookupParentNullable { get; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Number", "LookupParent", "LookupParentNullable"};


    /// <summary>
    /// None existing Lookup_Child
    /// </summary>
    internal static Lookup_Child NoLookup_Child = new Lookup_Child(int.MinValue, Lookup_Parent.NoLookup_Parent, null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// This event will never be raised, but is needed to comply with IStorage.
    /// </summary>
#pragma warning disable 67
    public event Action<Lookup_Child>? HasChanged;
#pragma warning restore 67
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// Lookup_Child Constructor. If isStoring is true, adds Lookup_Child to DC.Data.Lookup_Children, 
    /// adds Lookup_Child to lookup_Parent.Lookup_Children
    /// and if there is a LookupParentNullable adds Lookup_Child to lookup_ParentNullable.Lookup_Children.
    /// </summary>
    public Lookup_Child(int number, Lookup_Parent lookupParent, Lookup_ParentNullable? lookupParentNullable, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Number = number;
      LookupParent = lookupParent;
      LookupParentNullable = lookupParentNullable;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for Lookup_Child read from CSV file
    /// </summary>
    private Lookup_Child(int key, CsvReader csvReader, DC context) {
      Key = key;
      Number = csvReader.ReadInt();
      var lookup_ParentKey = csvReader.ReadInt();
      if (context.Lookup_Parents.TryGetValue(lookup_ParentKey, out var lookupParent)) {
          LookupParent = lookupParent;
      } else {
        throw new Exception($"Read Lookup_Child from CSV file: Cannot find LookupParent with key {lookup_ParentKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      }
      var lookupParentNullableKey = csvReader.ReadIntNull();
      if (lookupParentNullableKey.HasValue) {
        if (context.Lookup_ParentNullables.TryGetValue(lookupParentNullableKey.Value, out var lookupParentNullable)) {
          LookupParentNullable = lookupParentNullable;
        } else {
          LookupParentNullable = Lookup_ParentNullable.NoLookup_ParentNullable;
        }
      }
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DC context);


    /// <summary>
    /// New Lookup_Child read from CSV file
    /// </summary>
    internal static Lookup_Child Create(int key, CsvReader csvReader, DC context) {
      return new Lookup_Child(key, csvReader, context);
    }


    /// <summary>
    /// Verify that lookup_Child.LookupParent exists.
    /// Verify that lookup_Child.LookupParentNullable exists.
    /// </summary>
    internal static bool Verify(Lookup_Child lookup_Child) {
      if (lookup_Child.LookupParent==Lookup_Parent.NoLookup_Parent) return false;
      if (lookup_Child.LookupParentNullable==Lookup_ParentNullable.NoLookup_ParentNullable) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds Lookup_Child to DC.Data.Lookup_Children, Lookup_Parent and Lookup_ParentNullable. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"Lookup_Child cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      onStore();
      DC.Data.Lookup_Children.Add(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write Lookup_Child to CSV file
    /// </summary>
    public const int MaxLineLength = 11;


    /// <summary>
    /// Write Lookup_Child to CSV file
    /// </summary>
    internal static void Write(Lookup_Child lookup_Child, CsvWriter csvWriter) {
      lookup_Child.onCsvWrite();
      csvWriter.Write(lookup_Child.Number);
      if (lookup_Child.LookupParent.Key<0) throw new Exception($"Cannot write lookup_Child '{lookup_Child}' to CSV File, because LookupParent is not stored in DC.Data.Lookup_Parents.");

      csvWriter.Write(lookup_Child.LookupParent.Key.ToString());
      if (lookup_Child.LookupParentNullable is null) {
        csvWriter.WriteNull();
      } else {
        if (lookup_Child.LookupParentNullable.Key<0) throw new Exception($"Cannot write lookup_Child '{lookup_Child}' to CSV File, because LookupParentNullable is not stored in DC.Data.Lookup_ParentNullables.");

        csvWriter.Write(lookup_Child.LookupParentNullable.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Removing Lookup_Child from DC.Data.Lookup_Children is not supported.
    /// </summary>
    public void Remove() {
      throw new NotSupportedException("StorageClass attribute AreInstancesDeletable is false.");
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Number}," +
        $" {LookupParent.ToShortString()}," +
        $" {LookupParentNullable?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Number: {Number}," +
        $" LookupParent: {LookupParent.ToShortString()}," +
        $" LookupParentNullable: {LookupParentNullable?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }


  #region Lookup_ChildWriter
  //      ------------------

  /// <summary>
  /// Writes a CSV file containing records which can be read back as Lookup_Child. Note that the keys of linked objects
  /// need to be provided in Write(), since the data context will not be involved.
  /// </summary>
  public class Lookup_ChildWriter: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvWriter csvWriter;


    /// <summary>
    /// Constructor, will write the Lookup_Child header line into the CSV file. Dispose Lookup_ChildWriter once done.
    /// </summary>
    public Lookup_ChildWriter(string? fileNamePath, CsvConfig csvConfig, int maxLineCharLenght) {
      this.csvConfig = csvConfig;
      csvWriter = new CsvWriter(fileNamePath, csvConfig, maxLineCharLenght, null, 0);
      var csvHeaderString = Csv.ToCsvHeaderString(Lookup_Child.Headers, csvConfig.Delimiter);
      csvWriter.WriteLine(csvHeaderString);
    }


    /// <summary>
    /// Writes the details of one Lookup_Child to the CSV file
    /// </summary>
    public void Write(int number, int lookupParentKey, int? lookupParentNullableKey) {
      csvWriter.StartNewLine();
      csvWriter.Write(number);
      if (lookupParentKey<0) throw new Exception($"Cannot write lookup_Child to CSV File, because LookupParent is not stored in DC.Data.Lookup_Parents.");

      csvWriter.Write(lookupParentKey.ToString());
      if (lookupParentNullableKey is null) {
        csvWriter.WriteNull();
      } else {
        if (lookupParentNullableKey<0) throw new Exception($"Cannot write lookup_Child to CSV File, because LookupParentNullable is not stored in DC.Data.Lookup_ParentNullables.");

        csvWriter.Write(lookupParentNullableKey.ToString());
      }
      csvWriter.WriteEndOfLine();
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of Lookup_ChildWriter exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is Lookup_ChildWriter already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvWriter.Dispose();
    }
    #endregion
  }
  #endregion
}
