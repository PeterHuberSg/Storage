//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ChildrenList_CreateOnlyChild.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Threading;
using Storage;


namespace StorageDataContext  {


    /// <summary>
    /// This none deletable child has links to 2 different types of parents, which must be none deletable
    /// </summary>
  public partial class ChildrenList_CreateOnlyChild: IStorageItemGeneric<ChildrenList_CreateOnlyChild> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ChildrenList_CreateOnlyChild. Gets set once ChildrenList_CreateOnlyChild gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem childrenList_CreateOnlyChild, int key) {
      ((ChildrenList_CreateOnlyChild)childrenList_CreateOnlyChild).Key = key;
    }


    /// <summary>
    /// Some info
    /// </summary>
    public string Text { get; }


    /// <summary>
    /// None deletable parent for none deletable child which must have a none deletable parent
    /// </summary>
    public ChildrenList_CreateOnlyParent CreateOnlyParent { get; }


    /// <summary>
    /// None deletable parent for deletable child which might or might not have a parent which must be none deletable
    /// </summary>
    public ChildrenList_CreateOnlyParentNullable? CreateOnlyParentNullable { get; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Text", "CreateOnlyParent", "CreateOnlyParentNullable"};


    /// <summary>
    /// None existing ChildrenList_CreateOnlyChild
    /// </summary>
    internal static ChildrenList_CreateOnlyChild NoChildrenList_CreateOnlyChild = new ChildrenList_CreateOnlyChild("NoText", ChildrenList_CreateOnlyParent.NoChildrenList_CreateOnlyParent, null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// This event will never be raised, but is needed to comply with IStorage.
    /// </summary>
#pragma warning disable 67
    public event Action</*old*/ChildrenList_CreateOnlyChild, /*new*/ChildrenList_CreateOnlyChild>? HasChanged;
#pragma warning restore 67
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ChildrenList_CreateOnlyChild Constructor. If isStoring is true, adds ChildrenList_CreateOnlyChild to DC.Data.ChildrenList_CreateOnlyChildren, 
    /// adds ChildrenList_CreateOnlyChild to childrenList_CreateOnlyParent.ChildrenList_CreateOnlyChildren
    /// and if there is a CreateOnlyParentNullable adds ChildrenList_CreateOnlyChild to childrenList_CreateOnlyParentNullable.ChildrenList_CreateOnlyChildren.
    /// </summary>
    public ChildrenList_CreateOnlyChild(string text, ChildrenList_CreateOnlyParent createOnlyParent, ChildrenList_CreateOnlyParentNullable? createOnlyParentNullable, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      CreateOnlyParent = createOnlyParent;
      CreateOnlyParentNullable = createOnlyParentNullable;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public ChildrenList_CreateOnlyChild(ChildrenList_CreateOnlyChild original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Text = original.Text;
      CreateOnlyParent = original.CreateOnlyParent;
      CreateOnlyParentNullable = original.CreateOnlyParentNullable;
      onCloned(this);
    }
    partial void onCloned(ChildrenList_CreateOnlyChild clone);


    /// <summary>
    /// Constructor for ChildrenList_CreateOnlyChild read from CSV file
    /// </summary>
    private ChildrenList_CreateOnlyChild(int key, CsvReader csvReader){
      Key = key;
      Text = csvReader.ReadString();
      var childrenList_CreateOnlyParentKey = csvReader.ReadInt();
      if (DC.Data.ChildrenList_CreateOnlyParents.TryGetValue(childrenList_CreateOnlyParentKey, out var createOnlyParent)) {
          CreateOnlyParent = createOnlyParent;
      } else {
        throw new Exception($"Read ChildrenList_CreateOnlyChild from CSV file: Cannot find CreateOnlyParent with key {childrenList_CreateOnlyParentKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      }
      var createOnlyParentNullableKey = csvReader.ReadIntNull();
      if (createOnlyParentNullableKey.HasValue) {
        if (DC.Data.ChildrenList_CreateOnlyParentNullables.TryGetValue(createOnlyParentNullableKey.Value, out var createOnlyParentNullable)) {
          CreateOnlyParentNullable = createOnlyParentNullable;
        } else {
          CreateOnlyParentNullable = ChildrenList_CreateOnlyParentNullable.NoChildrenList_CreateOnlyParentNullable;
        }
      }
      if (CreateOnlyParent!=ChildrenList_CreateOnlyParent.NoChildrenList_CreateOnlyParent) {
        CreateOnlyParent.AddToChildrenList_CreateOnlyChildren(this);
      }
      if (createOnlyParentNullableKey.HasValue && CreateOnlyParentNullable!=ChildrenList_CreateOnlyParentNullable.NoChildrenList_CreateOnlyParentNullable) {
        CreateOnlyParentNullable!.AddToChildrenList_CreateOnlyChildren(this);
      }
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New ChildrenList_CreateOnlyChild read from CSV file
    /// </summary>
    internal static ChildrenList_CreateOnlyChild Create(int key, CsvReader csvReader) {
      return new ChildrenList_CreateOnlyChild(key, csvReader);
    }


    /// <summary>
    /// Verify that childrenList_CreateOnlyChild.CreateOnlyParent exists.
    /// Verify that childrenList_CreateOnlyChild.CreateOnlyParentNullable exists.
    /// </summary>
    internal static bool Verify(ChildrenList_CreateOnlyChild childrenList_CreateOnlyChild) {
      if (childrenList_CreateOnlyChild.CreateOnlyParent==ChildrenList_CreateOnlyParent.NoChildrenList_CreateOnlyParent) return false;
      if (childrenList_CreateOnlyChild.CreateOnlyParentNullable==ChildrenList_CreateOnlyParentNullable.NoChildrenList_CreateOnlyParentNullable) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ChildrenList_CreateOnlyChild to DC.Data.ChildrenList_CreateOnlyChildren, ChildrenList_CreateOnlyParent and ChildrenList_CreateOnlyParentNullable. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ChildrenList_CreateOnlyChild cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      if (CreateOnlyParent.Key<0) {
        throw new Exception($"ChildrenList_CreateOnlyChild cannot be stored in DC.Data, CreateOnlyParent is missing or not stored yet." + Environment.NewLine + ToString());
      }
      if (CreateOnlyParentNullable!=null && CreateOnlyParentNullable.Key<0) {
        throw new Exception($"ChildrenList_CreateOnlyChild cannot be stored in DC.Data, CreateOnlyParentNullable is not stored yet." + Environment.NewLine + ToString());
      }
      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data.ChildrenList_CreateOnlyChildren.Add(this);
      CreateOnlyParent.AddToChildrenList_CreateOnlyChildren(this);
      CreateOnlyParentNullable?.AddToChildrenList_CreateOnlyChildren(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write ChildrenList_CreateOnlyChild to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write ChildrenList_CreateOnlyChild to CSV file
    /// </summary>
    internal static void Write(ChildrenList_CreateOnlyChild childrenList_CreateOnlyChild, CsvWriter csvWriter) {
      childrenList_CreateOnlyChild.onCsvWrite();
      csvWriter.Write(childrenList_CreateOnlyChild.Text);
      if (childrenList_CreateOnlyChild.CreateOnlyParent.Key<0) throw new Exception($"Cannot write childrenList_CreateOnlyChild '{childrenList_CreateOnlyChild}' to CSV File, because CreateOnlyParent is not stored in DC.Data.ChildrenList_CreateOnlyParents.");

      csvWriter.Write(childrenList_CreateOnlyChild.CreateOnlyParent.Key.ToString());
      if (childrenList_CreateOnlyChild.CreateOnlyParentNullable is null) {
        csvWriter.WriteNull();
      } else {
        if (childrenList_CreateOnlyChild.CreateOnlyParentNullable.Key<0) throw new Exception($"Cannot write childrenList_CreateOnlyChild '{childrenList_CreateOnlyChild}' to CSV File, because CreateOnlyParentNullable is not stored in DC.Data.ChildrenList_CreateOnlyParentNullables.");

        csvWriter.Write(childrenList_CreateOnlyChild.CreateOnlyParentNullable.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Removing ChildrenList_CreateOnlyChild from DC.Data.ChildrenList_CreateOnlyChildren is not supported.
    /// </summary>
    public void Remove() {
      throw new NotSupportedException("StorageClass attribute AreInstancesDeletable is false.");
    }


    /// <summary>
    /// Removes ChildrenList_CreateOnlyChild from possible parents as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var childrenList_CreateOnlyChild = (ChildrenList_CreateOnlyChild) item;
      if (childrenList_CreateOnlyChild.CreateOnlyParent!=ChildrenList_CreateOnlyParent.NoChildrenList_CreateOnlyParent) {
        childrenList_CreateOnlyChild.CreateOnlyParent.RemoveFromChildrenList_CreateOnlyChildren(childrenList_CreateOnlyChild);
      }
      if (childrenList_CreateOnlyChild.CreateOnlyParentNullable!=null && childrenList_CreateOnlyChild.CreateOnlyParentNullable!=ChildrenList_CreateOnlyParentNullable.NoChildrenList_CreateOnlyParentNullable) {
        childrenList_CreateOnlyChild.CreateOnlyParentNullable.RemoveFromChildrenList_CreateOnlyChildren(childrenList_CreateOnlyChild);
      }
      childrenList_CreateOnlyChild.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the ChildrenList_CreateOnlyChild item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldItem, IStorageItem newItem) {
      var childrenList_CreateOnlyChildOld = (ChildrenList_CreateOnlyChild) oldItem;
      var childrenList_CreateOnlyChildNew = (ChildrenList_CreateOnlyChild) newItem;
      if (childrenList_CreateOnlyChildNew.Text!=childrenList_CreateOnlyChildOld.Text) {
        throw new Exception($"ChildrenList_CreateOnlyChild.Update(): Property Text '{childrenList_CreateOnlyChildNew.Text}' is " +
          $"readonly, Text '{childrenList_CreateOnlyChildOld.Text}' read from the CSV file should be the same." + Environment.NewLine + 
          childrenList_CreateOnlyChildNew.ToString());
      }
      if (childrenList_CreateOnlyChildNew.CreateOnlyParent!=childrenList_CreateOnlyChildOld.CreateOnlyParent) {
        throw new Exception($"ChildrenList_CreateOnlyChild.Update(): Property CreateOnlyParent '{childrenList_CreateOnlyChildNew.CreateOnlyParent}' is " +
          $"readonly, CreateOnlyParent '{childrenList_CreateOnlyChildOld.CreateOnlyParent}' read from the CSV file should be the same." + Environment.NewLine + 
          childrenList_CreateOnlyChildNew.ToString());
      }
      if (childrenList_CreateOnlyChildNew.CreateOnlyParentNullable!=childrenList_CreateOnlyChildOld.CreateOnlyParentNullable) {
        throw new Exception($"ChildrenList_CreateOnlyChild.Update(): Property CreateOnlyParentNullable '{childrenList_CreateOnlyChildNew.CreateOnlyParentNullable}' is " +
          $"readonly, CreateOnlyParentNullable '{childrenList_CreateOnlyChildOld.CreateOnlyParentNullable}' read from the CSV file should be the same." + Environment.NewLine + 
          childrenList_CreateOnlyChildNew.ToString());
      }
      childrenList_CreateOnlyChildNew.onRollbackItemUpdated(childrenList_CreateOnlyChildOld);
    }
    partial void onRollbackItemUpdated(ChildrenList_CreateOnlyChild oldChildrenList_CreateOnlyChild);


    /// <summary>
    /// Adds ChildrenList_CreateOnlyChild item to possible parents again as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemRemove(IStorageItem item) {
      var childrenList_CreateOnlyChild = (ChildrenList_CreateOnlyChild) item;
      childrenList_CreateOnlyChild.CreateOnlyParent.AddToChildrenList_CreateOnlyChildren(childrenList_CreateOnlyChild);
      childrenList_CreateOnlyChild.CreateOnlyParentNullable?.AddToChildrenList_CreateOnlyChildren(childrenList_CreateOnlyChild);
      childrenList_CreateOnlyChild.onRollbackItemRemoved();
    }
    partial void onRollbackItemRemoved();


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}," +
        $" {CreateOnlyParent.ToShortString()}," +
        $" {CreateOnlyParentNullable?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" CreateOnlyParent: {CreateOnlyParent.ToShortString()}," +
        $" CreateOnlyParentNullable: {CreateOnlyParentNullable?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }


  #region ChildrenList_CreateOnlyChildRaw
  //      -------------------------------

  /// <summary>
  /// ChildrenList_CreateOnlyChildRaw is used instead ChildrenList_CreateOnlyChild and DC.Data to read an instance from a CSV file with 
  /// ChildrenList_CreateOnlyChildReader or write with ChildrenList_CreateOnlyChildWriter.
  /// </summary>
  public class ChildrenList_CreateOnlyChildRaw {

    /// <summary>
    /// Unique identifier for ChildrenList_CreateOnlyChildRaw.
    /// </summary>
    public int Key { get; set; }


    /// <summary>
    /// Some info
    /// </summary>
    public string Text { get; set; } ="";


    /// <summary>
    /// None deletable parent for none deletable child which must have a none deletable parent
    /// </summary>
    public int CreateOnlyParentKey { get; set; }


    /// <summary>
    /// None deletable parent for deletable child which might or might not have a parent which must be none deletable
    /// </summary>
    public int? CreateOnlyParentNullableKey { get; set; }


    /// <summary>
    /// Default Constructor.
    /// </summary>
    public ChildrenList_CreateOnlyChildRaw() {
    }


    /// <summary>
    /// Constructor, will replace links to parents with the parents' key.
    /// </summary>
    public ChildrenList_CreateOnlyChildRaw(ChildrenList_CreateOnlyChild childrenList_CreateOnlyChild) {
      Key = childrenList_CreateOnlyChild.Key;
      Text = childrenList_CreateOnlyChild.Text;
      CreateOnlyParentKey = childrenList_CreateOnlyChild.CreateOnlyParent.Key;
      CreateOnlyParentNullableKey = childrenList_CreateOnlyChild.CreateOnlyParentNullable?.Key;
    }


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" CreateOnlyParentKey: {CreateOnlyParentKey}," +
        $" CreateOnlyParentNullableKey: {CreateOnlyParentNullableKey};";
      return returnString;
    }
  }
  #endregion


  #region ChildrenList_CreateOnlyChildReader
  //      ----------------------------------

  /// <summary>
  /// Reads from a CSV file containing ChildrenList_CreateOnlyChild instances. Note that the keys of linked objects will be returned 
  /// and not the linked objects themselves, since the data context will not be involved.
  /// </summary>
  public class ChildrenList_CreateOnlyChildReader: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvReader csvReader;
    int nextKey = 0;


    /// <summary>
    /// Constructor, will read and verify the ChildrenList_CreateOnlyChild header line. You need to dispose ChildrenList_CreateOnlyChildReader once
    /// you are done, except when you have read the whole file, then ChildrenList_CreateOnlyChildReader.ReadLine() disposes automatically.
    /// </summary>
    public ChildrenList_CreateOnlyChildReader(string fileNamePath, CsvConfig csvConfig) {
      this.csvConfig = csvConfig;
      csvReader = new CsvReader(fileNamePath, csvConfig, ChildrenList_CreateOnlyChild.EstimatedLineLength);
      var csvHeaderString = Csv.ToCsvHeaderString(ChildrenList_CreateOnlyChild.Headers, csvConfig.Delimiter);
      var headerLine = csvReader.ReadLine();
      if (csvHeaderString!=headerLine) throw new Exception($"Error reading file {csvReader.FileName}{Environment.NewLine}'" +
        headerLine + "' should be '" + csvHeaderString + "'.");
    }


    /// <summary>
    /// Reads the details of one ChildrenList_CreateOnlyChild from the CSV file. Returns false when all lines are
    /// read and disposes the reader.
    /// </summary>
    public bool ReadLine([NotNullWhen(true)] out ChildrenList_CreateOnlyChildRaw? childrenList_CreateOnlyChildRaw){
      if (csvReader.IsEndOfFileReached()) {
        csvReader.Dispose();
        childrenList_CreateOnlyChildRaw = null;
        return false;
      }
      childrenList_CreateOnlyChildRaw = new ChildrenList_CreateOnlyChildRaw();
      childrenList_CreateOnlyChildRaw.Key = nextKey++;
      childrenList_CreateOnlyChildRaw.Text = csvReader.ReadString();
      childrenList_CreateOnlyChildRaw.CreateOnlyParentKey = csvReader.ReadInt();
      childrenList_CreateOnlyChildRaw.CreateOnlyParentNullableKey = csvReader.ReadIntNull();
      csvReader.ReadEndOfLine();
      return true;
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of ChildrenList_CreateOnlyChildReader exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is ChildrenList_CreateOnlyChildReader already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvReader.Dispose();
    }
    #endregion
  }
  #endregion


  #region ChildrenList_CreateOnlyChildWriter
  //      ----------------------------------

  /// <summary>
  /// Writes a CSV file containing records which can be read back as ChildrenList_CreateOnlyChild. Note that the keys of linked objects
  /// need to be provided in Write(), since the data context will not be involved.
  /// </summary>
  public class ChildrenList_CreateOnlyChildWriter: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvWriter csvWriter;
    int nextKey = 0;


    /// <summary>
    /// Constructor, will write the ChildrenList_CreateOnlyChild header line into the CSV file. Dispose ChildrenList_CreateOnlyChildWriter once done.
    /// </summary>
    public ChildrenList_CreateOnlyChildWriter(string fileNamePath, CsvConfig csvConfig){
      this.csvConfig = csvConfig;
      csvWriter = new CsvWriter(fileNamePath, csvConfig, ChildrenList_CreateOnlyChild.EstimatedLineLength, null, 0);
      var csvHeaderString = Csv.ToCsvHeaderString(ChildrenList_CreateOnlyChild.Headers, csvConfig.Delimiter);
      csvWriter.WriteLine(csvHeaderString);
    }


    /// <summary>
    /// Writes the details of one ChildrenList_CreateOnlyChildRaw to the CSV file
    /// </summary>
    public void Write(ChildrenList_CreateOnlyChildRaw childrenList_CreateOnlyChildRaw){
      if (childrenList_CreateOnlyChildRaw.Key!=nextKey) {
        throw new Exception($"ChildrenList_CreateOnlyChildRaw's key {childrenList_CreateOnlyChildRaw.Key} should be {nextKey}.");
      }
      nextKey++;
      csvWriter.StartNewLine();
      csvWriter.Write(childrenList_CreateOnlyChildRaw.Text);
      if (childrenList_CreateOnlyChildRaw.CreateOnlyParentKey<0) throw new Exception($"Cannot write childrenList_CreateOnlyChild to CSV File, because CreateOnlyParent is not stored in DC.Data.ChildrenList_CreateOnlyParents.");

      csvWriter.Write(childrenList_CreateOnlyChildRaw.CreateOnlyParentKey.ToString());
      if (childrenList_CreateOnlyChildRaw.CreateOnlyParentNullableKey is null) {
        csvWriter.WriteNull();
      } else {
        if (childrenList_CreateOnlyChildRaw.CreateOnlyParentNullableKey<0) throw new Exception($"Cannot write childrenList_CreateOnlyChild to CSV File, because CreateOnlyParentNullable is not stored in DC.Data.ChildrenList_CreateOnlyParentNullables.");

        csvWriter.Write(childrenList_CreateOnlyChildRaw.CreateOnlyParentNullableKey.ToString());
      }
      csvWriter.WriteEndOfLine();
    }


    /// <summary>
    /// Writes the details of one ChildrenList_CreateOnlyChild to the CSV file
    /// </summary>
    public void Write(int key, string text, int createOnlyParentKey, int? createOnlyParentNullableKey) {
      if (key!=nextKey) {
        throw new Exception($"ChildrenList_CreateOnlyChild's key {key} should be {nextKey}.");
      }
      nextKey++;
      csvWriter.StartNewLine();
      csvWriter.Write(text);
      if (createOnlyParentKey<0) throw new Exception($"Cannot write childrenList_CreateOnlyChild to CSV File, because CreateOnlyParent is not stored in DC.Data.ChildrenList_CreateOnlyParents.");

      csvWriter.Write(createOnlyParentKey.ToString());
      if (createOnlyParentNullableKey is null) {
        csvWriter.WriteNull();
      } else {
        if (createOnlyParentNullableKey<0) throw new Exception($"Cannot write childrenList_CreateOnlyChild to CSV File, because CreateOnlyParentNullable is not stored in DC.Data.ChildrenList_CreateOnlyParentNullables.");

        csvWriter.Write(createOnlyParentNullableKey.ToString());
      }
      csvWriter.WriteEndOfLine();
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of ChildrenList_CreateOnlyChildWriter exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is ChildrenList_CreateOnlyChildWriter already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvWriter.Dispose();
    }
    #endregion
  }
  #endregion
}
