//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into DC.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageModel  {

  /// <summary>
  /// A part of DC is static, which gives easy access to all stored data (=context) through DC.Data. But most functionality is in the
  /// instantiatable part of DC. Since it is instantiatable, is possible to use different contexts over the lifetime of a program. This 
  /// is helpful for unit testing. Use DC.Init() to create a new context and dispose it with DisposeData() before creating a new one.
  /// </summary>
  public partial class DC: IDisposable {

    #region static Part
    //      -----------

    /// <summary>
    /// Provides static root access to the data context
    /// </summary>
    public static DC Data {
      get { return data!; }
    }
    private static DC? data; //data is needed for Interlocked.Exchange(ref data, null) in DisposeData()


    /// <summary>
    /// Flushes all data to permanent storage location if permanent data storage is active. Compacts data storage
    /// by applying all updates and removing all instances marked as deleted.
    /// </summary>
    public static void DisposeData() {
      var dataLocal = Interlocked.Exchange(ref data, null);
      dataLocal?.Dispose();
    }
    #endregion


    #region Properties
    //      ----------

    /// <summary>
    /// Configuration parameters if data gets stored in .csv files
    /// </summary>
    public CsvConfig? CsvConfig { get; }

    /// <summary>
    /// Is all data initialised
    /// </summary>
    public bool IsInitialised { get; private set; }

    /// <summary>
    /// Directory of all ChildrenDictionary_Children
    /// </summary>
    public StorageDictionary<ChildrenDictionary_Child, DC> ChildrenDictionary_Children { get; private set; }

    /// <summary>
    /// Directory of all ChildrenDictionary_Parents
    /// </summary>
    public StorageDictionary<ChildrenDictionary_Parent, DC> ChildrenDictionary_Parents { get; private set; }

    /// <summary>
    /// Directory of all ChildrenDictionary_ParentNullables
    /// </summary>
    public StorageDictionary<ChildrenDictionary_ParentNullable, DC> ChildrenDictionary_ParentNullables { get; private set; }

    /// <summary>
    /// Directory of all ChildrenList_Children
    /// </summary>
    public StorageDictionary<ChildrenList_Child, DC> ChildrenList_Children { get; private set; }

    /// <summary>
    /// Directory of all ChildrenList_CreateOnlyChildren
    /// </summary>
    public StorageDictionary<ChildrenList_CreateOnlyChild, DC> ChildrenList_CreateOnlyChildren { get; private set; }

    /// <summary>
    /// Directory of all ChildrenList_CreateOnlyParents
    /// </summary>
    public StorageDictionary<ChildrenList_CreateOnlyParent, DC> ChildrenList_CreateOnlyParents { get; private set; }

    /// <summary>
    /// Directory of all ChildrenList_CreateOnlyParentNullables
    /// </summary>
    public StorageDictionary<ChildrenList_CreateOnlyParentNullable, DC> ChildrenList_CreateOnlyParentNullables { get; private set; }

    /// <summary>
    /// Directory of all ChildrenList_Parents
    /// </summary>
    public StorageDictionary<ChildrenList_Parent, DC> ChildrenList_Parents { get; private set; }

    /// <summary>
    /// Directory of all ChildrenList_ParentNullables
    /// </summary>
    public StorageDictionary<ChildrenList_ParentNullable, DC> ChildrenList_ParentNullables { get; private set; }

    /// <summary>
    /// Directory of all ChildrenSortedList_Children
    /// </summary>
    public StorageDictionary<ChildrenSortedList_Child, DC> ChildrenSortedList_Children { get; private set; }

    /// <summary>
    /// Directory of all ChildrenSortedList_Parents
    /// </summary>
    public StorageDictionary<ChildrenSortedList_Parent, DC> ChildrenSortedList_Parents { get; private set; }

    /// <summary>
    /// Directory of all ChildrenSortedList_ParentNullables
    /// </summary>
    public StorageDictionary<ChildrenSortedList_ParentNullable, DC> ChildrenSortedList_ParentNullables { get; private set; }

    /// <summary>
    /// Directory of all Lookup_Children
    /// </summary>
    public StorageDictionary<Lookup_Child, DC> Lookup_Children { get; private set; }

    /// <summary>
    /// Directory of all Lookup_Parents
    /// </summary>
    public StorageDictionary<Lookup_Parent, DC> Lookup_Parents { get; private set; }

    /// <summary>
    /// Directory of all Lookup_ParentNullables
    /// </summary>
    public StorageDictionary<Lookup_ParentNullable, DC> Lookup_ParentNullables { get; private set; }

    /// <summary>
    /// Directory of all ParentOneChild_Children
    /// </summary>
    public StorageDictionary<ParentOneChild_Child, DC> ParentOneChild_Children { get; private set; }

    /// <summary>
    /// Directory of all ParentOneChild_Parents
    /// </summary>
    public StorageDictionary<ParentOneChild_Parent, DC> ParentOneChild_Parents { get; private set; }

    /// <summary>
    /// Directory of all ParentOneChild_ParentNullables
    /// </summary>
    public StorageDictionary<ParentOneChild_ParentNullable, DC> ParentOneChild_ParentNullables { get; private set; }

    /// <summary>
    /// Directory of all ParentOneChild_ReadonlyChildren
    /// </summary>
    public StorageDictionary<ParentOneChild_ReadonlyChild, DC> ParentOneChild_ReadonlyChildren { get; private set; }

    /// <summary>
    /// Directory of all PrivateConstructors
    /// </summary>
    public StorageDictionary<PrivateConstructor, DC> PrivateConstructors { get; private set; }

    /// <summary>
    /// Directory of all PropertyNeedsDictionaryClasses
    /// </summary>
    public StorageDictionary<PropertyNeedsDictionaryClass, DC> PropertyNeedsDictionaryClasses { get; private set; }

    /// <summary>
    /// Directory of all PropertyNeedsDictionaryClasses by IdInt
    /// </summary>
    public Dictionary<int, PropertyNeedsDictionaryClass> PropertyNeedsDictionaryClassesByIdInt { get; private set; }

    /// <summary>
    /// Directory of all PropertyNeedsDictionaryClasses by IdString
    /// </summary>
    public Dictionary<string, PropertyNeedsDictionaryClass> PropertyNeedsDictionaryClassesByIdString { get; private set; }

    /// <summary>
    /// Directory of all ReadOnly_Children
    /// </summary>
    public StorageDictionary<ReadOnly_Child, DC> ReadOnly_Children { get; private set; }

    /// <summary>
    /// Directory of all ReadOnly_Parents
    /// </summary>
    public StorageDictionary<ReadOnly_Parent, DC> ReadOnly_Parents { get; private set; }

    /// <summary>
    /// Directory of all ReadOnly_ParentNullables
    /// </summary>
    public StorageDictionary<ReadOnly_ParentNullable, DC> ReadOnly_ParentNullables { get; private set; }

    /// <summary>
    /// Directory of all ReadOnlyParentUpdatableChild_Children
    /// </summary>
    public StorageDictionary<ReadOnlyParentUpdatableChild_Child, DC> ReadOnlyParentUpdatableChild_Children { get; private set; }

    /// <summary>
    /// Directory of all ReadOnlyParentUpdatableChild_Parents
    /// </summary>
    public StorageDictionary<ReadOnlyParentUpdatableChild_Parent, DC> ReadOnlyParentUpdatableChild_Parents { get; private set; }

    /// <summary>
    /// Directory of all ReadOnlyParentUpdatableChild_ParentNullables
    /// </summary>
    public StorageDictionary<ReadOnlyParentUpdatableChild_ParentNullable, DC> ReadOnlyParentUpdatableChild_ParentNullables { get; private set; }

    /// <summary>
    /// Directory of all SampleX
    /// </summary>
    public StorageDictionary<Sample, DC> SampleX { get; private set; }

    /// <summary>
    /// Directory of all SampleDetails
    /// </summary>
    public StorageDictionary<SampleDetail, DC> SampleDetails { get; private set; }

    /// <summary>
    /// Directory of all SampleMasters
    /// </summary>
    public StorageDictionary<SampleMaster, DC> SampleMasters { get; private set; }
    #endregion


    #region Events
    //      ------

    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// Creates a new data context. If csvConfig is null, the data is only stored in RAM, but gets lost once 
    /// program terminates. With csvConfig defined, existing data gets read at startup, changes immediately
    /// when written and Dispose() ensures by flushing that all data is permanently stored.
    /// </summary>
    public DC(CsvConfig? csvConfig) {
      if (!IsDisposed) {
        throw new Exception("Dispose old DC before creating a new one.");
      }
      isDisposed = 0;
      data = this;
      IsInitialised = false;

      string? backupResult = null;
      if (csvConfig!=null) {
        backupResult = Csv.Backup(csvConfig, DateTime.Now);
      }

      onConstructing(backupResult);

      PropertyNeedsDictionaryClassesByIdInt = new Dictionary<int, PropertyNeedsDictionaryClass>();
      PropertyNeedsDictionaryClassesByIdString = new Dictionary<string, PropertyNeedsDictionaryClass>();
      CsvConfig = csvConfig;
      if (csvConfig==null) {
        SampleMasters = new StorageDictionary<SampleMaster, DC>(
          this,
          SampleMaster.SetKey,
          null,
          areInstancesUpdatable: true,
          areInstancesDeletable: false);
        SampleX = new StorageDictionary<Sample, DC>(
          this,
          Sample.SetKey,
          Sample.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        SampleDetails = new StorageDictionary<SampleDetail, DC>(
          this,
          SampleDetail.SetKey,
          SampleDetail.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ParentOneChild_Parents = new StorageDictionary<ParentOneChild_Parent, DC>(
          this,
          ParentOneChild_Parent.SetKey,
          ParentOneChild_Parent.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ParentOneChild_ParentNullables = new StorageDictionary<ParentOneChild_ParentNullable, DC>(
          this,
          ParentOneChild_ParentNullable.SetKey,
          ParentOneChild_ParentNullable.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ParentOneChild_Children = new StorageDictionary<ParentOneChild_Child, DC>(
          this,
          ParentOneChild_Child.SetKey,
          ParentOneChild_Child.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ParentOneChild_ReadonlyChildren = new StorageDictionary<ParentOneChild_ReadonlyChild, DC>(
          this,
          ParentOneChild_ReadonlyChild.SetKey,
          ParentOneChild_ReadonlyChild.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        PropertyNeedsDictionaryClasses = new StorageDictionary<PropertyNeedsDictionaryClass, DC>(
          this,
          PropertyNeedsDictionaryClass.SetKey,
          PropertyNeedsDictionaryClass.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        Lookup_Parents = new StorageDictionary<Lookup_Parent, DC>(
          this,
          Lookup_Parent.SetKey,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        Lookup_ParentNullables = new StorageDictionary<Lookup_ParentNullable, DC>(
          this,
          Lookup_ParentNullable.SetKey,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: true);
        Lookup_Children = new StorageDictionary<Lookup_Child, DC>(
          this,
          Lookup_Child.SetKey,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ChildrenList_Parents = new StorageDictionary<ChildrenList_Parent, DC>(
          this,
          ChildrenList_Parent.SetKey,
          ChildrenList_Parent.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ChildrenList_ParentNullables = new StorageDictionary<ChildrenList_ParentNullable, DC>(
          this,
          ChildrenList_ParentNullable.SetKey,
          ChildrenList_ParentNullable.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ChildrenList_CreateOnlyParents = new StorageDictionary<ChildrenList_CreateOnlyParent, DC>(
          this,
          ChildrenList_CreateOnlyParent.SetKey,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ChildrenList_CreateOnlyParentNullables = new StorageDictionary<ChildrenList_CreateOnlyParentNullable, DC>(
          this,
          ChildrenList_CreateOnlyParentNullable.SetKey,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ChildrenList_Children = new StorageDictionary<ChildrenList_Child, DC>(
          this,
          ChildrenList_Child.SetKey,
          ChildrenList_Child.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ChildrenList_CreateOnlyChildren = new StorageDictionary<ChildrenList_CreateOnlyChild, DC>(
          this,
          ChildrenList_CreateOnlyChild.SetKey,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ChildrenDictionary_Parents = new StorageDictionary<ChildrenDictionary_Parent, DC>(
          this,
          ChildrenDictionary_Parent.SetKey,
          ChildrenDictionary_Parent.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ChildrenDictionary_ParentNullables = new StorageDictionary<ChildrenDictionary_ParentNullable, DC>(
          this,
          ChildrenDictionary_ParentNullable.SetKey,
          ChildrenDictionary_ParentNullable.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ChildrenDictionary_Children = new StorageDictionary<ChildrenDictionary_Child, DC>(
          this,
          ChildrenDictionary_Child.SetKey,
          ChildrenDictionary_Child.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ChildrenSortedList_Parents = new StorageDictionary<ChildrenSortedList_Parent, DC>(
          this,
          ChildrenSortedList_Parent.SetKey,
          ChildrenSortedList_Parent.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ChildrenSortedList_ParentNullables = new StorageDictionary<ChildrenSortedList_ParentNullable, DC>(
          this,
          ChildrenSortedList_ParentNullable.SetKey,
          ChildrenSortedList_ParentNullable.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ChildrenSortedList_Children = new StorageDictionary<ChildrenSortedList_Child, DC>(
          this,
          ChildrenSortedList_Child.SetKey,
          ChildrenSortedList_Child.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ReadOnly_Parents = new StorageDictionary<ReadOnly_Parent, DC>(
          this,
          ReadOnly_Parent.SetKey,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ReadOnly_ParentNullables = new StorageDictionary<ReadOnly_ParentNullable, DC>(
          this,
          ReadOnly_ParentNullable.SetKey,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ReadOnly_Children = new StorageDictionary<ReadOnly_Child, DC>(
          this,
          ReadOnly_Child.SetKey,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ReadOnlyParentUpdatableChild_Parents = new StorageDictionary<ReadOnlyParentUpdatableChild_Parent, DC>(
          this,
          ReadOnlyParentUpdatableChild_Parent.SetKey,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ReadOnlyParentUpdatableChild_ParentNullables = new StorageDictionary<ReadOnlyParentUpdatableChild_ParentNullable, DC>(
          this,
          ReadOnlyParentUpdatableChild_ParentNullable.SetKey,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ReadOnlyParentUpdatableChild_Children = new StorageDictionary<ReadOnlyParentUpdatableChild_Child, DC>(
          this,
          ReadOnlyParentUpdatableChild_Child.SetKey,
          null,
          areInstancesUpdatable: true,
          areInstancesDeletable: false);
        PrivateConstructors = new StorageDictionary<PrivateConstructor, DC>(
          this,
          PrivateConstructor.SetKey,
          null,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
      } else {
        SampleMasters = new StorageDictionaryCSV<SampleMaster, DC>(
          this,
          csvConfig!,
          SampleMaster.MaxLineLength,
          SampleMaster.Headers,
          SampleMaster.SetKey,
          SampleMaster.Create,
          null,
          SampleMaster.Update,
          SampleMaster.Write,
          null,
          areInstancesUpdatable: true,
          areInstancesDeletable: false);
        SampleX = new StorageDictionaryCSV<Sample, DC>(
          this,
          csvConfig!,
          Sample.MaxLineLength,
          Sample.Headers,
          Sample.SetKey,
          Sample.Create,
          Sample.Verify,
          Sample.Update,
          Sample.Write,
          Sample.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        SampleDetails = new StorageDictionaryCSV<SampleDetail, DC>(
          this,
          csvConfig!,
          SampleDetail.MaxLineLength,
          SampleDetail.Headers,
          SampleDetail.SetKey,
          SampleDetail.Create,
          SampleDetail.Verify,
          SampleDetail.Update,
          SampleDetail.Write,
          SampleDetail.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ParentOneChild_Parents = new StorageDictionaryCSV<ParentOneChild_Parent, DC>(
          this,
          csvConfig!,
          ParentOneChild_Parent.MaxLineLength,
          ParentOneChild_Parent.Headers,
          ParentOneChild_Parent.SetKey,
          ParentOneChild_Parent.Create,
          null,
          ParentOneChild_Parent.Update,
          ParentOneChild_Parent.Write,
          ParentOneChild_Parent.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ParentOneChild_ParentNullables = new StorageDictionaryCSV<ParentOneChild_ParentNullable, DC>(
          this,
          csvConfig!,
          ParentOneChild_ParentNullable.MaxLineLength,
          ParentOneChild_ParentNullable.Headers,
          ParentOneChild_ParentNullable.SetKey,
          ParentOneChild_ParentNullable.Create,
          null,
          ParentOneChild_ParentNullable.Update,
          ParentOneChild_ParentNullable.Write,
          ParentOneChild_ParentNullable.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ParentOneChild_Children = new StorageDictionaryCSV<ParentOneChild_Child, DC>(
          this,
          csvConfig!,
          ParentOneChild_Child.MaxLineLength,
          ParentOneChild_Child.Headers,
          ParentOneChild_Child.SetKey,
          ParentOneChild_Child.Create,
          ParentOneChild_Child.Verify,
          ParentOneChild_Child.Update,
          ParentOneChild_Child.Write,
          ParentOneChild_Child.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ParentOneChild_ReadonlyChildren = new StorageDictionaryCSV<ParentOneChild_ReadonlyChild, DC>(
          this,
          csvConfig!,
          ParentOneChild_ReadonlyChild.MaxLineLength,
          ParentOneChild_ReadonlyChild.Headers,
          ParentOneChild_ReadonlyChild.SetKey,
          ParentOneChild_ReadonlyChild.Create,
          ParentOneChild_ReadonlyChild.Verify,
          ParentOneChild_ReadonlyChild.Update,
          ParentOneChild_ReadonlyChild.Write,
          ParentOneChild_ReadonlyChild.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        PropertyNeedsDictionaryClasses = new StorageDictionaryCSV<PropertyNeedsDictionaryClass, DC>(
          this,
          csvConfig!,
          PropertyNeedsDictionaryClass.MaxLineLength,
          PropertyNeedsDictionaryClass.Headers,
          PropertyNeedsDictionaryClass.SetKey,
          PropertyNeedsDictionaryClass.Create,
          null,
          PropertyNeedsDictionaryClass.Update,
          PropertyNeedsDictionaryClass.Write,
          PropertyNeedsDictionaryClass.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        Lookup_Parents = new StorageDictionaryCSV<Lookup_Parent, DC>(
          this,
          csvConfig!,
          Lookup_Parent.MaxLineLength,
          Lookup_Parent.Headers,
          Lookup_Parent.SetKey,
          Lookup_Parent.Create,
          null,
          null,
          Lookup_Parent.Write,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        Lookup_ParentNullables = new StorageDictionaryCSV<Lookup_ParentNullable, DC>(
          this,
          csvConfig!,
          Lookup_ParentNullable.MaxLineLength,
          Lookup_ParentNullable.Headers,
          Lookup_ParentNullable.SetKey,
          Lookup_ParentNullable.Create,
          null,
          null,
          Lookup_ParentNullable.Write,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: true);
        Lookup_Children = new StorageDictionaryCSV<Lookup_Child, DC>(
          this,
          csvConfig!,
          Lookup_Child.MaxLineLength,
          Lookup_Child.Headers,
          Lookup_Child.SetKey,
          Lookup_Child.Create,
          Lookup_Child.Verify,
          null,
          Lookup_Child.Write,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ChildrenList_Parents = new StorageDictionaryCSV<ChildrenList_Parent, DC>(
          this,
          csvConfig!,
          ChildrenList_Parent.MaxLineLength,
          ChildrenList_Parent.Headers,
          ChildrenList_Parent.SetKey,
          ChildrenList_Parent.Create,
          null,
          ChildrenList_Parent.Update,
          ChildrenList_Parent.Write,
          ChildrenList_Parent.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ChildrenList_ParentNullables = new StorageDictionaryCSV<ChildrenList_ParentNullable, DC>(
          this,
          csvConfig!,
          ChildrenList_ParentNullable.MaxLineLength,
          ChildrenList_ParentNullable.Headers,
          ChildrenList_ParentNullable.SetKey,
          ChildrenList_ParentNullable.Create,
          null,
          ChildrenList_ParentNullable.Update,
          ChildrenList_ParentNullable.Write,
          ChildrenList_ParentNullable.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ChildrenList_CreateOnlyParents = new StorageDictionaryCSV<ChildrenList_CreateOnlyParent, DC>(
          this,
          csvConfig!,
          ChildrenList_CreateOnlyParent.MaxLineLength,
          ChildrenList_CreateOnlyParent.Headers,
          ChildrenList_CreateOnlyParent.SetKey,
          ChildrenList_CreateOnlyParent.Create,
          null,
          null,
          ChildrenList_CreateOnlyParent.Write,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ChildrenList_CreateOnlyParentNullables = new StorageDictionaryCSV<ChildrenList_CreateOnlyParentNullable, DC>(
          this,
          csvConfig!,
          ChildrenList_CreateOnlyParentNullable.MaxLineLength,
          ChildrenList_CreateOnlyParentNullable.Headers,
          ChildrenList_CreateOnlyParentNullable.SetKey,
          ChildrenList_CreateOnlyParentNullable.Create,
          null,
          null,
          ChildrenList_CreateOnlyParentNullable.Write,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ChildrenList_Children = new StorageDictionaryCSV<ChildrenList_Child, DC>(
          this,
          csvConfig!,
          ChildrenList_Child.MaxLineLength,
          ChildrenList_Child.Headers,
          ChildrenList_Child.SetKey,
          ChildrenList_Child.Create,
          ChildrenList_Child.Verify,
          ChildrenList_Child.Update,
          ChildrenList_Child.Write,
          ChildrenList_Child.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ChildrenList_CreateOnlyChildren = new StorageDictionaryCSV<ChildrenList_CreateOnlyChild, DC>(
          this,
          csvConfig!,
          ChildrenList_CreateOnlyChild.MaxLineLength,
          ChildrenList_CreateOnlyChild.Headers,
          ChildrenList_CreateOnlyChild.SetKey,
          ChildrenList_CreateOnlyChild.Create,
          ChildrenList_CreateOnlyChild.Verify,
          null,
          ChildrenList_CreateOnlyChild.Write,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ChildrenDictionary_Parents = new StorageDictionaryCSV<ChildrenDictionary_Parent, DC>(
          this,
          csvConfig!,
          ChildrenDictionary_Parent.MaxLineLength,
          ChildrenDictionary_Parent.Headers,
          ChildrenDictionary_Parent.SetKey,
          ChildrenDictionary_Parent.Create,
          null,
          ChildrenDictionary_Parent.Update,
          ChildrenDictionary_Parent.Write,
          ChildrenDictionary_Parent.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ChildrenDictionary_ParentNullables = new StorageDictionaryCSV<ChildrenDictionary_ParentNullable, DC>(
          this,
          csvConfig!,
          ChildrenDictionary_ParentNullable.MaxLineLength,
          ChildrenDictionary_ParentNullable.Headers,
          ChildrenDictionary_ParentNullable.SetKey,
          ChildrenDictionary_ParentNullable.Create,
          null,
          ChildrenDictionary_ParentNullable.Update,
          ChildrenDictionary_ParentNullable.Write,
          ChildrenDictionary_ParentNullable.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ChildrenDictionary_Children = new StorageDictionaryCSV<ChildrenDictionary_Child, DC>(
          this,
          csvConfig!,
          ChildrenDictionary_Child.MaxLineLength,
          ChildrenDictionary_Child.Headers,
          ChildrenDictionary_Child.SetKey,
          ChildrenDictionary_Child.Create,
          ChildrenDictionary_Child.Verify,
          ChildrenDictionary_Child.Update,
          ChildrenDictionary_Child.Write,
          ChildrenDictionary_Child.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ChildrenSortedList_Parents = new StorageDictionaryCSV<ChildrenSortedList_Parent, DC>(
          this,
          csvConfig!,
          ChildrenSortedList_Parent.MaxLineLength,
          ChildrenSortedList_Parent.Headers,
          ChildrenSortedList_Parent.SetKey,
          ChildrenSortedList_Parent.Create,
          null,
          ChildrenSortedList_Parent.Update,
          ChildrenSortedList_Parent.Write,
          ChildrenSortedList_Parent.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ChildrenSortedList_ParentNullables = new StorageDictionaryCSV<ChildrenSortedList_ParentNullable, DC>(
          this,
          csvConfig!,
          ChildrenSortedList_ParentNullable.MaxLineLength,
          ChildrenSortedList_ParentNullable.Headers,
          ChildrenSortedList_ParentNullable.SetKey,
          ChildrenSortedList_ParentNullable.Create,
          null,
          ChildrenSortedList_ParentNullable.Update,
          ChildrenSortedList_ParentNullable.Write,
          ChildrenSortedList_ParentNullable.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ChildrenSortedList_Children = new StorageDictionaryCSV<ChildrenSortedList_Child, DC>(
          this,
          csvConfig!,
          ChildrenSortedList_Child.MaxLineLength,
          ChildrenSortedList_Child.Headers,
          ChildrenSortedList_Child.SetKey,
          ChildrenSortedList_Child.Create,
          ChildrenSortedList_Child.Verify,
          ChildrenSortedList_Child.Update,
          ChildrenSortedList_Child.Write,
          ChildrenSortedList_Child.Disconnect,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
        ReadOnly_Parents = new StorageDictionaryCSV<ReadOnly_Parent, DC>(
          this,
          csvConfig!,
          ReadOnly_Parent.MaxLineLength,
          ReadOnly_Parent.Headers,
          ReadOnly_Parent.SetKey,
          ReadOnly_Parent.Create,
          null,
          null,
          ReadOnly_Parent.Write,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ReadOnly_ParentNullables = new StorageDictionaryCSV<ReadOnly_ParentNullable, DC>(
          this,
          csvConfig!,
          ReadOnly_ParentNullable.MaxLineLength,
          ReadOnly_ParentNullable.Headers,
          ReadOnly_ParentNullable.SetKey,
          ReadOnly_ParentNullable.Create,
          null,
          null,
          ReadOnly_ParentNullable.Write,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ReadOnly_Children = new StorageDictionaryCSV<ReadOnly_Child, DC>(
          this,
          csvConfig!,
          ReadOnly_Child.MaxLineLength,
          ReadOnly_Child.Headers,
          ReadOnly_Child.SetKey,
          ReadOnly_Child.Create,
          ReadOnly_Child.Verify,
          null,
          ReadOnly_Child.Write,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ReadOnlyParentUpdatableChild_Parents = new StorageDictionaryCSV<ReadOnlyParentUpdatableChild_Parent, DC>(
          this,
          csvConfig!,
          ReadOnlyParentUpdatableChild_Parent.MaxLineLength,
          ReadOnlyParentUpdatableChild_Parent.Headers,
          ReadOnlyParentUpdatableChild_Parent.SetKey,
          ReadOnlyParentUpdatableChild_Parent.Create,
          null,
          null,
          ReadOnlyParentUpdatableChild_Parent.Write,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ReadOnlyParentUpdatableChild_ParentNullables = new StorageDictionaryCSV<ReadOnlyParentUpdatableChild_ParentNullable, DC>(
          this,
          csvConfig!,
          ReadOnlyParentUpdatableChild_ParentNullable.MaxLineLength,
          ReadOnlyParentUpdatableChild_ParentNullable.Headers,
          ReadOnlyParentUpdatableChild_ParentNullable.SetKey,
          ReadOnlyParentUpdatableChild_ParentNullable.Create,
          null,
          null,
          ReadOnlyParentUpdatableChild_ParentNullable.Write,
          null,
          areInstancesUpdatable: false,
          areInstancesDeletable: false);
        ReadOnlyParentUpdatableChild_Children = new StorageDictionaryCSV<ReadOnlyParentUpdatableChild_Child, DC>(
          this,
          csvConfig!,
          ReadOnlyParentUpdatableChild_Child.MaxLineLength,
          ReadOnlyParentUpdatableChild_Child.Headers,
          ReadOnlyParentUpdatableChild_Child.SetKey,
          ReadOnlyParentUpdatableChild_Child.Create,
          ReadOnlyParentUpdatableChild_Child.Verify,
          ReadOnlyParentUpdatableChild_Child.Update,
          ReadOnlyParentUpdatableChild_Child.Write,
          null,
          areInstancesUpdatable: true,
          areInstancesDeletable: false);
        PrivateConstructors = new StorageDictionaryCSV<PrivateConstructor, DC>(
          this,
          csvConfig!,
          PrivateConstructor.MaxLineLength,
          PrivateConstructor.Headers,
          PrivateConstructor.SetKey,
          PrivateConstructor.Create,
          null,
          PrivateConstructor.Update,
          PrivateConstructor.Write,
          null,
          areInstancesUpdatable: true,
          areInstancesDeletable: true);
      }
      onConstructed();
      IsInitialised = true;
    }

    /// <summary>}
    /// Called at beginning of constructor
    /// </summary>}
    partial void onConstructing(string? backupResult);

    /// <summary>}
    /// Called at end of constructor
    /// </summary>}
    partial void onConstructed();
    #endregion


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Is DC.Data already disposed ?
    /// </summary>
    public bool IsDisposed {
      get { return isDisposed==1; }
    }
    int isDisposed = 1;


    protected virtual void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      if (disposing) {
        onDispose();
        PrivateConstructors.Dispose();
        ReadOnlyParentUpdatableChild_Children.Dispose();
        ReadOnlyParentUpdatableChild_ParentNullables.Dispose();
        ReadOnlyParentUpdatableChild_Parents.Dispose();
        ReadOnly_Children.Dispose();
        ReadOnly_ParentNullables.Dispose();
        ReadOnly_Parents.Dispose();
        ChildrenSortedList_Children.Dispose();
        ChildrenSortedList_ParentNullables.Dispose();
        ChildrenSortedList_Parents.Dispose();
        ChildrenDictionary_Children.Dispose();
        ChildrenDictionary_ParentNullables.Dispose();
        ChildrenDictionary_Parents.Dispose();
        ChildrenList_CreateOnlyChildren.Dispose();
        ChildrenList_Children.Dispose();
        ChildrenList_CreateOnlyParentNullables.Dispose();
        ChildrenList_CreateOnlyParents.Dispose();
        ChildrenList_ParentNullables.Dispose();
        ChildrenList_Parents.Dispose();
        Lookup_Children.Dispose();
        Lookup_ParentNullables.Dispose();
        Lookup_Parents.Dispose();
        PropertyNeedsDictionaryClasses.Dispose();
        ParentOneChild_ReadonlyChildren.Dispose();
        ParentOneChild_Children.Dispose();
        ParentOneChild_ParentNullables.Dispose();
        ParentOneChild_Parents.Dispose();
        SampleDetails.Dispose();
        SampleX.Dispose();
        SampleMasters.Dispose();
        data = null;
      }
    }

    /// <summary>}
    /// Called before storageDirectories get disposed.
    /// </summary>}
    partial void onDispose();


    public void Dispose() {
      Dispose(true);
    }
    #endregion


    #region Methods
    //      -------

    #endregion

  }
}

