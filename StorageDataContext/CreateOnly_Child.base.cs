//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into CreateOnly_Child.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// Example of a "CreateOnly" Child, i.e. the child's properties will not change. If it is added to a parent during its
    /// creation, it cannot be removed from the parent, because the Parent property of the child cannot be changed
    /// either.
    /// </summary>
  public partial class CreateOnly_Child: IStorage<CreateOnly_Child> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for CreateOnly_Child. Gets set once CreateOnly_Child gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(CreateOnly_Child createOnly_Child, int key) { createOnly_Child.Key = key; }


    /// <summary>
    /// Text will be readonly even it is not marked as such, because class is not updatable
    /// </summary>
    public string Text { get; }


    /// <summary>
    /// CreateOnlyParent will be readonly even it is not marked as such, because class is not updatable
    /// </summary>
    public CreateOnly_Parent CreateOnlyParent { get; }


    /// <summary>
    /// CreateOnlyParentNullable will be readonly even it is not marked as such, because class is not updatable
    /// </summary>          
    public CreateOnly_ParentNullable? CreateOnlyParentNullable { get; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Text", "CreateOnlyParent", "CreateOnlyParentNullable"};


    /// <summary>
    /// None existing CreateOnly_Child
    /// </summary>
    internal static CreateOnly_Child NoCreateOnly_Child = new CreateOnly_Child("NoText", CreateOnly_Parent.NoCreateOnly_Parent, null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// This event will never be raised, but is needed to comply with IStorage.
    /// </summary>
#pragma warning disable 67
    public event Action<CreateOnly_Child>? HasChanged;
#pragma warning restore 67
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// CreateOnly_Child Constructor. If isStoring is true, adds CreateOnly_Child to DC.Data.CreateOnly_Children, 
    /// adds CreateOnly_Child to createOnly_Parent.CreateOnly_Children
    /// and if there is a CreateOnlyParentNullable adds CreateOnly_Child to createOnly_ParentNullable.CreateOnly_Children.
    /// </summary>
    public CreateOnly_Child(string text, CreateOnly_Parent createOnlyParent, CreateOnly_ParentNullable? createOnlyParentNullable, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      CreateOnlyParent = createOnlyParent;
      CreateOnlyParentNullable = createOnlyParentNullable;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for CreateOnly_Child read from CSV file
    /// </summary>
    private CreateOnly_Child(int key, CsvReader csvReader, DC context) {
      Key = key;
      Text = csvReader.ReadString();
      var createOnly_ParentKey = csvReader.ReadInt();
      if (context.CreateOnly_Parents.TryGetValue(createOnly_ParentKey, out var createOnlyParent)) {
          CreateOnlyParent = createOnlyParent;
      } else {
        throw new Exception($"Read CreateOnly_Child from CSV file: Cannot find CreateOnlyParent with key {createOnly_ParentKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      }
      var createOnlyParentNullableKey = csvReader.ReadIntNull();
      if (createOnlyParentNullableKey.HasValue) {
        if (context.CreateOnly_ParentNullables.TryGetValue(createOnlyParentNullableKey.Value, out var createOnlyParentNullable)) {
          CreateOnlyParentNullable = createOnlyParentNullable;
        } else {
          CreateOnlyParentNullable = CreateOnly_ParentNullable.NoCreateOnly_ParentNullable;
        }
      }
      if (CreateOnlyParent!=CreateOnly_Parent.NoCreateOnly_Parent) {
        CreateOnlyParent.AddToCreateOnly_Children(this);
      }
      if (createOnlyParentNullableKey.HasValue && CreateOnlyParentNullable!=CreateOnly_ParentNullable.NoCreateOnly_ParentNullable) {
        CreateOnlyParentNullable!.AddToCreateOnly_Children(this);
      }
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DC context);


    /// <summary>
    /// New CreateOnly_Child read from CSV file
    /// </summary>
    internal static CreateOnly_Child Create(int key, CsvReader csvReader, DC context) {
      return new CreateOnly_Child(key, csvReader, context);
    }


    /// <summary>
    /// Verify that createOnly_Child.CreateOnlyParent exists.
    /// Verify that createOnly_Child.CreateOnlyParentNullable exists.
    /// </summary>
    internal static bool Verify(CreateOnly_Child createOnly_Child) {
      if (createOnly_Child.CreateOnlyParent==CreateOnly_Parent.NoCreateOnly_Parent) return false;
      if (createOnly_Child.CreateOnlyParentNullable==CreateOnly_ParentNullable.NoCreateOnly_ParentNullable) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds CreateOnly_Child to DC.Data.CreateOnly_Children, CreateOnly_Parent and CreateOnly_ParentNullable. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"CreateOnly_Child cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      if (CreateOnlyParent.Key<0) {
        throw new Exception($"CreateOnly_Child cannot be stored in DC.Data, CreateOnlyParent is missing or not stored yet." + Environment.NewLine + ToString());
      }
      if (CreateOnlyParentNullable!=null && CreateOnlyParentNullable.Key<0) {
        throw new Exception($"CreateOnly_Child cannot be stored in DC.Data, CreateOnlyParentNullable is not stored yet." + Environment.NewLine + ToString());
      }
      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data.CreateOnly_Children.Add(this);
      CreateOnlyParent.AddToCreateOnly_Children(this);
      CreateOnlyParentNullable?.AddToCreateOnly_Children(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write CreateOnly_Child to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write CreateOnly_Child to CSV file
    /// </summary>
    internal static void Write(CreateOnly_Child createOnly_Child, CsvWriter csvWriter) {
      createOnly_Child.onCsvWrite();
      csvWriter.Write(createOnly_Child.Text);
      if (createOnly_Child.CreateOnlyParent.Key<0) throw new Exception($"Cannot write createOnly_Child '{createOnly_Child}' to CSV File, because CreateOnlyParent is not stored in DC.Data.CreateOnly_Parents.");

      csvWriter.Write(createOnly_Child.CreateOnlyParent.Key.ToString());
      if (createOnly_Child.CreateOnlyParentNullable is null) {
        csvWriter.WriteNull();
      } else {
        if (createOnly_Child.CreateOnlyParentNullable.Key<0) throw new Exception($"Cannot write createOnly_Child '{createOnly_Child}' to CSV File, because CreateOnlyParentNullable is not stored in DC.Data.CreateOnly_ParentNullables.");

        csvWriter.Write(createOnly_Child.CreateOnlyParentNullable.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Removing CreateOnly_Child from DC.Data.CreateOnly_Children is not supported.
    /// </summary>
    public void Remove() {
      throw new NotSupportedException("StorageClass attribute AreInstancesDeletable is false.");
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}," +
        $" {CreateOnlyParent.ToShortString()}," +
        $" {CreateOnlyParentNullable?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" CreateOnlyParent: {CreateOnlyParent.ToShortString()}," +
        $" CreateOnlyParentNullable: {CreateOnlyParentNullable?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
