//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into PrivateConstructor.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageDataContext  {


    /// <summary>
    /// Example with private constructor.
    /// </summary>
  public partial class PrivateConstructor: IStorageItemGeneric<PrivateConstructor> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for PrivateConstructor. Gets set once PrivateConstructor gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem privateConstructor, int key) {
      ((PrivateConstructor)privateConstructor).Key = key;
    }


    /// <summary>
    /// Some Text
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Text"};


    /// <summary>
    /// None existing PrivateConstructor
    /// </summary>
    internal static PrivateConstructor NoPrivateConstructor = new PrivateConstructor("NoText", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of PrivateConstructor has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/PrivateConstructor, /*new*/PrivateConstructor>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// PrivateConstructor Constructor. If isStoring is true, adds PrivateConstructor to DC.Data.PrivateConstructors.
    /// </summary>
    private PrivateConstructor(string text, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public PrivateConstructor(PrivateConstructor original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Text = original.Text;
      onCloned(this);
    }
    partial void onCloned(PrivateConstructor clone);


    /// <summary>
    /// Constructor for PrivateConstructor read from CSV file
    /// </summary>
    private PrivateConstructor(int key, CsvReader csvReader){
      Key = key;
      Text = csvReader.ReadString();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New PrivateConstructor read from CSV file
    /// </summary>
    internal static PrivateConstructor Create(int key, CsvReader csvReader) {
      return new PrivateConstructor(key, csvReader);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds PrivateConstructor to DC.Data.PrivateConstructors. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"PrivateConstructor cannot be stored again in DC.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data.PrivateConstructors.Add(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write PrivateConstructor to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write PrivateConstructor to CSV file
    /// </summary>
    internal static void Write(PrivateConstructor privateConstructor, CsvWriter csvWriter) {
      privateConstructor.onCsvWrite();
      csvWriter.Write(privateConstructor.Text);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates PrivateConstructor with the provided values
    /// </summary>
    public void Update(string text) {
      var clone = new PrivateConstructor(this);
      var isCancelled = false;
      onUpdating(text, ref isCancelled);
      if (isCancelled) return;

      var isChangeDetected = false;
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data.PrivateConstructors.ItemHasChanged(clone, this);
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(string text, ref bool isCancelled);
    partial void onUpdated(PrivateConstructor old);


    /// <summary>
    /// Updates this PrivateConstructor with values from CSV file
    /// </summary>
    internal static void Update(PrivateConstructor privateConstructor, CsvReader csvReader){
      privateConstructor.Text = csvReader.ReadString();
      privateConstructor.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes PrivateConstructor from DC.Data.PrivateConstructors.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"PrivateConstructor.Remove(): PrivateConstructor 'Class PrivateConstructor' is not stored in DC.Data, key is {Key}.");
      }
      onRemove();
      //the removal of this instance from its parent instances gets executed in Disconnect(), which gets
      //called during the execution of the following line.
      DC.Data.PrivateConstructors.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Removes PrivateConstructor from possible parents as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var privateConstructor = (PrivateConstructor) item;
      privateConstructor.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the PrivateConstructor item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldItem, IStorageItem newItem) {
      var privateConstructorOld = (PrivateConstructor) oldItem;
      var privateConstructorNew = (PrivateConstructor) newItem;
      privateConstructorNew.Text = privateConstructorOld.Text;
      privateConstructorNew.onRollbackItemUpdated(privateConstructorOld);
    }
    partial void onRollbackItemUpdated(PrivateConstructor oldPrivateConstructor);


    /// <summary>
    /// Adds PrivateConstructor item to possible parents again as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemRemove(IStorageItem item) {
      var privateConstructor = (PrivateConstructor) item;
      privateConstructor.onRollbackItemRemoved();
    }
    partial void onRollbackItemRemoved();


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
