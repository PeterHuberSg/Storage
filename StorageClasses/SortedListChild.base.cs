//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into SortedListChild.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// SortedListChild has a member providing the key value needed to add SortedListChild to the 
    /// ParentWithSortedList.SortedListChildren and ParentWithSortedListNullable.SortedListChildren
    /// </summary>
  public partial class SortedListChild: IStorage<SortedListChild> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for SortedListChild. Gets set once SortedListChild gets added to DL.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(SortedListChild sortedListChild, int key) { sortedListChild.Key = key; }


    /// <summary>
    /// Key field used in ParentWithSortedList.SortedListChildren SortedList
    /// Stores only dates but no times.
    /// </summary>
    public DateTime DateKey { get; private set; }


    /// <summary>
    /// Some info
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Parent
    /// </summary>
    public ParentWithSortedList ParentWithSortedList { get; private set; }


    /// <summary>
    /// Nullable Parent
    /// </summary>
    public ParentWithSortedListNullable? ParentWithSortedListNullable { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "DateKey", "Text", "ParentWithSortedList", "ParentWithSortedListNullable"};


    /// <summary>
    /// None existing SortedListChild
    /// </summary>
    internal static SortedListChild NoSortedListChild = new SortedListChild(DateTime.MinValue.Date, "NoText", ParentWithSortedList.NoParentWithSortedList, null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of SortedListChild has changed. Gets only raised for changes occurring after loading DL.Data with previously stored data.
    /// </summary>
    public event Action<SortedListChild>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// SortedListChild Constructor. If isStoring is true, adds SortedListChild to DL.Data.SortedListChildren, 
    /// adds SortedListChild to parentWithSortedList.SortedListChildren
    /// and if there is a ParentWithSortedListNullable adds SortedListChild to parentWithSortedListNullable.SortedListChildren.
    /// </summary>
    public SortedListChild(
      DateTime dateKey, 
      string text, 
      ParentWithSortedList parentWithSortedList, 
      ParentWithSortedListNullable? parentWithSortedListNullable, 
      bool isStoring = true)
    {
      Key = StorageExtensions.NoKey;
      DateKey = dateKey.Floor(Rounding.Days);
      Text = text;
      ParentWithSortedList = parentWithSortedList;
      ParentWithSortedListNullable = parentWithSortedListNullable;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for SortedListChild read from CSV file
    /// </summary>
    private SortedListChild(int key, CsvReader csvReader, DL context) {
      Key = key;
      DateKey = csvReader.ReadDate();
      Text = csvReader.ReadString();
      var parentWithSortedListKey = csvReader.ReadInt();
      if (context.ParentsWithSortedList.TryGetValue(parentWithSortedListKey, out var parentWithSortedList)) {
          ParentWithSortedList = parentWithSortedList;
      } else {
        throw new Exception($"Read SortedListChild from CSV file: Cannot find ParentWithSortedList with key {parentWithSortedListKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      }
      var parentWithSortedListNullableKey = csvReader.ReadIntNull();
      if (parentWithSortedListNullableKey.HasValue) {
        if (context.ParentsWithSortedListNullable.TryGetValue(parentWithSortedListNullableKey.Value, out var parentWithSortedListNullable)) {
          ParentWithSortedListNullable = parentWithSortedListNullable;
        } else {
          ParentWithSortedListNullable = ParentWithSortedListNullable.NoParentWithSortedListNullable;
        }
      }
      if (ParentWithSortedList!=ParentWithSortedList.NoParentWithSortedList) {
        ParentWithSortedList.AddToSortedListChildren(this);
      }
      if (parentWithSortedListNullableKey.HasValue && ParentWithSortedListNullable!=ParentWithSortedListNullable.NoParentWithSortedListNullable) {
        ParentWithSortedListNullable!.AddToSortedListChildren(this);
      }
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DL context);


    /// <summary>
    /// New SortedListChild read from CSV file
    /// </summary>
    internal static SortedListChild Create(int key, CsvReader csvReader, DL context) {
      return new SortedListChild(key, csvReader, context);
    }


    /// <summary>
    /// Verify that sortedListChild.ParentWithSortedList exists.
    /// Verify that sortedListChild.ParentWithSortedListNullable exists.
    /// </summary>
    internal static bool Verify(SortedListChild sortedListChild) {
      if (sortedListChild.ParentWithSortedList==ParentWithSortedList.NoParentWithSortedList) return false;
      if (sortedListChild.ParentWithSortedListNullable==ParentWithSortedListNullable.NoParentWithSortedListNullable) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds SortedListChild to DL.Data.SortedListChildren, ParentWithSortedList.SortedListChildren and ParentWithSortedListNullable.SortedListChildren. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"SortedListChild can not be stored in DL.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      if (ParentWithSortedList.Key<0) {
        throw new Exception($"SortedListChild can not be stored in DL.Data, ParentWithSortedList is missing." + Environment.NewLine + ToString());
      }
      onStore();
      DL.Data.SortedListChildren.Add(this);
      ParentWithSortedList.AddToSortedListChildren(this);
      ParentWithSortedListNullable?.AddToSortedListChildren(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write SortedListChild to CSV file
    /// </summary>
    internal const int MaxLineLength = 161;


    /// <summary>
    /// Write SortedListChild to CSV file
    /// </summary>
    internal static void Write(SortedListChild sortedListChild, CsvWriter csvWriter) {
      sortedListChild.onCsvWrite();
      csvWriter.WriteDate(sortedListChild.DateKey);
      csvWriter.Write(sortedListChild.Text);
      if (sortedListChild.ParentWithSortedList.Key<0) throw new Exception($"Cannot write sortedListChild '{sortedListChild}' to CSV File, because ParentWithSortedList is not stored in DL.Data.ParentsWithSortedList.");

      csvWriter.Write(sortedListChild.ParentWithSortedList.Key.ToString());
      if (sortedListChild.ParentWithSortedListNullable is null) {
        csvWriter.WriteNull();
      } else {
        if (sortedListChild.ParentWithSortedListNullable.Key<0) throw new Exception($"Cannot write sortedListChild '{sortedListChild}' to CSV File, because ParentWithSortedListNullable is not stored in DL.Data.ParentsWithSortedListNullable.");

        csvWriter.Write(sortedListChild.ParentWithSortedListNullable.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates SortedListChild with the provided values
    /// </summary>
    public void Update(DateTime dateKey, string text, ParentWithSortedList parentWithSortedList, ParentWithSortedListNullable? parentWithSortedListNullable) {
      var isChangeDetected = false;
      var dateKeyRounded = dateKey.Floor(Rounding.Days);
      if (DateKey!=dateKeyRounded) {
        DateKey = dateKeyRounded;
        isChangeDetected = true;
      }
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (ParentWithSortedList!=parentWithSortedList) {
        ParentWithSortedList.RemoveFromSortedListChildren(this);
        ParentWithSortedList = parentWithSortedList;
        ParentWithSortedList.AddToSortedListChildren(this);
        isChangeDetected = true;
      }
      if (ParentWithSortedListNullable is null) {
        if (parentWithSortedListNullable is null) {
          //nothing to do
        } else {
          ParentWithSortedListNullable = parentWithSortedListNullable;
          ParentWithSortedListNullable.AddToSortedListChildren(this);
          isChangeDetected = true;
        }
      } else {
        if (parentWithSortedListNullable is null) {
          ParentWithSortedListNullable.RemoveFromSortedListChildren(this);
          ParentWithSortedListNullable = null;
          isChangeDetected = true;
        } else {
          if (ParentWithSortedListNullable!=parentWithSortedListNullable) {
            ParentWithSortedListNullable.RemoveFromSortedListChildren(this);
            ParentWithSortedListNullable = parentWithSortedListNullable;
            ParentWithSortedListNullable.AddToSortedListChildren(this);
            isChangeDetected = true;
          }
        }
      }
      if (isChangeDetected) {
        onUpdate();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdate();


    /// <summary>
    /// Updates this SortedListChild with values from CSV file
    /// </summary>
    internal static void Update(SortedListChild sortedListChild, CsvReader csvReader, DL context) {
      sortedListChild.DateKey = csvReader.ReadDate();
      sortedListChild.Text = csvReader.ReadString();
      if (!context.ParentsWithSortedList.TryGetValue(csvReader.ReadInt(), out var parentWithSortedList)) {
        parentWithSortedList = ParentWithSortedList.NoParentWithSortedList;
      }
      if (sortedListChild.ParentWithSortedList!=parentWithSortedList) {
        if (sortedListChild.ParentWithSortedList!=ParentWithSortedList.NoParentWithSortedList) {
          sortedListChild.ParentWithSortedList.RemoveFromSortedListChildren(sortedListChild);
        }
        sortedListChild.ParentWithSortedList = parentWithSortedList;
        sortedListChild.ParentWithSortedList.AddToSortedListChildren(sortedListChild);
      }
      var parentWithSortedListNullableKey = csvReader.ReadIntNull();
      ParentWithSortedListNullable? parentWithSortedListNullable;
      if (parentWithSortedListNullableKey is null) {
        parentWithSortedListNullable = null;
      } else {
        if (!context.ParentsWithSortedListNullable.TryGetValue(parentWithSortedListNullableKey.Value, out parentWithSortedListNullable)) {
          parentWithSortedListNullable = ParentWithSortedListNullable.NoParentWithSortedListNullable;
        }
      }
      if (sortedListChild.ParentWithSortedListNullable is null) {
        if (parentWithSortedListNullable is null) {
          //nothing to do
        } else {
          sortedListChild.ParentWithSortedListNullable = parentWithSortedListNullable;
          sortedListChild.ParentWithSortedListNullable.AddToSortedListChildren(sortedListChild);
        }
      } else {
        if (parentWithSortedListNullable is null) {
          if (sortedListChild.ParentWithSortedListNullable!=ParentWithSortedListNullable.NoParentWithSortedListNullable) {
            sortedListChild.ParentWithSortedListNullable.RemoveFromSortedListChildren(sortedListChild);
          }
          sortedListChild.ParentWithSortedListNullable = null;
        } else {
          if (sortedListChild.ParentWithSortedListNullable!=ParentWithSortedListNullable.NoParentWithSortedListNullable) {
            sortedListChild.ParentWithSortedListNullable.RemoveFromSortedListChildren(sortedListChild);
          }
          sortedListChild.ParentWithSortedListNullable = parentWithSortedListNullable;
          sortedListChild.ParentWithSortedListNullable.AddToSortedListChildren(sortedListChild);
        }
      }
      sortedListChild.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes SortedListChild from DL.Data.SortedListChildren, 
    /// disconnects SortedListChild from ParentWithSortedList because of ParentWithSortedList and 
    /// disconnects SortedListChild from ParentWithSortedListNullable because of ParentWithSortedListNullable.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"SortedListChild.Remove(): SortedListChild 'Class SortedListChild' is not stored in DL.Data, key is {Key}.");
      }
      onRemove();
      DL.Data.SortedListChildren.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Disconnects SortedListChild from ParentWithSortedList because of ParentWithSortedList and 
    /// disconnects SortedListChild from ParentWithSortedListNullable because of ParentWithSortedListNullable.
    /// </summary>
    internal static void Disconnect(SortedListChild sortedListChild) {
      if (sortedListChild.ParentWithSortedList!=ParentWithSortedList.NoParentWithSortedList) {
        sortedListChild.ParentWithSortedList.RemoveFromSortedListChildren(sortedListChild);
      }
      if (sortedListChild.ParentWithSortedListNullable!=null && sortedListChild.ParentWithSortedListNullable!=ParentWithSortedListNullable.NoParentWithSortedListNullable) {
        sortedListChild.ParentWithSortedListNullable.RemoveFromSortedListChildren(sortedListChild);
      }
    }


    /// <summary>
    /// Removes parentWithSortedListNullable from ParentWithSortedListNullable
    /// </summary>
    internal void RemoveParentWithSortedListNullable(ParentWithSortedListNullable parentWithSortedListNullable) {
      if (parentWithSortedListNullable!=ParentWithSortedListNullable) throw new Exception();
      ParentWithSortedListNullable = null;
      HasChanged?.Invoke(this);
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {DateKey.ToShortDateString()}," +
        $" {Text}," +
        $" {ParentWithSortedList.ToShortString()}," +
        $" {ParentWithSortedListNullable?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" DateKey: {DateKey.ToShortDateString()}," +
        $" Text: {Text}," +
        $" ParentWithSortedList: {ParentWithSortedList.ToShortString()}," +
        $" ParentWithSortedListNullable: {ParentWithSortedListNullable?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
