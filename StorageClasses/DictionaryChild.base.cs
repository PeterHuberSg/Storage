//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into DictionaryChild.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// DictionaryChild has a member providing the key value needed to add DictionaryChild to the 
    /// ParentWithDictionary.DictionaryChildren and ParentWithDictionaryNullable.DictionaryChildren
    /// </summary>
  public partial class DictionaryChild: IStorage<DictionaryChild> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for DictionaryChild. Gets set once DictionaryChild gets added to DL.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(DictionaryChild dictionaryChild, int key) { dictionaryChild.Key = key; }


    /// <summary>
    /// Key field used in ParentWithDictionary.DictionaryChildren and 
    /// ParentWithDictionaryNullable.DictionaryChildrenDictionary
    /// Stores only dates but no times.
    /// </summary>
    public DateTime DateKey { get; private set; }


    /// <summary>
    /// Some info
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Parent
    /// </summary>
    public ParentWithDictionary ParentWithDictionary { get; private set; }


    /// <summary>
    /// Nullable parent
    /// </summary>
    public ParentWithDictionaryNullable? ParentWithDictionaryNullable { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "DateKey", "Text", "ParentWithDictionary", "ParentWithDictionaryNullable"};


    /// <summary>
    /// None existing DictionaryChild
    /// </summary>
    internal static DictionaryChild NoDictionaryChild = new DictionaryChild(DateTime.MinValue.Date, "NoText", ParentWithDictionary.NoParentWithDictionary, null, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of DictionaryChild has changed. Gets only raised for changes occurring after loading DL.Data with previously stored data.
    /// </summary>
    public event Action<DictionaryChild>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// DictionaryChild Constructor. If isStoring is true, adds DictionaryChild to DL.Data.DictionaryChildren, 
    /// adds DictionaryChild to parentWithDictionary.DictionaryChildren
    /// and if there is a ParentWithDictionaryNullable adds DictionaryChild to parentWithDictionaryNullable.DictionaryChildren.
    /// </summary>
    public DictionaryChild(
      DateTime dateKey, 
      string text, 
      ParentWithDictionary parentWithDictionary, 
      ParentWithDictionaryNullable? parentWithDictionaryNullable, 
      bool isStoring = true)
    {
      Key = StorageExtensions.NoKey;
      DateKey = dateKey.Floor(Rounding.Days);
      Text = text;
      ParentWithDictionary = parentWithDictionary;
      ParentWithDictionaryNullable = parentWithDictionaryNullable;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for DictionaryChild read from CSV file
    /// </summary>
    private DictionaryChild(int key, CsvReader csvReader, DL context) {
      Key = key;
      DateKey = csvReader.ReadDate();
      Text = csvReader.ReadString();
      var parentWithDictionaryKey = csvReader.ReadInt();
      if (context.ParentsWithDictionary.TryGetValue(parentWithDictionaryKey, out var parentWithDictionary)) {
          ParentWithDictionary = parentWithDictionary;
      } else {
        throw new Exception($"Read DictionaryChild from CSV file: Cannot find ParentWithDictionary with key {parentWithDictionaryKey}." + Environment.NewLine + 
          csvReader.PresentContent);
      }
      var parentWithDictionaryNullableKey = csvReader.ReadIntNull();
      if (parentWithDictionaryNullableKey.HasValue) {
        if (context.ParentsWithDictionaryNullable.TryGetValue(parentWithDictionaryNullableKey.Value, out var parentWithDictionaryNullable)) {
          ParentWithDictionaryNullable = parentWithDictionaryNullable;
        } else {
          ParentWithDictionaryNullable = ParentWithDictionaryNullable.NoParentWithDictionaryNullable;
        }
      }
      if (ParentWithDictionary!=ParentWithDictionary.NoParentWithDictionary) {
        ParentWithDictionary.AddToDictionaryChildren(this);
      }
      if (parentWithDictionaryNullableKey.HasValue && ParentWithDictionaryNullable!=ParentWithDictionaryNullable.NoParentWithDictionaryNullable) {
        ParentWithDictionaryNullable!.AddToDictionaryChildren(this);
      }
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DL context);


    /// <summary>
    /// New DictionaryChild read from CSV file
    /// </summary>
    internal static DictionaryChild Create(int key, CsvReader csvReader, DL context) {
      return new DictionaryChild(key, csvReader, context);
    }


    /// <summary>
    /// Verify that dictionaryChild.ParentWithDictionary exists.
    /// Verify that dictionaryChild.ParentWithDictionaryNullable exists.
    /// </summary>
    internal static bool Verify(DictionaryChild dictionaryChild) {
      if (dictionaryChild.ParentWithDictionary==ParentWithDictionary.NoParentWithDictionary) return false;
      if (dictionaryChild.ParentWithDictionaryNullable==ParentWithDictionaryNullable.NoParentWithDictionaryNullable) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds DictionaryChild to DL.Data.DictionaryChildren, ParentWithDictionary.DictionaryChildren and ParentWithDictionaryNullable.DictionaryChildren. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"DictionaryChild can not be stored in DL.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      if (ParentWithDictionary.Key<0) {
        throw new Exception($"DictionaryChild can not be stored in DL.Data, ParentWithDictionary is missing." + Environment.NewLine + ToString());
      }
      onStore();
      DL.Data.DictionaryChildren.Add(this);
      ParentWithDictionary.AddToDictionaryChildren(this);
      ParentWithDictionaryNullable?.AddToDictionaryChildren(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write DictionaryChild to CSV file
    /// </summary>
    internal const int MaxLineLength = 161;


    /// <summary>
    /// Write DictionaryChild to CSV file
    /// </summary>
    internal static void Write(DictionaryChild dictionaryChild, CsvWriter csvWriter) {
      dictionaryChild.onCsvWrite();
      csvWriter.WriteDate(dictionaryChild.DateKey);
      csvWriter.Write(dictionaryChild.Text);
      if (dictionaryChild.ParentWithDictionary.Key<0) throw new Exception($"Cannot write dictionaryChild '{dictionaryChild}' to CSV File, because ParentWithDictionary is not stored in DL.Data.ParentsWithDictionary.");

      csvWriter.Write(dictionaryChild.ParentWithDictionary.Key.ToString());
      if (dictionaryChild.ParentWithDictionaryNullable is null) {
        csvWriter.WriteNull();
      } else {
        if (dictionaryChild.ParentWithDictionaryNullable.Key<0) throw new Exception($"Cannot write dictionaryChild '{dictionaryChild}' to CSV File, because ParentWithDictionaryNullable is not stored in DL.Data.ParentsWithDictionaryNullable.");

        csvWriter.Write(dictionaryChild.ParentWithDictionaryNullable.Key.ToString());
      }
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates DictionaryChild with the provided values
    /// </summary>
    public void Update(DateTime dateKey, string text, ParentWithDictionary parentWithDictionary, ParentWithDictionaryNullable? parentWithDictionaryNullable) {
      var isChangeDetected = false;
      var dateKeyRounded = dateKey.Floor(Rounding.Days);
      if (DateKey!=dateKeyRounded) {
        DateKey = dateKeyRounded;
        isChangeDetected = true;
      }
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (ParentWithDictionary!=parentWithDictionary) {
        ParentWithDictionary.RemoveFromDictionaryChildren(this);
        ParentWithDictionary = parentWithDictionary;
        ParentWithDictionary.AddToDictionaryChildren(this);
        isChangeDetected = true;
      }
      if (ParentWithDictionaryNullable is null) {
        if (parentWithDictionaryNullable is null) {
          //nothing to do
        } else {
          ParentWithDictionaryNullable = parentWithDictionaryNullable;
          ParentWithDictionaryNullable.AddToDictionaryChildren(this);
          isChangeDetected = true;
        }
      } else {
        if (parentWithDictionaryNullable is null) {
          ParentWithDictionaryNullable.RemoveFromDictionaryChildren(this);
          ParentWithDictionaryNullable = null;
          isChangeDetected = true;
        } else {
          if (ParentWithDictionaryNullable!=parentWithDictionaryNullable) {
            ParentWithDictionaryNullable.RemoveFromDictionaryChildren(this);
            ParentWithDictionaryNullable = parentWithDictionaryNullable;
            ParentWithDictionaryNullable.AddToDictionaryChildren(this);
            isChangeDetected = true;
          }
        }
      }
      if (isChangeDetected) {
        onUpdate();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdate();


    /// <summary>
    /// Updates this DictionaryChild with values from CSV file
    /// </summary>
    internal static void Update(DictionaryChild dictionaryChild, CsvReader csvReader, DL context) {
      dictionaryChild.DateKey = csvReader.ReadDate();
      dictionaryChild.Text = csvReader.ReadString();
      if (!context.ParentsWithDictionary.TryGetValue(csvReader.ReadInt(), out var parentWithDictionary)) {
        parentWithDictionary = ParentWithDictionary.NoParentWithDictionary;
      }
      if (dictionaryChild.ParentWithDictionary!=parentWithDictionary) {
        if (dictionaryChild.ParentWithDictionary!=ParentWithDictionary.NoParentWithDictionary) {
          dictionaryChild.ParentWithDictionary.RemoveFromDictionaryChildren(dictionaryChild);
        }
        dictionaryChild.ParentWithDictionary = parentWithDictionary;
        dictionaryChild.ParentWithDictionary.AddToDictionaryChildren(dictionaryChild);
      }
      var parentWithDictionaryNullableKey = csvReader.ReadIntNull();
      ParentWithDictionaryNullable? parentWithDictionaryNullable;
      if (parentWithDictionaryNullableKey is null) {
        parentWithDictionaryNullable = null;
      } else {
        if (!context.ParentsWithDictionaryNullable.TryGetValue(parentWithDictionaryNullableKey.Value, out parentWithDictionaryNullable)) {
          parentWithDictionaryNullable = ParentWithDictionaryNullable.NoParentWithDictionaryNullable;
        }
      }
      if (dictionaryChild.ParentWithDictionaryNullable is null) {
        if (parentWithDictionaryNullable is null) {
          //nothing to do
        } else {
          dictionaryChild.ParentWithDictionaryNullable = parentWithDictionaryNullable;
          dictionaryChild.ParentWithDictionaryNullable.AddToDictionaryChildren(dictionaryChild);
        }
      } else {
        if (parentWithDictionaryNullable is null) {
          if (dictionaryChild.ParentWithDictionaryNullable!=ParentWithDictionaryNullable.NoParentWithDictionaryNullable) {
            dictionaryChild.ParentWithDictionaryNullable.RemoveFromDictionaryChildren(dictionaryChild);
          }
          dictionaryChild.ParentWithDictionaryNullable = null;
        } else {
          if (dictionaryChild.ParentWithDictionaryNullable!=ParentWithDictionaryNullable.NoParentWithDictionaryNullable) {
            dictionaryChild.ParentWithDictionaryNullable.RemoveFromDictionaryChildren(dictionaryChild);
          }
          dictionaryChild.ParentWithDictionaryNullable = parentWithDictionaryNullable;
          dictionaryChild.ParentWithDictionaryNullable.AddToDictionaryChildren(dictionaryChild);
        }
      }
      dictionaryChild.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes DictionaryChild from DL.Data.DictionaryChildren, 
    /// disconnects DictionaryChild from ParentWithDictionary because of ParentWithDictionary and 
    /// disconnects DictionaryChild from ParentWithDictionaryNullable because of ParentWithDictionaryNullable.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"DictionaryChild.Remove(): DictionaryChild 'Class DictionaryChild' is not stored in DL.Data, key is {Key}.");
      }
      onRemove();
      DL.Data.DictionaryChildren.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Disconnects DictionaryChild from ParentWithDictionary because of ParentWithDictionary and 
    /// disconnects DictionaryChild from ParentWithDictionaryNullable because of ParentWithDictionaryNullable.
    /// </summary>
    internal static void Disconnect(DictionaryChild dictionaryChild) {
      if (dictionaryChild.ParentWithDictionary!=ParentWithDictionary.NoParentWithDictionary) {
        dictionaryChild.ParentWithDictionary.RemoveFromDictionaryChildren(dictionaryChild);
      }
      if (dictionaryChild.ParentWithDictionaryNullable!=null && dictionaryChild.ParentWithDictionaryNullable!=ParentWithDictionaryNullable.NoParentWithDictionaryNullable) {
        dictionaryChild.ParentWithDictionaryNullable.RemoveFromDictionaryChildren(dictionaryChild);
      }
    }


    /// <summary>
    /// Removes parentWithDictionaryNullable from ParentWithDictionaryNullable
    /// </summary>
    internal void RemoveParentWithDictionaryNullable(ParentWithDictionaryNullable parentWithDictionaryNullable) {
      if (parentWithDictionaryNullable!=ParentWithDictionaryNullable) throw new Exception();
      ParentWithDictionaryNullable = null;
      HasChanged?.Invoke(this);
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {DateKey.ToShortDateString()}," +
        $" {Text}," +
        $" {ParentWithDictionary.ToShortString()}," +
        $" {ParentWithDictionaryNullable?.ToShortString()}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" DateKey: {DateKey.ToShortDateString()}," +
        $" Text: {Text}," +
        $" ParentWithDictionary: {ParentWithDictionary.ToShortString()}," +
        $" ParentWithDictionaryNullable: {ParentWithDictionaryNullable?.ToShortString()};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
