//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ParentWithSortedList.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// Example of a parent child relationship using a SortedList.
    /// </summary>
  public partial class ParentWithSortedList: IStorage<ParentWithSortedList> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ParentWithSortedList. Gets set once ParentWithSortedList gets added to DL.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(ParentWithSortedList parentWithSortedList, int key) { parentWithSortedList.Key = key; }


    /// <summary>
    /// This text is readonly. Readonly only matters when [StorageClass(areInstancesUpdatable: true)]
    /// </summary>
    public string TextReadOnly { get; }


    /// <summary>
    /// This text can be updated
    /// </summary>
    public string TextUpdateable { get; private set; }


    /// <summary>
    /// SortedList used instead of List. Comment is required and indicates which property of the SortedListChild to 
    /// use as key
    /// </summary>
    public IReadOnlyDictionary<DateTime, SortedListChild> SortedListChildren => sortedListChildren;
    readonly SortedList<DateTime, SortedListChild> sortedListChildren;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "TextReadOnly", "TextUpdateable"};


    /// <summary>
    /// None existing ParentWithSortedList
    /// </summary>
    internal static ParentWithSortedList NoParentWithSortedList = new ParentWithSortedList("NoTextReadOnly", "NoTextUpdateable", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of ParentWithSortedList has changed. Gets only raised for changes occurring after loading DL.Data with previously stored data.
    /// </summary>
    public event Action<ParentWithSortedList>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ParentWithSortedList Constructor. If isStoring is true, adds ParentWithSortedList to DL.Data.ParentsWithSortedList.
    /// </summary>
    public ParentWithSortedList(string textReadOnly, string textUpdateable, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      TextReadOnly = textReadOnly;
      TextUpdateable = textUpdateable;
      sortedListChildren = new SortedList<DateTime, SortedListChild>();
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for ParentWithSortedList read from CSV file
    /// </summary>
    private ParentWithSortedList(int key, CsvReader csvReader, DL context) {
      Key = key;
      TextReadOnly = csvReader.ReadString();
      TextUpdateable = csvReader.ReadString();
      sortedListChildren = new SortedList<DateTime, SortedListChild>();
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DL context);


    /// <summary>
    /// New ParentWithSortedList read from CSV file
    /// </summary>
    internal static ParentWithSortedList Create(int key, CsvReader csvReader, DL context) {
      return new ParentWithSortedList(key, csvReader, context);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ParentWithSortedList to DL.Data.ParentsWithSortedList. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ParentWithSortedList can not be stored again in DL.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      onStore();
      DL.Data.ParentsWithSortedList.Add(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write ParentWithSortedList to CSV file
    /// </summary>
    internal const int MaxLineLength = 300;


    /// <summary>
    /// Write ParentWithSortedList to CSV file
    /// </summary>
    internal static void Write(ParentWithSortedList parentWithSortedList, CsvWriter csvWriter) {
      parentWithSortedList.onCsvWrite();
      csvWriter.Write(parentWithSortedList.TextReadOnly);
      csvWriter.Write(parentWithSortedList.TextUpdateable);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates ParentWithSortedList with the provided values
    /// </summary>
    public void Update(string textUpdateable) {
      var isChangeDetected = false;
      if (TextUpdateable!=textUpdateable) {
        TextUpdateable = textUpdateable;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdate();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdate();


    /// <summary>
    /// Updates this ParentWithSortedList with values from CSV file
    /// </summary>
    internal static void Update(ParentWithSortedList parentWithSortedList, CsvReader csvReader, DL _) {
      var value = csvReader.ReadString();
      if (parentWithSortedList.TextReadOnly!=value) {
        throw new Exception($"ParentWithSortedList.Update(): Property TextReadOnly '{parentWithSortedList.TextReadOnly}' is " +
          $"readonly, the value '{value}' read from the CSV file should be the same." + Environment.NewLine + 
          parentWithSortedList.ToString());
      }
      parentWithSortedList.TextUpdateable = csvReader.ReadString();
      parentWithSortedList.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Add sortedListChild to SortedListChildren.
    /// </summary>
    internal void AddToSortedListChildren(SortedListChild sortedListChild) {
      sortedListChildren.Add(sortedListChild.DateKey, sortedListChild);
      onAddedToSortedListChildren(sortedListChild);
    }
    partial void onAddedToSortedListChildren(SortedListChild sortedListChild);


    /// <summary>
    /// Removes sortedListChild from SortedListChildren.
    /// </summary>
    internal void RemoveFromSortedListChildren(SortedListChild sortedListChild) {
#if DEBUG
      if (!sortedListChildren.Remove(sortedListChild.DateKey)) throw new Exception();
#else
        sortedListChildren.Remove(sortedListChild.DateKey);
#endif
      onRemovedFromSortedListChildren(sortedListChild);
    }
    partial void onRemovedFromSortedListChildren(SortedListChild sortedListChild);


    /// <summary>
    /// Removes ParentWithSortedList from DL.Data.ParentsWithSortedList and 
    /// deletes all SortedListChild where SortedListChild.ParentWithSortedList links to this ParentWithSortedList.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"ParentWithSortedList.Remove(): ParentWithSortedList 'Class ParentWithSortedList' is not stored in DL.Data, key is {Key}.");
      }
      onRemove();
      DL.Data.ParentsWithSortedList.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Deletes all SortedListChild where SortedListChild.ParentWithSortedList links to this ParentWithSortedList.
    /// </summary>
    internal static void Disconnect(ParentWithSortedList parentWithSortedList) {
      var sortedListChildren = new SortedListChild[parentWithSortedList.SortedListChildren.Count];
      parentWithSortedList.sortedListChildren.Values.CopyTo(sortedListChildren, 0);
      foreach (var sortedListChild in sortedListChildren) {
         if (sortedListChild.Key>=0) {
           sortedListChild.Remove();
         }
      }
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {TextReadOnly}," +
        $" {TextUpdateable}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" TextReadOnly: {TextReadOnly}," +
        $" TextUpdateable: {TextUpdateable}," +
        $" SortedListChildren: {SortedListChildren.Count};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
