//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ReadOnlyParentNullable.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// Example of a "readonly" Parent, i.e. the parent's properties will not change and the parent will never get
    /// deleted, but it is still possible to add children, but not to remove them. The parent property in the child 
    /// is nullable.
    /// </summary>
  public partial class ReadOnlyParentNullable: IStorage<ReadOnlyParentNullable> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ReadOnlyParentNullable. Gets set once ReadOnlyParentNullable gets added to DL.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(ReadOnlyParentNullable readOnlyParentNullable, int key) { readOnlyParentNullable.Key = key; }


    /// <summary>
    /// Readonly Text, because class is not updatable
    /// </summary>
    public string Text { get; }


    /// <summary>
    /// List of children
    /// </summary>
    public IReadOnlyList<ReadOnlyChild> ReadOnlyChildren => readOnlyChildren;
    readonly List<ReadOnlyChild> readOnlyChildren;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Text"};


    /// <summary>
    /// None existing ReadOnlyParentNullable
    /// </summary>
    internal static ReadOnlyParentNullable NoReadOnlyParentNullable = new ReadOnlyParentNullable("NoText", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// This event will never be raised, but is needed to comply with IStorage.
    /// </summary>
#pragma warning disable 67
    public event Action<ReadOnlyParentNullable>? HasChanged;
#pragma warning restore 67
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ReadOnlyParentNullable Constructor. If isStoring is true, adds ReadOnlyParentNullable to DL.Data.ReadOnlyParentNullables.
    /// </summary>
    public ReadOnlyParentNullable(string text, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      readOnlyChildren = new List<ReadOnlyChild>();
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for ReadOnlyParentNullable read from CSV file
    /// </summary>
    private ReadOnlyParentNullable(int key, CsvReader csvReader, DL context) {
      Key = key;
      Text = csvReader.ReadString();
      readOnlyChildren = new List<ReadOnlyChild>();
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DL context);


    /// <summary>
    /// New ReadOnlyParentNullable read from CSV file
    /// </summary>
    internal static ReadOnlyParentNullable Create(int key, CsvReader csvReader, DL context) {
      return new ReadOnlyParentNullable(key, csvReader, context);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ReadOnlyParentNullable to DL.Data.ReadOnlyParentNullables. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ReadOnlyParentNullable can not be stored again in DL.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      onStore();
      DL.Data.ReadOnlyParentNullables.Add(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write ReadOnlyParentNullable to CSV file
    /// </summary>
    internal const int MaxLineLength = 150;


    /// <summary>
    /// Write ReadOnlyParentNullable to CSV file
    /// </summary>
    internal static void Write(ReadOnlyParentNullable readOnlyParentNullable, CsvWriter csvWriter) {
      readOnlyParentNullable.onCsvWrite();
      csvWriter.Write(readOnlyParentNullable.Text);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Add readOnlyChild to ReadOnlyChildren.
    /// </summary>
    internal void AddToReadOnlyChildren(ReadOnlyChild readOnlyChild) {
      readOnlyChildren.Add(readOnlyChild);
      onAddedToReadOnlyChildren(readOnlyChild);
    }
    partial void onAddedToReadOnlyChildren(ReadOnlyChild readOnlyChild);


    /// <summary>
    /// Removing ReadOnlyParentNullable from DL.Data.ReadOnlyParentNullables is not supported.
    /// </summary>
    public void Remove() {
      throw new NotSupportedException("StorageClass attribute AreInstancesDeletable is false.");
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" ReadOnlyChildren: {ReadOnlyChildren.Count};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
