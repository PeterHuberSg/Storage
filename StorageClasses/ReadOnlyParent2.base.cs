//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ReadOnlyParent2.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// Example of a "readonly" Parent, i.e. the parent's properties will not change and the parent will never get
    /// deleted, but it is still possible to add children, but not to remove them.
    /// </summary>
  public partial class ReadOnlyParent2: IStorage<ReadOnlyParent2> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ReadOnlyParent2. Gets set once ReadOnlyParent2 gets added to DL.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(ReadOnlyParent2 readOnlyParent2, int key) { readOnlyParent2.Key = key; }


    /// <summary>
    /// Readonly Text, because class is not updatable
    /// </summary>
    public string Text { get; }


    /// <summary>
    /// List of children
    /// </summary>
    public IReadOnlyList<UpdatableChild> UpdatableChildren => updatableChildren;
    readonly List<UpdatableChild> updatableChildren;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Text"};


    /// <summary>
    /// None existing ReadOnlyParent2
    /// </summary>
    internal static ReadOnlyParent2 NoReadOnlyParent2 = new ReadOnlyParent2("NoText", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// This event will never be raised, but is needed to comply with IStorage.
    /// </summary>
#pragma warning disable 67
    public event Action<ReadOnlyParent2>? HasChanged;
#pragma warning restore 67
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ReadOnlyParent2 Constructor. If isStoring is true, adds ReadOnlyParent2 to DL.Data.ReadOnlyParent2s.
    /// </summary>
    public ReadOnlyParent2(string text, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      updatableChildren = new List<UpdatableChild>();
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for ReadOnlyParent2 read from CSV file
    /// </summary>
    private ReadOnlyParent2(int key, CsvReader csvReader, DL context) {
      Key = key;
      Text = csvReader.ReadString();
      updatableChildren = new List<UpdatableChild>();
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DL context);


    /// <summary>
    /// New ReadOnlyParent2 read from CSV file
    /// </summary>
    internal static ReadOnlyParent2 Create(int key, CsvReader csvReader, DL context) {
      return new ReadOnlyParent2(key, csvReader, context);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ReadOnlyParent2 to DL.Data.ReadOnlyParent2s. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ReadOnlyParent2 can not be stored again in DL.Data, key is {Key} greater equal 0." + Environment.NewLine + ToString());
      }
      onStore();
      DL.Data.ReadOnlyParent2s.Add(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write ReadOnlyParent2 to CSV file
    /// </summary>
    public const int MaxLineLength = 150;


    /// <summary>
    /// Write ReadOnlyParent2 to CSV file
    /// </summary>
    internal static void Write(ReadOnlyParent2 readOnlyParent2, CsvWriter csvWriter) {
      readOnlyParent2.onCsvWrite();
      csvWriter.Write(readOnlyParent2.Text);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Add updatableChild to UpdatableChildren.
    /// </summary>
    internal void AddToUpdatableChildren(UpdatableChild updatableChild) {
      updatableChildren.Add(updatableChild);
      onAddedToUpdatableChildren(updatableChild);
    }
    partial void onAddedToUpdatableChildren(UpdatableChild updatableChild);


    /// <summary>
    /// Removes updatableChild from UpdatableChildren.
    /// </summary>
    internal void RemoveFromUpdatableChildren(UpdatableChild updatableChild) {
#if DEBUG
      if (!updatableChildren.Remove(updatableChild)) throw new Exception();
#else
        updatableChildren.Remove(updatableChild);
#endif
      onRemovedFromUpdatableChildren(updatableChild);
    }
    partial void onRemovedFromUpdatableChildren(UpdatableChild updatableChild);


    /// <summary>
    /// Removing ReadOnlyParent2 from DL.Data.ReadOnlyParent2s is not supported.
    /// </summary>
    public void Remove() {
      throw new NotSupportedException("StorageClass attribute AreInstancesDeletable is false.");
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" UpdatableChildren: {UpdatableChildren.Count};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }


  #region ReadOnlyParent2Writer
  //      ---------------------

  /// <summary>
  /// Writes a CSV file containing records which can be read back as ReadOnlyParent2. Note that the keys of linked objects
  /// need to be provided in Write(), since the data context will not be involved.
  /// </summary>
  public class ReadOnlyParent2Writer: IDisposable {

    readonly CsvConfig csvConfig;
    readonly CsvWriter csvWriter;


    /// <summary>
    /// Constructor, will write the ReadOnlyParent2 header line into the CSV file. Dispose ReadOnlyParent2Writer once done.
    /// </summary>
    public ReadOnlyParent2Writer(string? fileNamePath, CsvConfig csvConfig, int maxLineCharLenght) {
      this.csvConfig = csvConfig;
      csvWriter = new CsvWriter(fileNamePath, csvConfig, maxLineCharLenght, null, 0);
      var csvHeaderString = Csv.ToCsvHeaderString(ReadOnlyParent2.Headers, csvConfig.Delimiter);
      csvWriter.WriteLine(csvHeaderString);
    }


    /// <summary>
    /// Writes the details of one ReadOnlyParent2 to the CSV file
    /// </summary>
    public void Write(string text) {
      csvWriter.StartNewLine();
      csvWriter.Write(text);
      csvWriter.WriteEndOfLine();
    }


    #region IDisposable Support
    //      -------------------

    /// <summary>
    /// Executes disposal of ReadOnlyParent2Writer exactly once.
    /// </summary>
    public void Dispose() {
      Dispose(true);

      GC.SuppressFinalize(this);
    }


    /// <summary>
    /// Is ReadOnlyParent2Writer already exposed ?
    /// </summary>
    protected bool IsDisposed {
      get { return isDisposed==1; }
    }


    int isDisposed = 0;


    /// <summary>
    /// Inheritors should call Dispose(false) from their destructor
    /// </summary>
    protected void Dispose(bool disposing) {
      var wasDisposed = Interlocked.Exchange(ref isDisposed, 1);//prevents that 2 threads dispose simultaneously
      if (wasDisposed==1) return; // already disposed

      csvWriter.Dispose();
    }
    #endregion
  }
  #endregion
}
