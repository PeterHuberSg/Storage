//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into Minimal.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Storage;


namespace StorageModel  {


  public partial class Minimal: IStorage<Minimal> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for Minimal. Gets set once Minimal gets added to DL.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(Minimal minimal, int key) { minimal.Key = key; }


    public int SomeNumber { get; private set; }


    public int AnotherNumber { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "SomeNumber", "AnotherNumber"};


    /// <summary>
    /// None existing Minimal
    /// </summary>
    internal static Minimal NoMinimal = new Minimal(int.MinValue, int.MinValue, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of Minimal has changed. Gets only raised for changes occurring after loading DL.Data with previously stored data.
    /// </summary>
    public event Action<Minimal>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// Minimal Constructor. If isStoring is true, adds Minimal to DL.Data.Minimals.
    /// </summary>
    public Minimal(int someNumber, int anotherNumber, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      SomeNumber = someNumber;
      AnotherNumber = anotherNumber;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for Minimal read from CSV file
    /// </summary>
    private Minimal(int key, CsvReader csvReader, DL _) {
      Key = key;
      SomeNumber = csvReader.ReadInt();
      AnotherNumber = csvReader.ReadInt();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New Minimal read from CSV file
    /// </summary>
    internal static Minimal Create(int key, CsvReader csvReader, DL context) {
      return new Minimal(key, csvReader, context);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds Minimal to DL.Data.Minimals. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"Minimal 'Class Minimal' can not be stored in DL.Data, key is {Key} greater equal 0.");
      }
      onStore();
      DL.Data.Minimals.Add(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write Minimal to CSV file
    /// </summary>
    internal const int MaxLineLength = 22;


    /// <summary>
    /// Write Minimal to CSV file
    /// </summary>
    internal static void Write(Minimal minimal, CsvWriter csvWriter) {
      minimal.onCsvWrite();
      csvWriter.Write(minimal.SomeNumber);
      csvWriter.Write(minimal.AnotherNumber);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Removing Minimal from DL.Data.Minimals is not supported.
    /// </summary>
    public void Remove() {
      throw new NotSupportedException();
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {SomeNumber}," +
        $" {AnotherNumber}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" SomeNumber: {SomeNumber}," +
        $" AnotherNumber: {AnotherNumber};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
