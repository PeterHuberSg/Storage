//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ParentDictionary.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Storage;


namespace StorageModel  {


  /// <summary>
  /// Example of a Parent child relationship using a Dictionary.
  /// </summary>
  public partial class ParentDictionary: IStorage<ParentDictionary> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ParentDictionary. Gets set once ParentDictionary gets added to DL.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(ParentDictionary parentDictionary, int key) { parentDictionary.Key = key; }


    /// <summary>
    /// Some Text
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Dictionary used instead of List. Comment is required and indicates with DictionaryChild property to use as key
    /// </summary>
    public IReadOnlyDictionary<DateTime, DictionaryChild> DictionaryChildren => dictionaryChildren;
    readonly Dictionary<DateTime, DictionaryChild> dictionaryChildren;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Text"};


    /// <summary>
    /// None existing ParentDictionary
    /// </summary>
    internal static ParentDictionary NoParentDictionary = new ParentDictionary("NoText", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of ParentDictionary has changed. Gets only raised for changes occurring after loading DL.Data with previously stored data.
    /// </summary>
    public event Action<ParentDictionary>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ParentDictionary Constructor. If isStoring is true, adds ParentDictionary to DL.Data.ParentDictionarys.
    /// </summary>
    public ParentDictionary(string text, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      dictionaryChildren = new Dictionary<DateTime, DictionaryChild>();
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for ParentDictionary read from CSV file
    /// </summary>
    private ParentDictionary(int key, CsvReader csvReader, DL _) {
      Key = key;
      Text = csvReader.ReadString()!;
      dictionaryChildren = new Dictionary<DateTime, DictionaryChild>();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New ParentDictionary read from CSV file
    /// </summary>
    internal static ParentDictionary Create(int key, CsvReader csvReader, DL context) {
      return new ParentDictionary(key, csvReader, context);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ParentDictionary to DL.Data.ParentDictionarys. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ParentDictionary 'Class ParentDictionary' can not be stored in DL.Data, key is {Key} greater equal 0.");
      }
      onStore();
      DL.Data.ParentDictionarys.Add(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write ParentDictionary to CSV file
    /// </summary>
    internal const int MaxLineLength = 150;


    /// <summary>
    /// Write ParentDictionary to CSV file
    /// </summary>
    internal static void Write(ParentDictionary parentDictionary, CsvWriter csvWriter) {
      parentDictionary.onCsvWrite();
      csvWriter.Write(parentDictionary.Text);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates ParentDictionary with the provided values
    /// </summary>
    public void Update(string text) {
      var isChangeDetected = false;
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdate();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdate();


    /// <summary>
    /// Updates this ParentDictionary with values from CSV file
    /// </summary>
    internal static void Update(ParentDictionary parentDictionary, CsvReader csvReader, DL _) {
      parentDictionary.Text = csvReader.ReadString()!;
      parentDictionary.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Add dictionaryChild to DictionaryChildren.
    /// </summary>
    internal void AddToDictionaryChildren(DictionaryChild dictionaryChild) {
      dictionaryChildren.Add(dictionaryChild.DateKey, dictionaryChild);
      onAddedToDictionaryChildren(dictionaryChild);
    }
    partial void onAddedToDictionaryChildren(DictionaryChild dictionaryChild);


    /// <summary>
    /// Removes dictionaryChild from DictionaryChildren.
    /// </summary>
    internal void RemoveFromDictionaryChildren(DictionaryChild dictionaryChild) {
#if DEBUG
      if (!dictionaryChildren.Remove(dictionaryChild.DateKey)) throw new Exception();
#else
        dictionaryChildren.Remove(dictionaryChild.DateKey);
#endif
      onRemovedFromDictionaryChildren(dictionaryChild);
    }
    partial void onRemovedFromDictionaryChildren(DictionaryChild dictionaryChild);


    /// <summary>
    /// Removes ParentDictionary from DL.Data.ParentDictionarys and 
    /// deletes all DictionaryChild where DictionaryChild.ParentDictionary links to this ParentDictionary.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"ParentDictionary.Remove(): ParentDictionary 'Class ParentDictionary' is not stored in DL.Data, key is {Key}.");
      }
      onRemove();
      DL.Data.ParentDictionarys.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Deletes all DictionaryChild where DictionaryChild.ParentDictionary links to this ParentDictionary.
    /// </summary>
    internal static void Disconnect(ParentDictionary parentDictionary) {
      foreach (var dictionaryChild in parentDictionary.DictionaryChildren.Values) {
         if (dictionaryChild.Key>=0) {
           dictionaryChild.Remove();
         }
      }
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" DictionaryChildren: {DictionaryChildren.Count};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
