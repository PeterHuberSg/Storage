//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into DictionaryChild.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Storage;


namespace StorageModel  {


  /// <summary>
  /// DictionaryChild has some information for ParentDictionary, where it gets stored in a Dictionary by Date
  /// </summary>
  public partial class DictionaryChild: IStorage<DictionaryChild> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for DictionaryChild. Gets set once DictionaryChild gets added to DL.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(DictionaryChild dictionaryChild, int key) { dictionaryChild.Key = key; }


    /// <summary>
    /// Parent
    /// </summary>
    public ParentDictionary ParentDictionary { get; private set; }


    /// <summary>
    /// Key field used in ParentDictionary.DictionaryChildren Dictionary
    /// Stores only dates but no times.
    /// </summary>
    public DateTime DateKey { get; private set; }


    /// <summary>
    /// Some info
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "ParentDictionary", "DateKey", "Text"};


    /// <summary>
    /// None existing DictionaryChild
    /// </summary>
    internal static DictionaryChild NoDictionaryChild = new DictionaryChild(ParentDictionary.NoParentDictionary, DateTime.MinValue.Date, "NoText", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of DictionaryChild has changed. Gets only raised for changes occurring after loading DL.Data with previously stored data.
    /// </summary>
    public event Action<DictionaryChild>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// DictionaryChild Constructor. If isStoring is true, adds DictionaryChild to DL.Data.DictionaryChildren
    /// and adds DictionaryChild to parentDictionary.DictionaryChildren.
    /// </summary>
    public DictionaryChild(ParentDictionary parentDictionary, DateTime dateKey, string text, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      ParentDictionary = parentDictionary;
      DateKey = dateKey.Floor(Rounding.Days);
      Text = text;
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for DictionaryChild read from CSV file
    /// </summary>
    private DictionaryChild(int key, CsvReader csvReader, DL context) {
      Key = key;
      if (context.ParentDictionarys.TryGetValue(csvReader.ReadInt(), out var parentDictionary)) {
        ParentDictionary = parentDictionary;
      } else {
        ParentDictionary = ParentDictionary.NoParentDictionary;
      }
      DateKey = csvReader.ReadDate();
      Text = csvReader.ReadString()!;
      if (ParentDictionary!=ParentDictionary.NoParentDictionary) {
        ParentDictionary.AddToDictionaryChildren(this);
      }
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New DictionaryChild read from CSV file
    /// </summary>
    internal static DictionaryChild Create(int key, CsvReader csvReader, DL context) {
      return new DictionaryChild(key, csvReader, context);
    }


    /// <summary>
    /// Verify that dictionaryChild.ParentDictionary exists.
    /// </summary>
    internal static bool Verify(DictionaryChild dictionaryChild) {
      if (dictionaryChild.ParentDictionary==ParentDictionary.NoParentDictionary) return false;
      return true;
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds DictionaryChild to DL.Data.DictionaryChildren and ParentDictionary.DictionaryChildren. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"DictionaryChild 'Class DictionaryChild' can not be stored in DL.Data, key is {Key} greater equal 0.");
      }
      onStore();
      DL.Data.DictionaryChildren.Add(this);
      ParentDictionary.AddToDictionaryChildren(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write DictionaryChild to CSV file
    /// </summary>
    internal const int MaxLineLength = 161;


    /// <summary>
    /// Write DictionaryChild to CSV file
    /// </summary>
    internal static void Write(DictionaryChild dictionaryChild, CsvWriter csvWriter) {
      dictionaryChild.onCsvWrite();
      if (dictionaryChild.ParentDictionary.Key<0) throw new Exception($"Cannot write dictionaryChild '{dictionaryChild}' to CSV File, because ParentDictionary is not stored in DL.Data.ParentDictionarys.");

      csvWriter.Write(dictionaryChild.ParentDictionary.Key.ToString());
      csvWriter.WriteDate(dictionaryChild.DateKey);
      csvWriter.Write(dictionaryChild.Text);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates DictionaryChild with the provided values
    /// </summary>
    public void Update(ParentDictionary parentDictionary, DateTime dateKey, string text) {
      var isChangeDetected = false;
      if (ParentDictionary!=parentDictionary) {
        ParentDictionary.RemoveFromDictionaryChildren(this);
        ParentDictionary = parentDictionary;
        ParentDictionary.AddToDictionaryChildren(this);
        isChangeDetected = true;
      }
      var dateKeyRounded = dateKey.Floor(Rounding.Days);
      if (DateKey!=dateKeyRounded) {
        DateKey = dateKeyRounded;
        isChangeDetected = true;
      }
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdate();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdate();


    /// <summary>
    /// Updates this DictionaryChild with values from CSV file
    /// </summary>
    internal static void Update(DictionaryChild dictionaryChild, CsvReader csvReader, DL context) {
      if (!context.ParentDictionarys.TryGetValue(csvReader.ReadInt(), out var parentDictionary)) {
        parentDictionary = ParentDictionary.NoParentDictionary;
      }
      if (dictionaryChild.ParentDictionary!=parentDictionary) {
        if (dictionaryChild.ParentDictionary!=ParentDictionary.NoParentDictionary) {
          dictionaryChild.ParentDictionary.RemoveFromDictionaryChildren(dictionaryChild);
        }
        dictionaryChild.ParentDictionary = parentDictionary;
        dictionaryChild.ParentDictionary.AddToDictionaryChildren(dictionaryChild);
      }
      dictionaryChild.DateKey = csvReader.ReadDate();
      dictionaryChild.Text = csvReader.ReadString()!;
      dictionaryChild.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes DictionaryChild from DL.Data.DictionaryChildren and 
    /// disconnects DictionaryChild from ParentDictionary because of ParentDictionary.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"DictionaryChild.Remove(): DictionaryChild 'Class DictionaryChild' is not stored in DL.Data, key is {Key}.");
      }
      onRemove();
      DL.Data.DictionaryChildren.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Disconnects DictionaryChild from ParentDictionary because of ParentDictionary.
    /// </summary>
    internal static void Disconnect(DictionaryChild dictionaryChild) {
      if (dictionaryChild.ParentDictionary!=ParentDictionary.NoParentDictionary) {
        dictionaryChild.ParentDictionary.RemoveFromDictionaryChildren(dictionaryChild);
      }
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {ParentDictionary.ToShortString()}," +
        $" {DateKey.ToShortDateString()}," +
        $" {Text}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" ParentDictionary: {ParentDictionary.ToShortString()}," +
        $" DateKey: {DateKey.ToShortDateString()}," +
        $" Text: {Text};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
