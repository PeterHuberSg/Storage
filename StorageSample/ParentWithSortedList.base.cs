//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into ParentWithSortedList.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Storage;


namespace StorageModel  {


    /// <summary>
    /// Example of a Parent child relationship using a SortedList.
    /// </summary>
  public partial class ParentWithSortedList: IStorage<ParentWithSortedList> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for ParentWithSortedList. Gets set once ParentWithSortedList gets added to DL.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(ParentWithSortedList parentWithSortedList, int key) { parentWithSortedList.Key = key; }


    /// <summary>
    /// Some Text
    /// </summary>
    public string Text { get; private set; }


    /// <summary>
    /// SortedList used instead of List. Comment is required and indicates which property of the SortedListChild to 
    /// use as key
    /// </summary>
    public IReadOnlyDictionary<DateTime, SortedListChild> SortedListChildren => sortedListChildren;
    readonly SortedList<DateTime, SortedListChild> sortedListChildren;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Text"};


    /// <summary>
    /// None existing ParentWithSortedList
    /// </summary>
    internal static ParentWithSortedList NoParentWithSortedList = new ParentWithSortedList("NoText", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of ParentWithSortedList has changed. Gets only raised for changes occurring after loading DL.Data with previously stored data.
    /// </summary>
    public event Action<ParentWithSortedList>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// ParentWithSortedList Constructor. If isStoring is true, adds ParentWithSortedList to DL.Data.ParentsWithSortedList.
    /// </summary>
    public ParentWithSortedList(string text, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Text = text;
      sortedListChildren = new SortedList<DateTime, SortedListChild>();
      onConstruct();

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Constructor for ParentWithSortedList read from CSV file
    /// </summary>
    private ParentWithSortedList(int key, CsvReader csvReader, DL context) {
      Key = key;
      Text = csvReader.ReadString();
      sortedListChildren = new SortedList<DateTime, SortedListChild>();
      onCsvConstruct(context);
    }
    partial void onCsvConstruct(DL context);


    /// <summary>
    /// New ParentWithSortedList read from CSV file
    /// </summary>
    internal static ParentWithSortedList Create(int key, CsvReader csvReader, DL context) {
      return new ParentWithSortedList(key, csvReader, context);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds ParentWithSortedList to DL.Data.ParentsWithSortedList. 
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"ParentWithSortedList 'Class ParentWithSortedList' can not be stored in DL.Data, key is {Key} greater equal 0.");
      }
      onStore();
      DL.Data.ParentsWithSortedList.Add(this);
    }
    partial void onStore();


    /// <summary>
    /// Maximal number of UTF8 characters needed to write ParentWithSortedList to CSV file
    /// </summary>
    internal const int MaxLineLength = 150;


    /// <summary>
    /// Write ParentWithSortedList to CSV file
    /// </summary>
    internal static void Write(ParentWithSortedList parentWithSortedList, CsvWriter csvWriter) {
      parentWithSortedList.onCsvWrite();
      csvWriter.Write(parentWithSortedList.Text);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates ParentWithSortedList with the provided values
    /// </summary>
    public void Update(string text) {
      var isChangeDetected = false;
      if (Text!=text) {
        Text = text;
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdate();
        HasChanged?.Invoke(this);
      }
    }
    partial void onUpdate();


    /// <summary>
    /// Updates this ParentWithSortedList with values from CSV file
    /// </summary>
    internal static void Update(ParentWithSortedList parentWithSortedList, CsvReader csvReader, DL _) {
      parentWithSortedList.Text = csvReader.ReadString();
      parentWithSortedList.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Add sortedListChild to SortedListChildren.
    /// </summary>
    internal void AddToSortedListChildren(SortedListChild sortedListChild) {
      sortedListChildren.Add(sortedListChild.DateKey, sortedListChild);
      onAddedToSortedListChildren(sortedListChild);
    }
    partial void onAddedToSortedListChildren(SortedListChild sortedListChild);


    /// <summary>
    /// Removes sortedListChild from SortedListChildren.
    /// </summary>
    internal void RemoveFromSortedListChildren(SortedListChild sortedListChild) {
#if DEBUG
      if (!sortedListChildren.Remove(sortedListChild.DateKey)) throw new Exception();
#else
        sortedListChildren.Remove(sortedListChild.DateKey);
#endif
      onRemovedFromSortedListChildren(sortedListChild);
    }
    partial void onRemovedFromSortedListChildren(SortedListChild sortedListChild);


    /// <summary>
    /// Removes ParentWithSortedList from DL.Data.ParentsWithSortedList and 
    /// deletes all SortedListChild where SortedListChild.ParentWithSortedList links to this ParentWithSortedList.
    /// </summary>
    public void Remove() {
      if (Key<0) {
        throw new Exception($"ParentWithSortedList.Remove(): ParentWithSortedList 'Class ParentWithSortedList' is not stored in DL.Data, key is {Key}.");
      }
      onRemove();
      DL.Data.ParentsWithSortedList.Remove(Key);
    }
    partial void onRemove();


    /// <summary>
    /// Deletes all SortedListChild where SortedListChild.ParentWithSortedList links to this ParentWithSortedList.
    /// </summary>
    internal static void Disconnect(ParentWithSortedList parentWithSortedList) {
      var SortedListChildrenCopy = new List<SortedListChild>();
      //make a copy to avoid an exception in the next foreach when sortedListChild.Remove() changes SortedListChildren
      foreach (var sortedListChild in parentWithSortedList.SortedListChildren.Values) {
        SortedListChildrenCopy.Add(sortedListChild);
      }
      foreach (var sortedListChild in SortedListChildrenCopy) {
        if (sortedListChild.Key>=0) {
          sortedListChild.Remove();
        }
      }
    }


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Text}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key}," +
        $" Text: {Text}," +
        $" SortedListChildren: {SortedListChildren.Count};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
